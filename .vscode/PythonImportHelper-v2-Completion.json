[
    {
        "label": "fastapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi",
        "description": "fastapi",
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "UnidadInsumo",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "TipoInsumo",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "isExtraImport": true,
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputCreate",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputUpdate",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "TipoInsumoSchema",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputCreate",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputUpdate",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "UnidadInsumoSchema",
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "isExtraImport": true,
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "src.models.auditModel",
        "description": "src.models.auditModel",
        "isExtraImport": true,
        "detail": "src.models.auditModel",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "TokenTable",
        "importPath": "src.models.authModel",
        "description": "src.models.authModel",
        "isExtraImport": true,
        "detail": "src.models.authModel",
        "documentation": {}
    },
    {
        "label": "TokenTable",
        "importPath": "src.models.authModel",
        "description": "src.models.authModel",
        "isExtraImport": true,
        "detail": "src.models.authModel",
        "documentation": {}
    },
    {
        "label": "TokenTable",
        "importPath": "src.models.authModel",
        "description": "src.models.authModel",
        "isExtraImport": true,
        "detail": "src.models.authModel",
        "documentation": {}
    },
    {
        "label": "src.models.userModel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "isExtraImport": true,
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "isExtraImport": true,
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "isExtraImport": true,
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "TokenSchema",
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "isExtraImport": true,
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "isExtraImport": true,
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_permission",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_permission",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_permission",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_permission",
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "isExtraImport": true,
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "isExtraImport": true,
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "CostsCreate",
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsUpdate",
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsCreate",
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsUpdate",
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsOut",
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "isExtraImport": true,
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "isExtraImport": true,
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropUpdate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropOut",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropUpdate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropOut",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropOut",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropUpdate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "isExtraImport": true,
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "isExtraImport": true,
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "isExtraImport": true,
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SmallInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Time",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "InvalidOperation",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "isExtraImport": true,
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "Diagnostic",
        "importPath": "src.models.diagnosticModel",
        "description": "src.models.diagnosticModel",
        "isExtraImport": true,
        "detail": "src.models.diagnosticModel",
        "documentation": {}
    },
    {
        "label": "DiagnosticCreate",
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "isExtraImport": true,
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "Diagnostic",
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "isExtraImport": true,
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticCreate",
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "isExtraImport": true,
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "UpdateFarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "UpdateFarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "UpdateFarmSchema",
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "AdditionalCosts",
        "importPath": "src.models.additionalCostsModel",
        "description": "src.models.additionalCostsModel",
        "isExtraImport": true,
        "detail": "src.models.additionalCostsModel",
        "documentation": {}
    },
    {
        "label": "FinancialExpenses",
        "importPath": "src.models.financialExpensesModel",
        "description": "src.models.financialExpensesModel",
        "isExtraImport": true,
        "detail": "src.models.financialExpensesModel",
        "documentation": {}
    },
    {
        "label": "FinancialExpenses",
        "importPath": "src.models.financialExpensesModel",
        "description": "src.models.financialExpensesModel",
        "isExtraImport": true,
        "detail": "src.models.financialExpensesModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "isExtraImport": true,
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "isExtraImport": true,
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "isExtraImport": true,
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "LaborCulturalCreate",
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "isExtraImport": true,
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalUpdate",
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "isExtraImport": true,
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalCreate",
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "isExtraImport": true,
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalUpdate",
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "isExtraImport": true,
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalResponse",
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "isExtraImport": true,
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "UpdateLandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "LandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "UpdateLandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "LandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "LandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "UpdateLandSchema",
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "isExtraImport": true,
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaCreate",
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "isExtraImport": true,
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaUpdate",
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "isExtraImport": true,
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricola",
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "isExtraImport": true,
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaCreate",
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "isExtraImport": true,
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaUpdate",
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "isExtraImport": true,
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "isExtraImport": true,
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "MonitoringCreate",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringUpdate",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringOut",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringCreate",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringUpdate",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringOut",
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "isExtraImport": true,
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "isExtraImport": true,
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "isExtraImport": true,
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "isExtraImport": true,
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "OpMechCreate",
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "isExtraImport": true,
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechUpdate",
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "isExtraImport": true,
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechCreate",
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "isExtraImport": true,
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechUpdate",
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "isExtraImport": true,
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechResponse",
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "isExtraImport": true,
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "PasswordReset",
        "importPath": "src.models.passwordResetModel",
        "description": "src.models.passwordResetModel",
        "isExtraImport": true,
        "detail": "src.models.passwordResetModel",
        "documentation": {}
    },
    {
        "label": "ChangePassword",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PasswordUpdate",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "ChangePassword",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PasswordUpdate",
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "isExtraImport": true,
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "src.helpers.email_helper",
        "description": "src.helpers.email_helper",
        "isExtraImport": true,
        "detail": "src.helpers.email_helper",
        "documentation": {}
    },
    {
        "label": "src.models.permissionModel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "RolPermiso",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "RolPermiso",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "RolPermiso",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "RolPermiso",
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "isExtraImport": true,
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "CreatePermission",
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "isExtraImport": true,
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "UpdatePermission",
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "isExtraImport": true,
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "CreatePermission",
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "isExtraImport": true,
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "PermissionSchema",
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "isExtraImport": true,
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "UpdatePermission",
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "isExtraImport": true,
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRole",
        "importPath": "src.models.userFarmRoleModel",
        "description": "src.models.userFarmRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userFarmRoleModel",
        "documentation": {}
    },
    {
        "label": "UserFarmRole",
        "importPath": "src.models.userFarmRoleModel",
        "description": "src.models.userFarmRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userFarmRoleModel",
        "documentation": {}
    },
    {
        "label": "UserFarmRole",
        "importPath": "src.models.userFarmRoleModel",
        "description": "src.models.userFarmRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userFarmRoleModel",
        "documentation": {}
    },
    {
        "label": "UserFarmRole",
        "importPath": "src.models.userFarmRoleModel",
        "description": "src.models.userFarmRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userFarmRoleModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "isExtraImport": true,
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageCreate",
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageUpdate",
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageCreate",
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageUpdate",
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageResponse",
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputWithTipoSchema",
        "importPath": "src.schemas.preciosinsumoSchema",
        "description": "src.schemas.preciosinsumoSchema",
        "isExtraImport": true,
        "detail": "src.schemas.preciosinsumoSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputWithTipoSchema",
        "importPath": "src.schemas.preciosinsumoSchema",
        "description": "src.schemas.preciosinsumoSchema",
        "isExtraImport": true,
        "detail": "src.schemas.preciosinsumoSchema",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "timm",
        "description": "timm",
        "isExtraImport": true,
        "detail": "timm",
        "documentation": {}
    },
    {
        "label": "transforms",
        "importPath": "torchvision",
        "description": "torchvision",
        "isExtraImport": true,
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "src.models.phytosanitaryDiagnosisModel",
        "description": "src.models.phytosanitaryDiagnosisModel",
        "isExtraImport": true,
        "detail": "src.models.phytosanitaryDiagnosisModel",
        "documentation": {}
    },
    {
        "label": "RoleCreate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleUpdate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleCreate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleUpdate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleCreate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleUpdate",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "isExtraImport": true,
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "BiologicalParamModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "ChemicalParamModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "PhysicalParamModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "MacronutrientModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "MicronutrientModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilTypeModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "TextureModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "ColorModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "isExtraImport": true,
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisCreate",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "BiologicalParamOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "ChemicalParamOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "PhysicalParamOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisSimpleOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisCreate",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisSimpleOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilTypeOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "TextureOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "ColorOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "PhysicalParamOut",
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "TaskCreate",
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "isExtraImport": true,
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskUpdate",
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "isExtraImport": true,
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskCreate",
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "isExtraImport": true,
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskUpdate",
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "isExtraImport": true,
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskOut",
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "isExtraImport": true,
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "CrearUsuario",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "CrearUsuario",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "CrearUsuario",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "isExtraImport": true,
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleCreate",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleShema",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleUpdate",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleShema",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleCreate",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleUpdate",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "AssignFarmRequest",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "src.models.userRoleModel",
        "description": "src.models.userRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userRoleModel",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "src.models.userRoleModel",
        "description": "src.models.userRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userRoleModel",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "src.models.userRoleModel",
        "description": "src.models.userRoleModel",
        "isExtraImport": true,
        "detail": "src.models.userRoleModel",
        "documentation": {}
    },
    {
        "label": "CreateUserRole",
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRole",
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "CreateUserRole",
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRole",
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "isExtraImport": true,
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "VariableCost",
        "importPath": "src.models.variableCostModel",
        "description": "src.models.variableCostModel",
        "isExtraImport": true,
        "detail": "src.models.variableCostModel",
        "documentation": {}
    },
    {
        "label": "VariableCostsCreate",
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "isExtraImport": true,
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VariableCostsResponse",
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "isExtraImport": true,
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VariableCostsCreate",
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "isExtraImport": true,
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VariableCostsResponse",
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "isExtraImport": true,
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozCreate",
        "importPath": "src.schemas.varietyArrozSchema",
        "description": "src.schemas.varietyArrozSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyArrozSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozCreate",
        "importPath": "src.schemas.varietyArrozSchema",
        "description": "src.schemas.varietyArrozSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyArrozSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozResponse",
        "importPath": "src.schemas.varietyArrozSchema",
        "description": "src.schemas.varietyArrozSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyArrozSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageCreate",
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageUpdate",
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageCreate",
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageUpdate",
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageResponse",
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "isExtraImport": true,
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "isExtraImport": true,
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecordCreate",
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "isExtraImport": true,
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "WeatherRecordCreate",
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "isExtraImport": true,
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "WeatherRecordResponse",
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "isExtraImport": true,
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "LoteIdWithCoordinatesRequest",
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "isExtraImport": true,
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidKeyTypeError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_EXPIRE_MINUTES",
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "isExtraImport": true,
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.helpers.auth_bearer",
        "description": "src.helpers.auth_bearer",
        "isExtraImport": true,
        "detail": "src.helpers.auth_bearer",
        "documentation": {}
    },
    {
        "label": "WeightUnit",
        "importPath": "src.models.weightUnitModel",
        "description": "src.models.weightUnitModel",
        "isExtraImport": true,
        "detail": "src.models.weightUnitModel",
        "documentation": {}
    },
    {
        "label": "Agua",
        "importPath": "src.models.waterModel",
        "description": "src.models.waterModel",
        "isExtraImport": true,
        "detail": "src.models.waterModel",
        "documentation": {}
    },
    {
        "label": "createInput",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "deleteInput",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "getAllInput",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "getInputById",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "updateInput",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_units",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_input_types",
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "isExtraImport": true,
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_audits",
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "isExtraImport": true,
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audits_by_table",
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "isExtraImport": true,
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audits_by_operation",
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "isExtraImport": true,
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audit_by_table_and_id",
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "isExtraImport": true,
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "isExtraImport": true,
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "isExtraImport": true,
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "isExtraImport": true,
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "isExtraImport": true,
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "filter_departments",
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "isExtraImport": true,
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "filter_cities_by_department",
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "isExtraImport": true,
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "create_cost",
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "isExtraImport": true,
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "get_costs_by_cultivo",
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "isExtraImport": true,
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "get_cost_by_id",
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "isExtraImport": true,
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "update_cost",
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "isExtraImport": true,
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "delete_cost",
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "isExtraImport": true,
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "generateCropCycle",
        "importPath": "src.controller.cropCycleController",
        "description": "src.controller.cropCycleController",
        "isExtraImport": true,
        "detail": "src.controller.cropCycleController",
        "documentation": {}
    },
    {
        "label": "CropCycleRequest",
        "importPath": "src.schemas.cropCycleSchemas",
        "description": "src.schemas.cropCycleSchemas",
        "isExtraImport": true,
        "detail": "src.schemas.cropCycleSchemas",
        "documentation": {}
    },
    {
        "label": "CropCycleStageResponse",
        "importPath": "src.schemas.cropCycleSchemas",
        "description": "src.schemas.cropCycleSchemas",
        "isExtraImport": true,
        "detail": "src.schemas.cropCycleSchemas",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "updateCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "deleteCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getAllCrops",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropInfo",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropsByLand  # Importar la nueva función",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "deleteCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getAllCrops",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropsByLand",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropInfo",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "updateCrop",
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "isExtraImport": true,
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "get_cultural_works_by_crop",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "get_total_cultural_works_value",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_activity",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_machinery",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_operator",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_date_range",
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "isExtraImport": true,
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "create_diagnostic",
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "isExtraImport": true,
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "get_diagnostic",
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "isExtraImport": true,
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "get_diagnostics",
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "isExtraImport": true,
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "update_diagnostic",
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "isExtraImport": true,
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "delete_diagnostic",
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "isExtraImport": true,
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "get_crops_by_farm_id",
        "importPath": "src.controller.farmCropController",
        "description": "src.controller.farmCropController",
        "isExtraImport": true,
        "detail": "src.controller.farmCropController",
        "documentation": {}
    },
    {
        "label": "FarmLotSchema",
        "importPath": "src.schemas.farmLotSchema",
        "description": "src.schemas.farmLotSchema",
        "isExtraImport": true,
        "detail": "src.schemas.farmLotSchema",
        "documentation": {}
    },
    {
        "label": "get_lots_by_farm",
        "importPath": "src.controller.farmLotController",
        "description": "src.controller.farmLotController",
        "isExtraImport": true,
        "detail": "src.controller.farmLotController",
        "documentation": {}
    },
    {
        "label": "createFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "deleteFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getAllFarms",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getFarmById",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "updateFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "createFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "deleteFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getAllFarms",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getFarmById",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "updateFarm",
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "isExtraImport": true,
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "calculate_total_additional_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_financial_expenses",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_estimated_additional_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_estimated_financial_expenses",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_labor_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_machinery_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_agricultural_input_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_labor_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_machinery_costs_from_controller",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_agricultural_input_costs",
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "isExtraImport": true,
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "TotalAdditionalCostsResponse",
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "isExtraImport": true,
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "TotalFinancialExpensesResponse",
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "isExtraImport": true,
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "RealLaborCostsResponse",
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "isExtraImport": true,
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "MachineryCostResponse",
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "isExtraImport": true,
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputCostsResponse",
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "isExtraImport": true,
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "create_harvest",
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "isExtraImport": true,
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "get_harvest",
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "isExtraImport": true,
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "update_harvest",
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "isExtraImport": true,
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "delete_harvest",
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "isExtraImport": true,
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "get_all_harvests_by_crop",
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "isExtraImport": true,
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "HarvestCreate",
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "isExtraImport": true,
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "HarvestOut",
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "isExtraImport": true,
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "HarvestUpdate",
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "isExtraImport": true,
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "create_labor_cultural",
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "isExtraImport": true,
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "get_labores_culturales",
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "isExtraImport": true,
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "get_labor_cultural_by_id",
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "isExtraImport": true,
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "update_labor_cultural",
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "isExtraImport": true,
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "delete_labor_cultural",
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "isExtraImport": true,
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "getCropsByLandId",
        "importPath": "src.controller.landCropController",
        "description": "src.controller.landCropController",
        "isExtraImport": true,
        "detail": "src.controller.landCropController",
        "documentation": {}
    },
    {
        "label": "createLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "deleteLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getAllLands",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getLandById",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "updateLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_total_rent",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_machinery_and_labor_costs",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_agricultural_input_costs",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "createLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "deleteLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getLandById",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getAllLands",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "updateLand",
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "isExtraImport": true,
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "create_machinery",
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "isExtraImport": true,
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "get_machinery",
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "isExtraImport": true,
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "get_all_machineries",
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "isExtraImport": true,
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "update_machinery",
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "isExtraImport": true,
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "delete_machinery",
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "isExtraImport": true,
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "create_monitoring",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitorings",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitoring",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "update_monitoring",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "delete_monitoring",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitorings_by_crop  # Importamos la nueva función",
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "isExtraImport": true,
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "create_op_mech",
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "isExtraImport": true,
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "get_op_mech_by_id",
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "isExtraImport": true,
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "get_all_op_mechs",
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "isExtraImport": true,
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "update_op_mech",
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "isExtraImport": true,
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "delete_op_mech",
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "isExtraImport": true,
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "changePassword",
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "isExtraImport": true,
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "requestPasswordReset",
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "isExtraImport": true,
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "updatePassword",
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "isExtraImport": true,
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "showResetPasswordPage",
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "isExtraImport": true,
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "get_all_permissions",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "createPermission",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "getPermission",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "updatePermission",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "deletePermission",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "remove_permission_from_role",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "add_permission_to_role",
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "isExtraImport": true,
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "get_all_phenological_stages",
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "isExtraImport": true,
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "get_phenological_stage",
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "isExtraImport": true,
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "create_phenological_stage",
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "isExtraImport": true,
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "update_phenological_stage",
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "isExtraImport": true,
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "delete_phenological_stage",
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "isExtraImport": true,
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "get_inputs_by_crop",
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "isExtraImport": true,
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "get_total_input_cost_by_crop",
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "isExtraImport": true,
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "get_inputs_by_crop_and_partial_name",
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "isExtraImport": true,
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "predict_image",
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "isExtraImport": true,
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "get_diagnostics_by_cultivo",
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "isExtraImport": true,
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "get_diagnostic_detail",
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "isExtraImport": true,
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitarioOut",
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "isExtraImport": true,
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "create_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_roles",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_role_by_id",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "update_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "delete_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "create_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_roles",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_role_by_id",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "update_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "delete_role",
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "isExtraImport": true,
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "create_soil_analysis",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_analyses_by_lote",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_analysis_detail",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "update_soil_analysis",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "delete_soil_analysis",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_soil_types",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_textures",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_colors",
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "isExtraImport": true,
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_all_tasks",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_task_by_id",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "create_task",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "update_task",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_tasks_by_crop_id",
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "isExtraImport": true,
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_total_costs",
        "importPath": "src.controller.totalcostsController",
        "description": "src.controller.totalcostsController",
        "isExtraImport": true,
        "detail": "src.controller.totalcostsController",
        "documentation": {}
    },
    {
        "label": "get_overall_total_cost",
        "importPath": "src.controller.totalcostsController",
        "description": "src.controller.totalcostsController",
        "isExtraImport": true,
        "detail": "src.controller.totalcostsController",
        "documentation": {}
    },
    {
        "label": "TotalCostsResponse",
        "importPath": "src.schemas.totalcostsSchema",
        "description": "src.schemas.totalcostsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.totalcostsSchema",
        "documentation": {}
    },
    {
        "label": "OverallTotalResponse",
        "importPath": "src.schemas.totalcostsSchema",
        "description": "src.schemas.totalcostsSchema",
        "isExtraImport": true,
        "detail": "src.schemas.totalcostsSchema",
        "documentation": {}
    },
    {
        "label": "create_user_farm",
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "isExtraImport": true,
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "get_all_user_farms",
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "isExtraImport": true,
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "getUserFarmRolById",
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "isExtraImport": true,
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "update_user_farm_role_by_id",
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "isExtraImport": true,
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "delete_user_farm",
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "isExtraImport": true,
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "deleteUserRole",
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "isExtraImport": true,
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "getUserRoleByUserId",
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "isExtraImport": true,
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "registerUserRole",
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "isExtraImport": true,
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "updateUserRole",
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "isExtraImport": true,
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "isUserAdmin",
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "isExtraImport": true,
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "deleteUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "getUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "deleteUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "getUsers",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "getUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "isExtraImport": true,
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "create_variable_cost",
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "isExtraImport": true,
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "get_variable_costs",
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "isExtraImport": true,
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "get_variable_costs_details",
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "isExtraImport": true,
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "createVariety",
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "isExtraImport": true,
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "getVariety",
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "isExtraImport": true,
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "listVarieties",
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "isExtraImport": true,
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "updateVariety",
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "isExtraImport": true,
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "deleteVariety",
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "isExtraImport": true,
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "create_variety_rice_stage",
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "isExtraImport": true,
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "get_variety_rice_stages",
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "isExtraImport": true,
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "get_variety_rice_stage_by_id",
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "isExtraImport": true,
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "update_variety_rice_stage",
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "isExtraImport": true,
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "delete_variety_rice_stage",
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "isExtraImport": true,
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "createWeatherRecord",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherRecord",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "getWeatherRecommendations",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherHistory",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "createManualWeatherRecord",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "createWeatherRecordFromAPI",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherRecordDetail",
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "isExtraImport": true,
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "condecimal",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "root_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "condecimal",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "isExtraImport": true,
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "VARIABLE_COST_ROUTES",
        "importPath": "src.routes.variableCostRoutes",
        "description": "src.routes.variableCostRoutes",
        "isExtraImport": true,
        "detail": "src.routes.variableCostRoutes",
        "documentation": {}
    },
    {
        "label": "WEATHER_RECORD_ROUTES",
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "isExtraImport": true,
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "LABOR_CULTURAL_ROUTES",
        "importPath": "src.routes.laborCulturalRoutes",
        "description": "src.routes.laborCulturalRoutes",
        "isExtraImport": true,
        "detail": "src.routes.laborCulturalRoutes",
        "documentation": {}
    },
    {
        "label": "CROP_CYCLE_ROUTES",
        "importPath": "src.routes.cropCycleRoutes",
        "description": "src.routes.cropCycleRoutes",
        "isExtraImport": true,
        "detail": "src.routes.cropCycleRoutes",
        "documentation": {}
    },
    {
        "label": "AGRICULTURAL_INPUT_ROUTES",
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "isExtraImport": true,
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "AUTH_ROUTES",
        "importPath": "src.routes.authRoutes",
        "description": "src.routes.authRoutes",
        "isExtraImport": true,
        "detail": "src.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "CROP_ROUTES",
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "isExtraImport": true,
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_LOT_ROUTES",
        "importPath": "src.routes.farmLotRoutes",
        "description": "src.routes.farmLotRoutes",
        "isExtraImport": true,
        "detail": "src.routes.farmLotRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_ROUTES",
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "isExtraImport": true,
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "LAND_CROP_ROUTES",
        "importPath": "src.routes.landCropRoutes",
        "description": "src.routes.landCropRoutes",
        "isExtraImport": true,
        "detail": "src.routes.landCropRoutes",
        "documentation": {}
    },
    {
        "label": "LAND_ROUTES",
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "isExtraImport": true,
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_ROUTES",
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "isExtraImport": true,
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "PERMISSION_ROUTES",
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "isExtraImport": true,
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "ROL_PERMISSION_ROUTES",
        "importPath": "src.routes.rol_permissionRoutes",
        "description": "src.routes.rol_permissionRoutes",
        "isExtraImport": true,
        "detail": "src.routes.rol_permissionRoutes",
        "documentation": {}
    },
    {
        "label": "ROLE_ROUTES",
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "isExtraImport": true,
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "USER_FARM_ROUTES",
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "isExtraImport": true,
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "USER_ROLE_ROUTES",
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "isExtraImport": true,
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "USER_ROUTES",
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "isExtraImport": true,
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "VARIETY_ARROZ_ROUTES",
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "isExtraImport": true,
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "OP_MECH_ROUTES",
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "isExtraImport": true,
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "TASK_ROUTES",
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "isExtraImport": true,
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "MACHINERY_ROUTES",
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "isExtraImport": true,
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "SOIL_ANALYSIS_ROUTES",
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "isExtraImport": true,
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "MONITORING_ROUTES",
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "isExtraImport": true,
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "PHENOLOGICAL_STAGE_ROUTES",
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "isExtraImport": true,
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "VARIETY_RICE_STAGE_ROUTES",
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "isExtraImport": true,
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_CROP_ROUTES",
        "importPath": "src.routes.farmCropRoutes",
        "description": "src.routes.farmCropRoutes",
        "isExtraImport": true,
        "detail": "src.routes.farmCropRoutes",
        "documentation": {}
    },
    {
        "label": "USER_LOT_ROUTES",
        "importPath": "src.routes.userLoteRoutes",
        "description": "src.routes.userLoteRoutes",
        "isExtraImport": true,
        "detail": "src.routes.userLoteRoutes",
        "documentation": {}
    },
    {
        "label": "FINANCIAL_ROUTES",
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "isExtraImport": true,
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routes.cities_Router",
        "description": "src.routes.cities_Router",
        "isExtraImport": true,
        "detail": "src.routes.cities_Router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routes.preciosinsumoRoutes",
        "description": "src.routes.preciosinsumoRoutes",
        "isExtraImport": true,
        "detail": "src.routes.preciosinsumoRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "isExtraImport": true,
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "HARVEST_ROUTES",
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "isExtraImport": true,
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "isExtraImport": true,
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routes.totalcostsRoutes",
        "description": "src.routes.totalcostsRoutes",
        "isExtraImport": true,
        "detail": "src.routes.totalcostsRoutes",
        "documentation": {}
    },
    {
        "label": "AUDIT_ROUTES",
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "isExtraImport": true,
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "createInput",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def createInput(insumo: AgriculturalInputCreate, session: Session = Depends(get_session)):\n    newInsumo = AgriculturalInput(\n        nombre=insumo.nombre,\n        descripcion=insumo.descripcion,\n        unidad_id=insumo.unidad_id,\n        tipo_insumo_id=insumo.tipo_insumo_id,  # Nuevo campo agregado\n        costo_unitario=insumo.costo_unitario,\n        cantidad=insumo.cantidad\n    )\n    session.add(newInsumo)",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "getAllInput",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def getAllInput(session: Session = Depends(get_session)):\n    # Usar joinedload para cargar las relaciones `unidad` y `tipo_insumo`\n    insumos = session.query(AgriculturalInput).options(\n        joinedload(AgriculturalInput.unidad),\n        joinedload(AgriculturalInput.tipo_insumo)  # Cargar la relación con tipo_insumo\n    ).all()\n    return insumos\ndef getInputById(insumo_id: int, session: Session = Depends(get_session)):\n    # Cargar las relaciones `unidad` y `tipo_insumo`\n    insumo = session.query(AgriculturalInput).options(",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "getInputById",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def getInputById(insumo_id: int, session: Session = Depends(get_session)):\n    # Cargar las relaciones `unidad` y `tipo_insumo`\n    insumo = session.query(AgriculturalInput).options(\n        joinedload(AgriculturalInput.unidad),\n        joinedload(AgriculturalInput.tipo_insumo)\n    ).filter(AgriculturalInput.id == insumo_id).first()\n    if not insumo:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Insumo agrícola con id {insumo_id} no encontrado\"",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "updateInput",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def updateInput(insumo_id: int, insumo_data: AgriculturalInputUpdate, session: Session = Depends(get_session)):\n    insumo = session.query(AgriculturalInput).filter(AgriculturalInput.id == insumo_id).first()\n    if not insumo:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Insumo agrícola con id {insumo_id} no encontrado\"\n        )\n    # Convertir insumo_data a un diccionario y excluir valores no enviados\n    update_data = insumo_data.dict(exclude_unset=True)\n    # Actualizar solo los campos que se han enviado",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "deleteInput",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def deleteInput(insumo_id: int, session: Session = Depends(get_session)):\n    insumo = session.query(AgriculturalInput).filter(AgriculturalInput.id == insumo_id).first()\n    if not insumo:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Insumo agrícola con id {insumo_id} no encontrado\"\n        )\n    session.delete(insumo)\n    session.commit()\n    return {\"msg\": \"Insumo agrícola eliminado satisfactoriamente\"}",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_units",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def get_all_units(session: Session):\n    return session.query(UnidadInsumo).all()\ndef get_all_input_types(session: Session):\n    tipos = session.query(TipoInsumo).all()\n    return [{\"id\": tipo.id, \"nombre\": tipo.nombre} for tipo in tipos]",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_input_types",
        "kind": 2,
        "importPath": "src.controller.agricultralInputController",
        "description": "src.controller.agricultralInputController",
        "peekOfCode": "def get_all_input_types(session: Session):\n    tipos = session.query(TipoInsumo).all()\n    return [{\"id\": tipo.id, \"nombre\": tipo.nombre} for tipo in tipos]",
        "detail": "src.controller.agricultralInputController",
        "documentation": {}
    },
    {
        "label": "get_all_audits",
        "kind": 2,
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "peekOfCode": "def get_all_audits(db: Session):\n    return db.query(AuditLog).all()\ndef get_audits_by_table(db: Session, table_name: str):\n    return db.query(AuditLog).filter(AuditLog.table_name == table_name).all()\ndef get_audits_by_operation(db: Session, operation_type: str):\n    return db.query(AuditLog).filter(AuditLog.operation_type == operation_type).all()\ndef get_audit_by_table_and_id(db: Session, table_name: str, record_id: int):\n    return (\n        db.query(AuditLog)\n        .filter(AuditLog.table_name == table_name, AuditLog.record_id == record_id)",
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audits_by_table",
        "kind": 2,
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "peekOfCode": "def get_audits_by_table(db: Session, table_name: str):\n    return db.query(AuditLog).filter(AuditLog.table_name == table_name).all()\ndef get_audits_by_operation(db: Session, operation_type: str):\n    return db.query(AuditLog).filter(AuditLog.operation_type == operation_type).all()\ndef get_audit_by_table_and_id(db: Session, table_name: str, record_id: int):\n    return (\n        db.query(AuditLog)\n        .filter(AuditLog.table_name == table_name, AuditLog.record_id == record_id)\n        .all()\n    )",
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audits_by_operation",
        "kind": 2,
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "peekOfCode": "def get_audits_by_operation(db: Session, operation_type: str):\n    return db.query(AuditLog).filter(AuditLog.operation_type == operation_type).all()\ndef get_audit_by_table_and_id(db: Session, table_name: str, record_id: int):\n    return (\n        db.query(AuditLog)\n        .filter(AuditLog.table_name == table_name, AuditLog.record_id == record_id)\n        .all()\n    )",
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "get_audit_by_table_and_id",
        "kind": 2,
        "importPath": "src.controller.auditController",
        "description": "src.controller.auditController",
        "peekOfCode": "def get_audit_by_table_and_id(db: Session, table_name: str, record_id: int):\n    return (\n        db.query(AuditLog)\n        .filter(AuditLog.table_name == table_name, AuditLog.record_id == record_id)\n        .all()\n    )",
        "detail": "src.controller.auditController",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "peekOfCode": "def login(request: LoginRequest, db: Session = Depends(get_session)):\n    # Validate email contains '@'\n    if \"@\" not in request.email:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid email format. Email must contain '@'.\")\n    # Validate password contains at least one uppercase letter, one lowercase letter, one digit, and has at least 8 characters\n    password_pattern = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$\")\n    if not password_pattern.match(request.password):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Password must be at least 8 characters long, include an uppercase letter, a lowercase letter, and a number.\"",
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "src.controller.authController",
        "description": "src.controller.authController",
        "peekOfCode": "def logout(user_id: int, db: Session = Depends(get_session)):\n    token = db.query(TokenTable).filter(TokenTable.user_id == user_id, TokenTable.status == True).first()\n    if token is None:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Token not found or already logged out\"\n        )\n    # Invalidar el token\n    token.status = False\n    db.commit()",
        "detail": "src.controller.authController",
        "documentation": {}
    },
    {
        "label": "get_cities_data",
        "kind": 2,
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "peekOfCode": "def get_cities_data():\n    try:\n        with open(JSON_FILE_PATH, 'r', encoding='utf-8') as file:\n            data = json.load(file)\n        return data\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error al cargar los datos: {e}\")\n# Función para filtrar departamentos basándose en un patrón exacto de letras en orden y consecutivas\ndef filter_departments(query: str):\n    data = get_cities_data()",
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "filter_departments",
        "kind": 2,
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "peekOfCode": "def filter_departments(query: str):\n    data = get_cities_data()\n    # Usar una expresión regular que asegure que las letras estén juntas y en orden\n    pattern = re.compile(f\"^{re.escape(query)}\", re.IGNORECASE)\n    filtered_departments = [\n        {\"id\": dept[\"id\"], \"departamento\": dept[\"departamento\"]}\n        for dept in data\n        if pattern.search(dept[\"departamento\"])\n    ]\n    return filtered_departments",
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "filter_cities_by_department",
        "kind": 2,
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "peekOfCode": "def filter_cities_by_department(department_id: int, query: str):\n    data = get_cities_data()\n    pattern = re.compile(f\"^{re.escape(query)}\", re.IGNORECASE)\n    for department in data:\n        if department[\"id\"] == department_id:\n            filtered_cities = [\n                city for city in department[\"ciudades\"] if pattern.search(city)\n            ]\n            return {\"id\": department[\"id\"], \"departamento\": department[\"departamento\"], \"ciudades\": filtered_cities}\n    return {\"error\": \"Departamento no encontrado\"}",
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "JSON_FILE_PATH",
        "kind": 5,
        "importPath": "src.controller.cities_Controller",
        "description": "src.controller.cities_Controller",
        "peekOfCode": "JSON_FILE_PATH = os.path.join(os.path.dirname(__file__), '../data/cities.json')\n# Cargar los datos del archivo JSON\ndef get_cities_data():\n    try:\n        with open(JSON_FILE_PATH, 'r', encoding='utf-8') as file:\n            data = json.load(file)\n        return data\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error al cargar los datos: {e}\")\n# Función para filtrar departamentos basándose en un patrón exacto de letras en orden y consecutivas",
        "detail": "src.controller.cities_Controller",
        "documentation": {}
    },
    {
        "label": "create_cost",
        "kind": 2,
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "peekOfCode": "def create_cost(db: Session, cost_data: CostsCreate):\n    cost = Costs(**cost_data.dict())\n    db.add(cost)\n    db.commit()\n    db.refresh(cost)\n    return cost\ndef get_costs_by_cultivo(db: Session, cultivo_id: int):\n    return db.query(Costs).filter(Costs.cultivo_id == cultivo_id).all()\ndef get_cost_by_id(db: Session, cost_id: int):\n    return db.query(Costs).filter(Costs.id == cost_id).first()",
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "get_costs_by_cultivo",
        "kind": 2,
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "peekOfCode": "def get_costs_by_cultivo(db: Session, cultivo_id: int):\n    return db.query(Costs).filter(Costs.cultivo_id == cultivo_id).all()\ndef get_cost_by_id(db: Session, cost_id: int):\n    return db.query(Costs).filter(Costs.id == cost_id).first()\ndef update_cost(db: Session, cost_id: int, cost_data: CostsUpdate):\n    cost = db.query(Costs).filter(Costs.id == cost_id).first()\n    if not cost:\n        return None\n    for key, value in cost_data.dict(exclude_unset=True).items():\n        setattr(cost, key, value)",
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "get_cost_by_id",
        "kind": 2,
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "peekOfCode": "def get_cost_by_id(db: Session, cost_id: int):\n    return db.query(Costs).filter(Costs.id == cost_id).first()\ndef update_cost(db: Session, cost_id: int, cost_data: CostsUpdate):\n    cost = db.query(Costs).filter(Costs.id == cost_id).first()\n    if not cost:\n        return None\n    for key, value in cost_data.dict(exclude_unset=True).items():\n        setattr(cost, key, value)\n    db.commit()\n    db.refresh(cost)",
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "update_cost",
        "kind": 2,
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "peekOfCode": "def update_cost(db: Session, cost_id: int, cost_data: CostsUpdate):\n    cost = db.query(Costs).filter(Costs.id == cost_id).first()\n    if not cost:\n        return None\n    for key, value in cost_data.dict(exclude_unset=True).items():\n        setattr(cost, key, value)\n    db.commit()\n    db.refresh(cost)\n    return cost\ndef delete_cost(db: Session, cost_id: int):",
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "delete_cost",
        "kind": 2,
        "importPath": "src.controller.costsController",
        "description": "src.controller.costsController",
        "peekOfCode": "def delete_cost(db: Session, cost_id: int):\n    cost = db.query(Costs).filter(Costs.id == cost_id).first()\n    if not cost:\n        return None\n    db.delete(cost)\n    db.commit()\n    return cost",
        "detail": "src.controller.costsController",
        "documentation": {}
    },
    {
        "label": "generate_slug",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def generate_slug(name: str) -> str:\n    return name.lower().replace(\" \", \"-\")\ndef createCrop(crop: CropCreate, db: Session):\n    try:\n        slug = generate_slug(crop.cropName)\n        db_crop = Crop(\n            cropName=crop.cropName,\n            varietyId=crop.varietyId,\n            plotId=crop.plotId,\n            plantingDate=crop.plantingDate,",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "createCrop",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def createCrop(crop: CropCreate, db: Session):\n    try:\n        slug = generate_slug(crop.cropName)\n        db_crop = Crop(\n            cropName=crop.cropName,\n            varietyId=crop.varietyId,\n            plotId=crop.plotId,\n            plantingDate=crop.plantingDate,\n            estimatedHarvestDate=crop.estimatedHarvestDate,\n            slug=slug  # Asigna el slug generado desde el backend",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCrop",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def getCrop(cropId: int, db: Session):\n    try:\n        # Cargar el cultivo con su variedad asociada\n        crop = (\n            db.query(Crop)\n            .options(joinedload(Crop.variety))\n            .filter(Crop.id == cropId)\n            .first()\n        )\n        if not crop:",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getAllCrops",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def getAllCrops(db: Session):\n    try:\n        # Cargar todos los cultivos con su variedad asociada\n        crops = db.query(Crop).options(joinedload(Crop.variety)).all()\n        return [\n            {\n                \"id\": crop.id,\n                \"cropName\": crop.cropName,\n                \"varietyId\": crop.variety.id if crop.variety else None,\n                \"varietyName\": crop.variety.nombre if crop.variety else None,",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropsByLand",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def getCropsByLand(land_id: int, db: Session):\n    try:\n        # Obtener los cultivos asociados al lote (land_id) con sus relaciones\n        crops = (\n            db.query(Crop)\n            .options(joinedload(Crop.variety))\n            .filter(Crop.plotId == land_id)\n            .all()\n        )\n        return [",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "updateCrop",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def updateCrop(cropId: int, cropUpdate: CropUpdate, db: Session):\n    try:\n        crop = db.query(Crop).filter(Crop.id == cropId).first()\n        if not crop:\n            raise HTTPException(status_code=404, detail=\"Crop not found\")\n        for key, value in cropUpdate.dict(exclude_unset=True).items():\n            setattr(crop, key, value)\n        db.commit()\n        db.refresh(crop)\n        return crop",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "deleteCrop",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def deleteCrop(cropId: int, db: Session):\n    try:\n        crop = db.query(Crop).filter(Crop.id == cropId).first()\n        if not crop:\n            raise HTTPException(status_code=404, detail=\"Crop not found\")\n        db.delete(crop)\n        db.commit()\n        return {\"message\": \"Crop deleted successfully\"}\n    except Exception as e:\n        print(f\"Error al eliminar el cultivo: {e}\")",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "getCropInfo",
        "kind": 2,
        "importPath": "src.controller.cropController",
        "description": "src.controller.cropController",
        "peekOfCode": "def getCropInfo(finca_slug: str, lote_slug: str, cultivo_slug: str, db: Session):\n    try:\n        # Buscar la finca por slug\n        finca = db.query(Farm).filter(Farm.slug == finca_slug).first()\n        if not finca:\n            raise HTTPException(status_code=404, detail=\"Finca not found\")\n        # Buscar el lote por slug y finca\n        lote = db.query(Land).filter(Land.slug == lote_slug, Land.finca_id == finca.id).first()\n        if not lote:\n            raise HTTPException(status_code=404, detail=\"Lote not found\")",
        "detail": "src.controller.cropController",
        "documentation": {}
    },
    {
        "label": "generateCropCycle",
        "kind": 2,
        "importPath": "src.controller.cropCycleController",
        "description": "src.controller.cropCycleController",
        "peekOfCode": "def generateCropCycle(sowingDate):\n    try:\n        stages = []\n        currentDate = sowingDate\n        for stage, days in CYCLE_STAGES.items():\n            stageEnd = currentDate + timedelta(days=days)\n            stages.append({\n                \"stage\": stage,\n                \"startDate\": currentDate,\n                \"endDate\": stageEnd",
        "detail": "src.controller.cropCycleController",
        "documentation": {}
    },
    {
        "label": "CYCLE_STAGES",
        "kind": 5,
        "importPath": "src.controller.cropCycleController",
        "description": "src.controller.cropCycleController",
        "peekOfCode": "CYCLE_STAGES = {\n    \"emergence\": 10,\n    \"tillering\": 20,\n    \"panicleInitiation\": 30,\n    \"flowering\": 40,\n    \"ripening\": 50\n}\ndef generateCropCycle(sowingDate):\n    try:\n        stages = []",
        "detail": "src.controller.cropCycleController",
        "documentation": {}
    },
    {
        "label": "get_cultural_works_by_crop",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def get_cultural_works_by_crop(db: Session, cultivo_id: int):\n    tasks = db.query(Task).options(\n        joinedload(Task.labor_cultural),\n        joinedload(Task.maquinaria_agricola),\n        joinedload(Task.usuario)\n    ).filter(Task.cultivo_id == cultivo_id).all()\n    return _build_cultural_work_list(tasks)\ndef get_total_cultural_works_value(db: Session, cultivo_id: int):\n    \"\"\"\n    Calcula el valor total de todas las actividades culturales relacionadas con un cultivo.",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "get_total_cultural_works_value",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def get_total_cultural_works_value(db: Session, cultivo_id: int):\n    \"\"\"\n    Calcula el valor total de todas las actividades culturales relacionadas con un cultivo.\n    \"\"\"\n    tasks = db.query(Task).filter(Task.cultivo_id == cultivo_id).all()\n    # Usar directamente el valor de precio_labor_cultural\n    total_value_sum = sum(\n        Decimal(task.precio_labor_cultural or 0) for task in tasks\n    )\n    return {\"total_value\": total_value_sum}",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_activity",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def filter_by_activity(cultivo_id: int, activity_name: str, db: Session):\n    tasks = db.query(Task).options(\n        joinedload(Task.labor_cultural)\n    ).filter(\n        Task.cultivo_id == cultivo_id,\n        Task.labor_cultural.has(func.lower(Task.labor_cultural.property.mapper.class_.nombre).like(f\"%{activity_name.lower()}%\"))\n    ).all()\n    return _build_cultural_work_list(tasks)\ndef filter_by_machinery(cultivo_id: int, machinery_name: str, db: Session):\n    tasks = db.query(Task).options(",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_machinery",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def filter_by_machinery(cultivo_id: int, machinery_name: str, db: Session):\n    tasks = db.query(Task).options(\n        joinedload(Task.maquinaria_agricola)\n    ).filter(\n        Task.cultivo_id == cultivo_id,\n        Task.maquinaria_agricola.has(func.lower(Task.maquinaria_agricola.property.mapper.class_.name).like(f\"%{machinery_name.lower()}%\"))\n    ).all()\n    return _build_cultural_work_list(tasks)\ndef filter_by_operator(cultivo_id: int, operator_name: str, db: Session):\n    tasks = db.query(Task).options(",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_operator",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def filter_by_operator(cultivo_id: int, operator_name: str, db: Session):\n    tasks = db.query(Task).options(\n        joinedload(Task.usuario)\n    ).filter(\n        Task.cultivo_id == cultivo_id,\n        Task.usuario.has(func.lower(Task.usuario.property.mapper.class_.nombre).like(f\"%{operator_name.lower()}%\"))\n    ).all()\n    return _build_cultural_work_list(tasks)\ndef filter_by_date_range(cultivo_id: int, start_date: datetime, end_date: datetime, db: Session):\n    tasks = db.query(Task).options(",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "filter_by_date_range",
        "kind": 2,
        "importPath": "src.controller.culturalWorkController",
        "description": "src.controller.culturalWorkController",
        "peekOfCode": "def filter_by_date_range(cultivo_id: int, start_date: datetime, end_date: datetime, db: Session):\n    tasks = db.query(Task).options(\n        joinedload(Task.labor_cultural),\n        joinedload(Task.maquinaria_agricola),\n        joinedload(Task.usuario)\n    ).filter(\n        Task.cultivo_id == cultivo_id,\n        and_(\n            Task.fecha_realizacion >= start_date,\n            Task.fecha_realizacion <= end_date",
        "detail": "src.controller.culturalWorkController",
        "documentation": {}
    },
    {
        "label": "create_diagnostic",
        "kind": 2,
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "peekOfCode": "def create_diagnostic(db: Session, diagnostic: DiagnosticCreate):\n    db_diagnostic = Diagnostic(**diagnostic.dict())\n    db.add(db_diagnostic)\n    db.commit()\n    db.refresh(db_diagnostic)\n    return db_diagnostic\ndef get_diagnostics(db: Session):\n    return db.query(Diagnostic).all()\ndef get_diagnostic(db: Session, diagnostic_id: int):\n    diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()",
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "get_diagnostics",
        "kind": 2,
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "peekOfCode": "def get_diagnostics(db: Session):\n    return db.query(Diagnostic).all()\ndef get_diagnostic(db: Session, diagnostic_id: int):\n    diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado\")\n    return diagnostic\ndef update_diagnostic(db: Session, diagnostic_id: int, diagnostic: DiagnosticCreate):\n    db_diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if db_diagnostic is None:",
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "get_diagnostic",
        "kind": 2,
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "peekOfCode": "def get_diagnostic(db: Session, diagnostic_id: int):\n    diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado\")\n    return diagnostic\ndef update_diagnostic(db: Session, diagnostic_id: int, diagnostic: DiagnosticCreate):\n    db_diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if db_diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado\")\n    for key, value in diagnostic.dict().items():",
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "update_diagnostic",
        "kind": 2,
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "peekOfCode": "def update_diagnostic(db: Session, diagnostic_id: int, diagnostic: DiagnosticCreate):\n    db_diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if db_diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado\")\n    for key, value in diagnostic.dict().items():\n        setattr(db_diagnostic, key, value)\n    db.commit()\n    db.refresh(db_diagnostic)\n    return db_diagnostic\ndef delete_diagnostic(db: Session, diagnostic_id: int):",
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "delete_diagnostic",
        "kind": 2,
        "importPath": "src.controller.diagnosticController",
        "description": "src.controller.diagnosticController",
        "peekOfCode": "def delete_diagnostic(db: Session, diagnostic_id: int):\n    diagnostic = db.query(Diagnostic).filter(Diagnostic.id == diagnostic_id).first()\n    if diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado\")\n    db.delete(diagnostic)\n    db.commit()\n    return {\"detail\": \"Diagnóstico eliminado exitosamente\"}",
        "detail": "src.controller.diagnosticController",
        "documentation": {}
    },
    {
        "label": "createFarm",
        "kind": 2,
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "peekOfCode": "def createFarm(farm: FarmSchema, session: Session = Depends(get_session)):\n    print(f\"Datos recibidos: {farm}\")\n    # Validación de los campos de texto\n    if not farm.nombre.strip():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Farm name cannot be empty or only spaces.\")\n    # Verificar si ubicacion no es None antes de usar .strip()\n    if farm.ubicacion and not farm.ubicacion.strip():  # Si ubicacion existe y es vacía o tiene solo espacios\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Location cannot be empty or only spaces.\")\n    # Validación del largo de nombre y ubicación\n    if len(farm.nombre) > 50:",
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getAllFarms",
        "kind": 2,
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "peekOfCode": "def getAllFarms(session: Session = Depends(get_session)):\n    farms = session.query(Farm).all()\n    farms_list = [\n        {\n            \"id\": farm.id,\n            \"nombre\": farm.nombre,\n            \"ubicacion\": farm.ubicacion if farm.ubicacion else \"\",\n            \"area_total\": farm.area_total if farm.area_total is not None else 0.0,\n            \"latitud\": farm.latitud,\n            \"longitud\": farm.longitud,",
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "getFarmById",
        "kind": 2,
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "peekOfCode": "def getFarmById(farm_id: int, session: Session = Depends(get_session)):\n    farm = session.query(Farm).filter(Farm.id == farm_id).first()\n    if not farm:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Finca con id {farm_id} no encontrada\"\n        )\n    return farm\ndef updateFarm(farm_id: int, farm_data: UpdateFarmSchema, session: Session = Depends(get_session)):\n    # Validación de los campos de texto",
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "updateFarm",
        "kind": 2,
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "peekOfCode": "def updateFarm(farm_id: int, farm_data: UpdateFarmSchema, session: Session = Depends(get_session)):\n    # Validación de los campos de texto\n    if farm_data.ubicacion is not None:\n        if not farm_data.ubicacion.replace(\" \", \"\").isalpha():\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Location must only contain letters and spaces.\")\n    if farm_data.nombre is not None:\n        farm_data.nombre = farm_data.nombre.strip()\n        if len(farm_data.nombre) == 0:\n            farm_data.nombre = None\n        if farm_data.nombre is not None and len(farm_data.nombre) > 50:",
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "deleteFarm",
        "kind": 2,
        "importPath": "src.controller.farmCrontroller",
        "description": "src.controller.farmCrontroller",
        "peekOfCode": "def deleteFarm(farm_id: int, session: Session = Depends(get_session)):\n    farm = session.query(Farm).filter(Farm.id == farm_id).first()\n    if not farm:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Finca con id {farm_id} no encontrada\"\n        )\n    session.delete(farm)\n    session.commit()\n    return {\"msg\": \"Finca eliminada satisfactoriamente\"}",
        "detail": "src.controller.farmCrontroller",
        "documentation": {}
    },
    {
        "label": "get_crops_by_farm_id",
        "kind": 2,
        "importPath": "src.controller.farmCropController",
        "description": "src.controller.farmCropController",
        "peekOfCode": "def get_crops_by_farm_id(farm_id: int, db: Session):\n    crops = (\n        db.query(Crop)\n        .join(Land, Crop.plotId == Land.id)  # Cambia `plotId` si es necesario\n        .filter(Land.finca_id == farm_id)  # Cambia `finca_id` al nombre correcto si es diferente\n        .all()\n    )\n    return crops",
        "detail": "src.controller.farmCropController",
        "documentation": {}
    },
    {
        "label": "get_lots_by_farm",
        "kind": 2,
        "importPath": "src.controller.farmLotController",
        "description": "src.controller.farmLotController",
        "peekOfCode": "def get_lots_by_farm(farm_id: int, db: Session = Depends(get_db)):\n    lots = db.query(Land).filter(Land.finca_id == farm_id).all()\n    if not lots:\n        raise HTTPException(status_code=404, detail=\"No lots found for the given farm ID\")\n    return lots",
        "detail": "src.controller.farmLotController",
        "documentation": {}
    },
    {
        "label": "calculate_total_additional_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def calculate_total_additional_costs(db: Session):\n    total_training_cost = db.query(func.sum(AdditionalCosts.costo_capacitacion_real)).scalar() or 0\n    total_rodent_control_cost = db.query(func.sum(AdditionalCosts.costo_control_roedores_real)).scalar() or 0\n    return total_training_cost + total_rodent_control_cost\ndef calculate_total_financial_expenses(db: Session):\n    total_tax_cost = db.query(func.sum(FinancialExpenses.costo_impuestos_real)).scalar() or 0\n    total_insurance_cost = db.query(func.sum(FinancialExpenses.costo_seguros_real)).scalar() or 0\n    return total_tax_cost + total_insurance_cost\ndef get_real_labor_costs(db: Session):\n    return db.query(",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_financial_expenses",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def calculate_total_financial_expenses(db: Session):\n    total_tax_cost = db.query(func.sum(FinancialExpenses.costo_impuestos_real)).scalar() or 0\n    total_insurance_cost = db.query(func.sum(FinancialExpenses.costo_seguros_real)).scalar() or 0\n    return total_tax_cost + total_insurance_cost\ndef get_real_labor_costs(db: Session):\n    return db.query(\n        LaborCultural.nombre.label(\"nombre\"),\n        func.sum(Task.tiempo_hora * LaborCultural.precio_hora_real).label(\"costo_total\"),\n        func.sum(Task.tiempo_hora).label(\"total_horas\")\n    ).join(Task, Task.labor_cultural_id == LaborCultural.id)\\",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_labor_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_real_labor_costs(db: Session):\n    return db.query(\n        LaborCultural.nombre.label(\"nombre\"),\n        func.sum(Task.tiempo_hora * LaborCultural.precio_hora_real).label(\"costo_total\"),\n        func.sum(Task.tiempo_hora).label(\"total_horas\")\n    ).join(Task, Task.labor_cultural_id == LaborCultural.id)\\\n    .filter(LaborCultural.precio_hora_real.isnot(None))\\\n    .group_by(LaborCultural.nombre)\\\n    .all()\ndef get_real_machinery_costs(db: Session):",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_machinery_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_real_machinery_costs(db: Session):\n    return db.query(\n        Machinery.name.label(\"nombre\"),\n        func.sum(Task.tiempo_hora * Machinery.costPerHour).label(\"costo_total\"),\n        func.sum(Task.tiempo_hora).label(\"total_horas\")\n    ).join(Task, Task.maquinaria_agricola_id == Machinery.id)\\\n    .group_by(Machinery.name)\\\n    .all()\ndef get_real_agricultural_input_costs(db: Session):\n    return db.query(",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_real_agricultural_input_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_real_agricultural_input_costs(db: Session):\n    return db.query(\n        AgriculturalInput.nombre.label(\"nombre\"),\n        func.sum(AgriculturalInput.cantidad * AgriculturalInput.costo_unitario).label(\"costo_total\"),\n        func.sum(AgriculturalInput.cantidad).label(\"total_cantidad\")\n    ).group_by(AgriculturalInput.nombre).all()\n# Funciones de costos estimados\ndef calculate_total_estimated_additional_costs(db: Session):\n    total_training_cost = db.query(func.sum(AdditionalCosts.costo_capacitacion_estimado)).scalar() or 0\n    total_rodent_control_cost = db.query(func.sum(AdditionalCosts.costo_control_roedores_estimado)).scalar() or 0",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_estimated_additional_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def calculate_total_estimated_additional_costs(db: Session):\n    total_training_cost = db.query(func.sum(AdditionalCosts.costo_capacitacion_estimado)).scalar() or 0\n    total_rodent_control_cost = db.query(func.sum(AdditionalCosts.costo_control_roedores_estimado)).scalar() or 0\n    return total_training_cost + total_rodent_control_cost\ndef calculate_total_estimated_financial_expenses(db: Session):\n    total_tax_cost = db.query(func.sum(FinancialExpenses.costo_impuestos_estimado)).scalar() or 0\n    total_insurance_cost = db.query(func.sum(FinancialExpenses.costo_seguros_estimado)).scalar() or 0\n    return total_tax_cost + total_insurance_cost\ndef get_estimated_labor_costs(db: Session):\n    return db.query(",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "calculate_total_estimated_financial_expenses",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def calculate_total_estimated_financial_expenses(db: Session):\n    total_tax_cost = db.query(func.sum(FinancialExpenses.costo_impuestos_estimado)).scalar() or 0\n    total_insurance_cost = db.query(func.sum(FinancialExpenses.costo_seguros_estimado)).scalar() or 0\n    return total_tax_cost + total_insurance_cost\ndef get_estimated_labor_costs(db: Session):\n    return db.query(\n        LaborCultural.nombre.label(\"nombre\"),\n        func.sum(func.coalesce(LaborCultural.precio_hora_estimado, 0)).label(\"costo_total\"),\n        func.sum(func.coalesce(Task.tiempo_hora, 0)).label(\"total_horas\")  # Asegurar que total_horas no sea None\n    ).join(Task, Task.labor_cultural_id == LaborCultural.id)\\",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_labor_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_estimated_labor_costs(db: Session):\n    return db.query(\n        LaborCultural.nombre.label(\"nombre\"),\n        func.sum(func.coalesce(LaborCultural.precio_hora_estimado, 0)).label(\"costo_total\"),\n        func.sum(func.coalesce(Task.tiempo_hora, 0)).label(\"total_horas\")  # Asegurar que total_horas no sea None\n    ).join(Task, Task.labor_cultural_id == LaborCultural.id)\\\n    .group_by(LaborCultural.nombre).all()\ndef get_estimated_machinery_costs_from_controller(db: Session):\n    return db.query(\n        Machinery.name.label(\"nombre\"),",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_machinery_costs_from_controller",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_estimated_machinery_costs_from_controller(db: Session):\n    return db.query(\n        Machinery.name.label(\"nombre\"),\n        func.coalesce(func.sum(Machinery.estimatedCostPerHour), 0).label(\"costo_total\"),  # Usamos COALESCE para evitar None\n        func.coalesce(func.sum(Machinery.estimatedCostPerHour), 0).label(\"total_horas\")  # Aseguramos que total_horas no sea None\n    ).group_by(Machinery.name).all()\ndef get_estimated_agricultural_input_costs(db: Session):\n    return db.query(\n        AgriculturalInput.nombre.label(\"nombre\"),\n        func.coalesce(func.sum(AgriculturalInput.cantidad * AgriculturalInput.precio_unitario_estimado), 0).label(\"costo_total\"),",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_estimated_agricultural_input_costs",
        "kind": 2,
        "importPath": "src.controller.financialController",
        "description": "src.controller.financialController",
        "peekOfCode": "def get_estimated_agricultural_input_costs(db: Session):\n    return db.query(\n        AgriculturalInput.nombre.label(\"nombre\"),\n        func.coalesce(func.sum(AgriculturalInput.cantidad * AgriculturalInput.precio_unitario_estimado), 0).label(\"costo_total\"),\n        func.coalesce(func.sum(AgriculturalInput.cantidad), 0).label(\"total_cantidad\")\n    ).group_by(AgriculturalInput.nombre).all()",
        "detail": "src.controller.financialController",
        "documentation": {}
    },
    {
        "label": "get_all_harvests_by_crop",
        "kind": 2,
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "peekOfCode": "def get_all_harvests_by_crop(db: Session, cultivo_id: int):\n    # Obtener la información del cultivo\n    crop = db.query(Crop.id, Crop.cropName).filter(Crop.id == cultivo_id).first()\n    if not crop:\n        raise ValueError(f\"Crop with ID {cultivo_id} does not exist.\")\n    # Obtener el listado de cosechas\n    harvests = (\n        db.query(\n            Harvest.id,\n            Harvest.cultivo_id,",
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "get_harvest",
        "kind": 2,
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "peekOfCode": "def get_harvest(db: Session, cultivo_id: int, cosecha_id: int):\n    harvest = (\n        db.query(\n            Harvest.id,\n            Harvest.cultivo_id,\n            Harvest.fecha_estimada_cosecha,\n            Harvest.fecha_cosecha,\n            Harvest.precio_carga_mercado,\n            Harvest.gasto_transporte_cosecha,\n            Harvest.gasto_recoleccion,",
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "create_harvest",
        "kind": 2,
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "peekOfCode": "def create_harvest(db: Session, harvest_data):\n    # Validar que el cultivo exista\n    cultivo = db.query(Crop).filter(Crop.id == harvest_data[\"cultivo_id\"]).first()\n    if not cultivo:\n        raise ValueError(f\"Crop with ID {harvest_data['cultivo_id']} does not exist.\")\n    # Crear la nueva cosecha\n    new_harvest = Harvest(**harvest_data)\n    db.add(new_harvest)\n    db.commit()\n    db.refresh(new_harvest)",
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "update_harvest",
        "kind": 2,
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "peekOfCode": "def update_harvest(db: Session, cultivo_id: int, cosecha_id: int, update_data: dict):\n    # Buscar la cosecha por cultivo_id y cosecha_id\n    harvest = db.query(Harvest).filter(Harvest.cultivo_id == cultivo_id, Harvest.id == cosecha_id).first()\n    if not harvest:\n        raise HTTPException(status_code=404, detail=f\"Harvest with ID {cosecha_id} not found for crop ID {cultivo_id}.\")\n    # Validar si el cultivo_id se quiere cambiar\n    new_cultivo_id = update_data.get(\"cultivo_id\")\n    if new_cultivo_id and new_cultivo_id != cultivo_id:\n        crop_exists = db.query(Crop).filter(Crop.id == new_cultivo_id).first()\n        if not crop_exists:",
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "delete_harvest",
        "kind": 2,
        "importPath": "src.controller.harvestController",
        "description": "src.controller.harvestController",
        "peekOfCode": "def delete_harvest(db: Session, cultivo_id: int, cosecha_id: int):\n    # Validar que la cosecha exista\n    harvest = db.query(Harvest).filter(Harvest.cultivo_id == cultivo_id, Harvest.id == cosecha_id).first()\n    if not harvest:\n        raise ValueError(f\"Harvest with ID {cosecha_id} not found for crop ID {cultivo_id}.\")\n    # Eliminar la instancia de Harvest\n    db.delete(harvest)\n    db.commit()\n    return {\"message\": \"Harvest deleted successfully\"}",
        "detail": "src.controller.harvestController",
        "documentation": {}
    },
    {
        "label": "create_labor_cultural",
        "kind": 2,
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "peekOfCode": "def create_labor_cultural(labor_data: LaborCulturalCreate, db: Session):\n    try:\n        labor = LaborCultural(**labor_data.dict())\n        db.add(labor)\n        db.commit()\n        db.refresh(labor)\n        return labor\n    except SQLAlchemyError as e:\n        db.rollback()\n        raise HTTPException(status_code=500, detail=f\"Error al crear la labor cultural: {str(e)}\")",
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "get_labores_culturales",
        "kind": 2,
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "peekOfCode": "def get_labores_culturales(db: Session):\n    try:\n        return db.query(LaborCultural).all()\n    except SQLAlchemyError as e:\n        raise HTTPException(status_code=500, detail=f\"Error al obtener las labores culturales: {str(e)}\")\n# Obtener una labor cultural por ID\ndef get_labor_cultural_by_id(labor_id: int, db: Session):\n    return _get_labor_cultural_or_404(labor_id, db)\n# Actualizar una labor cultural existente\ndef update_labor_cultural(labor_id: int, labor_data: LaborCulturalUpdate, db: Session):",
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "get_labor_cultural_by_id",
        "kind": 2,
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "peekOfCode": "def get_labor_cultural_by_id(labor_id: int, db: Session):\n    return _get_labor_cultural_or_404(labor_id, db)\n# Actualizar una labor cultural existente\ndef update_labor_cultural(labor_id: int, labor_data: LaborCulturalUpdate, db: Session):\n    try:\n        labor = _get_labor_cultural_or_404(labor_id, db)\n        for key, value in labor_data.dict(exclude_unset=True).items():\n            setattr(labor, key, value)\n        db.commit()\n        db.refresh(labor)",
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "update_labor_cultural",
        "kind": 2,
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "peekOfCode": "def update_labor_cultural(labor_id: int, labor_data: LaborCulturalUpdate, db: Session):\n    try:\n        labor = _get_labor_cultural_or_404(labor_id, db)\n        for key, value in labor_data.dict(exclude_unset=True).items():\n            setattr(labor, key, value)\n        db.commit()\n        db.refresh(labor)\n        return labor\n    except SQLAlchemyError as e:\n        db.rollback()",
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "delete_labor_cultural",
        "kind": 2,
        "importPath": "src.controller.laborCulturalController",
        "description": "src.controller.laborCulturalController",
        "peekOfCode": "def delete_labor_cultural(labor_id: int, db: Session):\n    try:\n        labor = _get_labor_cultural_or_404(labor_id, db)\n        db.delete(labor)\n        db.commit()\n        return {\"message\": f\"Labor cultural con ID {labor_id} eliminada con éxito\"}\n    except SQLAlchemyError as e:\n        db.rollback()\n        raise HTTPException(status_code=500, detail=f\"Error al eliminar la labor cultural: {str(e)}\")",
        "detail": "src.controller.laborCulturalController",
        "documentation": {}
    },
    {
        "label": "generate_slug",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def generate_slug(name: str) -> str:\n    return name.lower().replace(\" \", \"-\")\n# Crear lote (Land) con slug\ndef createLand(land: LandSchema, session: Session = Depends(get_session)):\n    slug = generate_slug(land.nombre)\n    newLand = Land(\n        nombre=land.nombre,\n        finca_id=land.finca_id,\n        area=land.area,\n        latitud=land.latitud,",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "createLand",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def createLand(land: LandSchema, session: Session = Depends(get_session)):\n    slug = generate_slug(land.nombre)\n    newLand = Land(\n        nombre=land.nombre,\n        finca_id=land.finca_id,\n        area=land.area,\n        latitud=land.latitud,\n        longitud=land.longitud,\n        slug=slug\n    )",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getAllLands",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def getAllLands(session: Session = Depends(get_session)):\n    lands = session.query(Land).all()\n    return lands\n# Obtener un lote por su ID, incluyendo el nombre de la finca\ndef getLandById(land_id: int, session: Session = Depends(get_session)):\n    land = session.query(Land).filter(Land.id == land_id).first()\n    if not land:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Lote con id {land_id} no encontrado\"",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getLandById",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def getLandById(land_id: int, session: Session = Depends(get_session)):\n    land = session.query(Land).filter(Land.id == land_id).first()\n    if not land:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Lote con id {land_id} no encontrado\"\n        )\n    finca_name = land.finca.nombre if land.finca else \"Finca desconocida\"\n    return {\n        \"id\": land.id,",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "updateLand",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def updateLand(land_id: int, land_data: UpdateLandSchema, session: Session = Depends(get_session)):\n    land = session.query(Land).filter(Land.id == land_id).first()\n    if not land:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Lote con id {land_id} no encontrado\"\n        )\n    update_data = land_data.dict(exclude_unset=True)\n    for key, value in update_data.items():\n        setattr(land, key, value)",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "deleteLand",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def deleteLand(land_id: int, session: Session = Depends(get_session)):\n    land = session.query(Land).filter(Land.id == land_id).first()\n    if not land:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Lote con id {land_id} no encontrado\"\n        )\n    session.delete(land)\n    session.commit()\n    return {\"msg\": \"Lote eliminado satisfactoriamente\"}",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_total_rent",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def calculate_total_rent(plot_id: int, session: Session):\n    land = session.query(Land).filter(Land.id == plot_id).first()\n    if not land:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"El lote especificado no existe.\"\n        )\n    cultivo = session.query(Crop).filter(Crop.plotId == plot_id).first()\n    if not cultivo:\n        raise HTTPException(",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_machinery_and_labor_costs",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def calculate_machinery_and_labor_costs(plot_id: int, session: Session):\n    tasks = session.query(Task).filter(Task.cultivo_id == plot_id).all()\n    total_machinery_cost = 0.0\n    total_labor_cost = 0.0\n    for task in tasks:\n        if task.maquinaria_agricola_id:\n            maquinaria = session.query(Machinery).filter(Machinery.id == task.maquinaria_agricola_id).first()\n            if maquinaria:\n                total_machinery_cost += maquinaria.costPerHour * task.tiempo_hora\n        if task.labor_cultural_id:",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "calculate_agricultural_input_costs",
        "kind": 2,
        "importPath": "src.controller.landController",
        "description": "src.controller.landController",
        "peekOfCode": "def calculate_agricultural_input_costs(plot_id: int, session: Session):\n    cultivos = session.query(Crop).filter(Crop.plotId == plot_id).all()\n    total_input_cost = 0\n    for cultivo in cultivos:\n        agricultural_inputs = session.query(AgriculturalInput).filter(AgriculturalInput.cultivo_id == cultivo.id).all()\n        for input in agricultural_inputs:\n            total_input_cost += input.costo_unitario * input.cantidad\n    return {\"total_input_cost\": total_input_cost}",
        "detail": "src.controller.landController",
        "documentation": {}
    },
    {
        "label": "getCropsByLandId",
        "kind": 2,
        "importPath": "src.controller.landCropController",
        "description": "src.controller.landCropController",
        "peekOfCode": "def getCropsByLandId(landId: int, db: Session):\n    crops = db.query(Crop).filter(Crop.plotId == landId).all()\n    return crops",
        "detail": "src.controller.landCropController",
        "documentation": {}
    },
    {
        "label": "create_machinery",
        "kind": 2,
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "peekOfCode": "def create_machinery(machinery: MaquinariaAgricolaCreate, db: Session):\n    # Verificar si ya existe una maquinaria con el mismo nombre\n    existing_machinery = db.query(Machinery).filter(Machinery.name == machinery.name).first()\n    if existing_machinery:\n        raise HTTPException(status_code=400, detail=\"Ya existe una maquinaria con el mismo nombre\")\n    # Crear la nueva maquinaria si no existe\n    db_machinery = Machinery(**machinery.dict())\n    db.add(db_machinery)\n    db.commit()\n    db.refresh(db_machinery)",
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "get_machinery",
        "kind": 2,
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "peekOfCode": "def get_machinery(machinery_id: int, db: Session):\n    machinery = db.query(Machinery).filter(Machinery.id == machinery_id).first()\n    if not machinery:\n        raise HTTPException(status_code=404, detail=\"Maquinaria no encontrada\")\n    return machinery\n# Obtener todas las maquinarias\ndef get_all_machineries(db: Session):\n    machineries = db.query(Machinery).all()\n    if not machineries:\n        raise HTTPException(status_code=404, detail=\"No se encontraron maquinarias\")",
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "get_all_machineries",
        "kind": 2,
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "peekOfCode": "def get_all_machineries(db: Session):\n    machineries = db.query(Machinery).all()\n    if not machineries:\n        raise HTTPException(status_code=404, detail=\"No se encontraron maquinarias\")\n    return machineries\n# Actualizar una maquinaria por ID\ndef update_machinery(machinery_id: int, machinery: MaquinariaAgricolaUpdate, db: Session):\n    db_machinery = db.query(Machinery).filter(Machinery.id == machinery_id).first()\n    if not db_machinery:\n        raise HTTPException(status_code=404, detail=\"Maquinaria no encontrada\")",
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "update_machinery",
        "kind": 2,
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "peekOfCode": "def update_machinery(machinery_id: int, machinery: MaquinariaAgricolaUpdate, db: Session):\n    db_machinery = db.query(Machinery).filter(Machinery.id == machinery_id).first()\n    if not db_machinery:\n        raise HTTPException(status_code=404, detail=\"Maquinaria no encontrada\")\n    # Verificar si el nuevo nombre ya está en uso por otra maquinaria\n    if machinery.name:\n        existing_machinery = db.query(Machinery).filter(Machinery.name == machinery.name, Machinery.id != machinery_id).first()\n        if existing_machinery:\n            raise HTTPException(status_code=400, detail=\"Ya existe una maquinaria con el mismo nombre\")\n    # Actualizar solo los campos que se hayan proporcionado",
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "delete_machinery",
        "kind": 2,
        "importPath": "src.controller.machineryController",
        "description": "src.controller.machineryController",
        "peekOfCode": "def delete_machinery(machinery_id: int, db: Session):\n    db_machinery = db.query(Machinery).filter(Machinery.id == machinery_id).first()\n    if not db_machinery:\n        raise HTTPException(status_code=404, detail=\"Maquinaria no encontrada\")\n    db.delete(db_machinery)\n    db.commit()\n    return {\"message\": \"Maquinaria eliminada correctamente\"}",
        "detail": "src.controller.machineryController",
        "documentation": {}
    },
    {
        "label": "create_monitoring",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def create_monitoring(db: Session, monitoring: MonitoringCreate):\n    if monitoring.variedad_arroz_etapa_fenologica_id is not None:\n        # Verificar si el ID de la variedad de arroz existe en la tabla VarietyRiceStageModel\n        if not db.query(VarietyRiceStageModel).filter(\n            VarietyRiceStageModel.id == monitoring.variedad_arroz_etapa_fenologica_id\n        ).first():\n            raise HTTPException(status_code=400, detail=\"ID de variedad de arroz no válida\")\n    db_monitoring = Monitoring(**monitoring.dict())\n    db.add(db_monitoring)\n    db.commit()",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitoring",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def get_monitoring(db: Session, monitoring_id: int):\n    db_monitoring = db.query(Monitoring).filter(Monitoring.id == monitoring_id).first()\n    if db_monitoring is None:\n        raise HTTPException(status_code=404, detail=\"Monitoreo no encontrado\")\n    return db_monitoring\ndef get_monitorings(db: Session, skip: int = 0, limit: int = 10):\n    # Consulta los monitoreos junto con el nombre de la etapa fenológica\n    monitorings = (\n        db.query(Monitoring, PhenologicalStage.nombre.label(\"etapaNombre\"))\n        .join(PhenologicalStage, Monitoring.variedad_arroz_etapa_fenologica_id == PhenologicalStage.id, isouter=True)",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitorings",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def get_monitorings(db: Session, skip: int = 0, limit: int = 10):\n    # Consulta los monitoreos junto con el nombre de la etapa fenológica\n    monitorings = (\n        db.query(Monitoring, PhenologicalStage.nombre.label(\"etapaNombre\"))\n        .join(PhenologicalStage, Monitoring.variedad_arroz_etapa_fenologica_id == PhenologicalStage.id, isouter=True)\n        .offset(skip)\n        .limit(limit)\n        .all()\n    )\n    # Retorna los resultados directamente usando el esquema MonitoringOut",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "update_monitoring",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def update_monitoring(db: Session, monitoring_id: int, monitoring: MonitoringUpdate):\n    # Verificar si el monitoreo existe\n    db_monitoring = db.query(Monitoring).filter(Monitoring.id == monitoring_id).first()\n    if db_monitoring is None:\n        raise HTTPException(status_code=404, detail=\"Monitoreo no encontrado\")\n    # Actualizar solo los campos enviados en la solicitud\n    for key, value in monitoring.dict(exclude_unset=True).items():\n        setattr(db_monitoring, key, value)\n    db.commit()\n    db.refresh(db_monitoring)",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "finalize_monitoring",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def finalize_monitoring(db: Session, monitoring_id: int, monitoring: MonitoringUpdate):\n    # Verificar si el monitoreo existe\n    db_monitoring = db.query(Monitoring).filter(Monitoring.id == monitoring_id).first()\n    if db_monitoring is None:\n        raise HTTPException(status_code=404, detail=\"Monitoreo no encontrado\")\n    # Verificar que el monitoreo esté en estado pendiente\n    if db_monitoring.estado != 1:\n        raise HTTPException(status_code=400, detail=\"El monitoreo ya está finalizado o no puede ser modificado\")\n    # Verificar que se haya proporcionado `fecha_finalizacion`\n    if not monitoring.fecha_finalizacion:",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "delete_monitoring",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def delete_monitoring(db: Session, monitoring_id: int):\n    db_monitoring = db.query(Monitoring).filter(Monitoring.id == monitoring_id).first()\n    if db_monitoring is None:\n        raise HTTPException(status_code=404, detail=\"Monitoreo no encontrado\")\n    db.delete(db_monitoring)\n    db.commit()\n    return {\"message\": \"Monitoreo eliminado correctamente\"}\ndef get_monitorings_by_crop(db: Session, crop_id: int):\n    # Verifica si el cultivo existe\n    if not db.query(Crop).filter(Crop.id == crop_id).first():",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "get_monitorings_by_crop",
        "kind": 2,
        "importPath": "src.controller.monitoringController",
        "description": "src.controller.monitoringController",
        "peekOfCode": "def get_monitorings_by_crop(db: Session, crop_id: int):\n    # Verifica si el cultivo existe\n    if not db.query(Crop).filter(Crop.id == crop_id).first():\n        raise HTTPException(status_code=404, detail=\"Cultivo no encontrado\")\n    # Consulta con join para obtener el nombre de la etapa fenológica\n    monitorings = (\n        db.query(\n            Monitoring,\n            PhenologicalStage.nombre.label(\"etapaNombre\")\n        )",
        "detail": "src.controller.monitoringController",
        "documentation": {}
    },
    {
        "label": "create_op_mech",
        "kind": 2,
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "peekOfCode": "def create_op_mech(operation: OpMechCreate, db: Session):\n    # Verificar si ya existe una operación con el mismo taskId\n    existing_operation = db.query(OpMech).filter(OpMech.taskId == operation.taskId).first()\n    if existing_operation:\n        # Lanzar una excepción si ya existe una operación con el mismo taskId\n        raise HTTPException(status_code=400, detail=\"Ya existe una operación mecanización con el mismo taskId\")\n    # Si no existe, crear la nueva operación\n    db_operation = OpMech(\n        taskId=operation.taskId,\n        mechanizationName=operation.mechanizationName,",
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "get_op_mech_by_id",
        "kind": 2,
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "peekOfCode": "def get_op_mech_by_id(op_mech_id: int, db: Session):\n    return db.query(OpMech).options(joinedload(OpMech.machinery)).filter(OpMech.id == op_mech_id).first()\n# Obtener todas las operaciones mecanización, incluyendo la información de la maquinaria\ndef get_all_op_mechs(db: Session):\n    # Utiliza joinedload para cargar la relación con la maquinaria\n    return db.query(OpMech).options(joinedload(OpMech.machinery)).all()\n# Actualizar una operación mecanización por ID\ndef update_op_mech(op_mech_id: int, operation: OpMechUpdate, db: Session):\n    # Verificar si existe otra operación con el mismo taskId\n    existing_operation = db.query(OpMech).filter(OpMech.taskId == operation.taskId, OpMech.id != op_mech_id).first()",
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "get_all_op_mechs",
        "kind": 2,
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "peekOfCode": "def get_all_op_mechs(db: Session):\n    # Utiliza joinedload para cargar la relación con la maquinaria\n    return db.query(OpMech).options(joinedload(OpMech.machinery)).all()\n# Actualizar una operación mecanización por ID\ndef update_op_mech(op_mech_id: int, operation: OpMechUpdate, db: Session):\n    # Verificar si existe otra operación con el mismo taskId\n    existing_operation = db.query(OpMech).filter(OpMech.taskId == operation.taskId, OpMech.id != op_mech_id).first()\n    if existing_operation:\n        raise HTTPException(status_code=400, detail=\"Ya existe otra operación mecanización con el mismo taskId\")\n    db_operation = db.query(OpMech).filter(OpMech.id == op_mech_id).first()",
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "update_op_mech",
        "kind": 2,
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "peekOfCode": "def update_op_mech(op_mech_id: int, operation: OpMechUpdate, db: Session):\n    # Verificar si existe otra operación con el mismo taskId\n    existing_operation = db.query(OpMech).filter(OpMech.taskId == operation.taskId, OpMech.id != op_mech_id).first()\n    if existing_operation:\n        raise HTTPException(status_code=400, detail=\"Ya existe otra operación mecanización con el mismo taskId\")\n    db_operation = db.query(OpMech).filter(OpMech.id == op_mech_id).first()\n    if db_operation:\n        db_operation.taskId = operation.taskId\n        db_operation.mechanizationName = operation.mechanizationName\n        db_operation.machineryId = operation.machineryId",
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "delete_op_mech",
        "kind": 2,
        "importPath": "src.controller.opMechController",
        "description": "src.controller.opMechController",
        "peekOfCode": "def delete_op_mech(op_mech_id: int, db: Session):\n    db_operation = db.query(OpMech).filter(OpMech.id == op_mech_id).first()\n    if not db_operation:\n        raise HTTPException(status_code=404, detail=\"Operación mecanización no encontrada\")\n    db.delete(db_operation)\n    db.commit()\n    return {\"message\": \"Operación mecanización eliminada correctamente\"}",
        "detail": "src.controller.opMechController",
        "documentation": {}
    },
    {
        "label": "changePassword",
        "kind": 2,
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "peekOfCode": "def changePassword(request: ChangePassword, db: Session = Depends(get_session)):\n    user = db.query(User).filter(User.email == request.email).first()\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"User not found\")\n    if not verify_password(request.old_password, user.password):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid old password\")\n    encryptedPassword = get_hashed_password(request.new_password)\n    user.password = encryptedPassword\n    user.primer_login = False\n    db.commit()",
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "requestPasswordReset",
        "kind": 2,
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "peekOfCode": "def requestPasswordReset(request: PasswordResetRequest, db: Session = Depends(get_session)):\n    user = db.query(User).filter(User.email == request.email).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User with this email does not exist\")\n    # Generar un token de restablecimiento de contraseña asociado al user_id\n    token = generate_password_reset_token(user.id)\n    # Crear un registro de restablecimiento de contraseña\n    password_reset = PasswordReset(email=user.email, token=token)\n    db.add(password_reset)\n    db.commit()",
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "updatePassword",
        "kind": 2,
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "peekOfCode": "def updatePassword(token: str, password_data: PasswordUpdate, db: Session = Depends(get_session)):\n    # Verificar si el token es válido\n    token_data = verify_password_reset_token(token)\n    if not token_data:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid or expired token\")\n    # Buscar al usuario asociado al token\n    user = db.query(User).filter(User.id == token_data[\"user_id\"]).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    # Actualizar la contraseña del usuario",
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "showResetPasswordPage",
        "kind": 2,
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "peekOfCode": "def showResetPasswordPage(token: str):\n    # Verificar si el token es válido\n    token_data = verify_password_reset_token(token)\n    if not token_data:\n        # Si el token es inválido o ha expirado, redirigir al login\n        return RedirectResponse(url=\"/login\")\n    # Si el token es válido, redirigir al frontend donde está implementado ResetPasswordForm\n    reset_link = f\"{FRONTEND_URL}/Reset_Password/{token}\"\n    return RedirectResponse(url=reset_link)",
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "FRONTEND_URL",
        "kind": 5,
        "importPath": "src.controller.passwordResetController",
        "description": "src.controller.passwordResetController",
        "peekOfCode": "FRONTEND_URL = os.getenv(\"ALLOW_ORIGINS\")\ndef changePassword(request: ChangePassword, db: Session = Depends(get_session)):\n    user = db.query(User).filter(User.email == request.email).first()\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"User not found\")\n    if not verify_password(request.old_password, user.password):\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid old password\")\n    encryptedPassword = get_hashed_password(request.new_password)\n    user.password = encryptedPassword\n    user.primer_login = False",
        "detail": "src.controller.passwordResetController",
        "documentation": {}
    },
    {
        "label": "get_all_permissions",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def get_all_permissions(db: Session):\n    permissions = db.query(Permission).order_by(Permission.id).all()  \n    permissions_list = [{\"id\": permission.id, \"nombre\": permission.nombre, \"descripcion\": permission.descripcion} for permission in permissions]\n    return {\"permissions\": permissions_list}\ndef createPermission(permission: CreatePermission, session: Session = Depends(get_session)):\n    newPermission = permissionModel.Permission(nombre=permission.name, descripcion=permission.description)\n    session.add(newPermission)\n    session.commit()\n    session.refresh(newPermission)\n    return {",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "createPermission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def createPermission(permission: CreatePermission, session: Session = Depends(get_session)):\n    newPermission = permissionModel.Permission(nombre=permission.name, descripcion=permission.description)\n    session.add(newPermission)\n    session.commit()\n    session.refresh(newPermission)\n    return {\n        \"id\": newPermission.id,\n        \"name\": newPermission.nombre,\n        \"description\": newPermission.descripcion,\n    }",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "getPermission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def getPermission(permission_id: int, session: Session = Depends(get_session)):\n    permission = session.query(permissionModel.Permission).filter(permissionModel.Permission.id == permission_id).first()\n    if permission is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Permission not found\")\n    # Convertir manualmente el objeto a un diccionario compatible con el esquema\n    return {\n        \"id\": permission.id,\n        \"name\": permission.nombre,\n        \"description\": permission.descripcion,\n    }",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "updatePermission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def updatePermission(permission_id: int, permission_update: UpdatePermission, session: Session = Depends(get_session)):\n    permission = session.query(permissionModel.Permission).filter(permissionModel.Permission.id == permission_id).first()\n    if permission is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Permission not found\")\n    if permission_update.name:\n        permission.nombre = permission_update.name\n    if permission_update.description:\n        permission.descripcion = permission_update.description\n    session.commit()\n    session.refresh(permission)",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "deletePermission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def deletePermission(permission_id: int, session: Session = Depends(get_session)):\n    permission = session.query(permissionModel.Permission).filter(permissionModel.Permission.id == permission_id).first()\n    if permission is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Permission not found\")\n    session.delete(permission)\n    session.commit()\n    return {\"message\": \"Permission deleted successfully\"}\ndef getPermission(permission_id: int, session: Session = Depends(get_session)):\n    permission = session.query(permissionModel.Permission).filter(permissionModel.Permission.id == permission_id).first()\n    if permission is None:",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "getPermission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def getPermission(permission_id: int, session: Session = Depends(get_session)):\n    permission = session.query(permissionModel.Permission).filter(permissionModel.Permission.id == permission_id).first()\n    if permission is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Permission not found\")\n    return permission  # FastAPI se encargará de la serialización\ndef check_permission(user_id: int, permission_name: str, db: Session):\n    user_roles = db.query(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not user_roles:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "check_permission",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def check_permission(user_id: int, permission_name: str, db: Session):\n    user_roles = db.query(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not user_roles:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"User does not have any roles\"\n        )\n    for user_role in user_roles:\n        role = db.query(Rol).filter(Rol.id == user_role.rol_id).first()\n        if not role:",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "remove_permission_from_role",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def remove_permission_from_role(role_id: int, permission_id: int, session: Session = Depends(get_session)):\n    role = session.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")\n    permission = session.query(Permission).filter(Permission.id == permission_id).first()\n    if not permission:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Permission not found\")\n    role_permission = session.query(RolPermiso).filter(\n        RolPermiso.rol_id == role.id, RolPermiso.permiso_id == permission.id\n    ).first()",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "add_permission_to_role",
        "kind": 2,
        "importPath": "src.controller.permissionController",
        "description": "src.controller.permissionController",
        "peekOfCode": "def add_permission_to_role(role_id: int, permission_id: int, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    permission = db.query(Permission).filter(Permission.id == permission_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    if not permission:\n        raise HTTPException(status_code=404, detail=\"Permission not found\")\n    # Verifica si el permiso ya está asignado al rol\n    if permission in role.permissions:\n        raise HTTPException(status_code=400, detail=\"Permission already assigned to role\")",
        "detail": "src.controller.permissionController",
        "documentation": {}
    },
    {
        "label": "get_all_phenological_stages",
        "kind": 2,
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "peekOfCode": "def get_all_phenological_stages(session: Session):\n    return session.query(PhenologicalStage).all()\ndef get_phenological_stage(stage_id: int, session: Session):\n    stage = session.query(PhenologicalStage).filter(PhenologicalStage.id == stage_id).first()\n    if not stage:\n        raise HTTPException(status_code=404, detail=\"Phenological Stage not found\")\n    return stage\ndef create_phenological_stage(stage_data: PhenologicalStageCreate, session: Session):\n    new_stage = PhenologicalStage(**stage_data.dict())\n    session.add(new_stage)",
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "get_phenological_stage",
        "kind": 2,
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "peekOfCode": "def get_phenological_stage(stage_id: int, session: Session):\n    stage = session.query(PhenologicalStage).filter(PhenologicalStage.id == stage_id).first()\n    if not stage:\n        raise HTTPException(status_code=404, detail=\"Phenological Stage not found\")\n    return stage\ndef create_phenological_stage(stage_data: PhenologicalStageCreate, session: Session):\n    new_stage = PhenologicalStage(**stage_data.dict())\n    session.add(new_stage)\n    session.commit()\n    session.refresh(new_stage)",
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "create_phenological_stage",
        "kind": 2,
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "peekOfCode": "def create_phenological_stage(stage_data: PhenologicalStageCreate, session: Session):\n    new_stage = PhenologicalStage(**stage_data.dict())\n    session.add(new_stage)\n    session.commit()\n    session.refresh(new_stage)\n    return new_stage\ndef update_phenological_stage(stage_id: int, stage_data: PhenologicalStageUpdate, session: Session):\n    stage = get_phenological_stage(stage_id, session)\n    for key, value in stage_data.dict().items():\n        setattr(stage, key, value)",
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "update_phenological_stage",
        "kind": 2,
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "peekOfCode": "def update_phenological_stage(stage_id: int, stage_data: PhenologicalStageUpdate, session: Session):\n    stage = get_phenological_stage(stage_id, session)\n    for key, value in stage_data.dict().items():\n        setattr(stage, key, value)\n    session.commit()\n    session.refresh(stage)\n    return stage\ndef delete_phenological_stage(stage_id: int, session: Session):\n    stage = get_phenological_stage(stage_id, session)\n    session.delete(stage)",
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "delete_phenological_stage",
        "kind": 2,
        "importPath": "src.controller.phenologicalStageController",
        "description": "src.controller.phenologicalStageController",
        "peekOfCode": "def delete_phenological_stage(stage_id: int, session: Session):\n    stage = get_phenological_stage(stage_id, session)\n    session.delete(stage)\n    session.commit()\n    return {\"message\": \"Phenological Stage deleted\"}",
        "detail": "src.controller.phenologicalStageController",
        "documentation": {}
    },
    {
        "label": "get_inputs_by_crop",
        "kind": 2,
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "peekOfCode": "def get_inputs_by_crop(cultivo_id: int, session: Session = Depends(get_session)) -> List[AgriculturalInputWithTipoSchema]:\n    \"\"\"\n    Obtiene todos los insumos agrícolas relacionados con un cultivo.\n    \"\"\"\n    tasks_with_inputs = session.query(Task).options(\n        joinedload(Task.insumo_agricola).joinedload(AgriculturalInput.tipo_insumo)\n    ).filter(Task.cultivo_id == cultivo_id).all()\n    result = []\n    for task in tasks_with_inputs:\n        if task.insumo_agricola:",
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "get_total_input_cost_by_crop",
        "kind": 2,
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "peekOfCode": "def get_total_input_cost_by_crop(cultivo_id: int, session: Session = Depends(get_session)) -> Dict[str, float]:\n    \"\"\"\n    Calcula el costo total de todos los insumos agrícolas relacionados con un cultivo.\n    \"\"\"\n    tasks_with_inputs = session.query(Task).options(\n        joinedload(Task.insumo_agricola)\n    ).filter(Task.cultivo_id == cultivo_id).all()\n    total_cost = 0\n    for task in tasks_with_inputs:\n        if task.insumo_agricola:",
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "get_inputs_by_crop_and_partial_name",
        "kind": 2,
        "importPath": "src.controller.preciosinsumoController",
        "description": "src.controller.preciosinsumoController",
        "peekOfCode": "def get_inputs_by_crop_and_partial_name(\n    cultivo_id: int, concepto: str, session: Session = Depends(get_session)\n) -> List[AgriculturalInputWithTipoSchema]:\n    \"\"\"\n    Obtiene los insumos agrícolas relacionados con un cultivo filtrados por un concepto parcial.\n    \"\"\"\n    # Normalizar el concepto\n    concepto = concepto.strip().lower()\n    tasks_with_inputs = session.query(Task).options(\n        joinedload(Task.insumo_agricola).joinedload(AgriculturalInput.tipo_insumo)",
        "detail": "src.controller.preciosinsumoController",
        "documentation": {}
    },
    {
        "label": "predict_image",
        "kind": 2,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "def predict_image(image_data: bytes, cultivo_id: int):\n    # Convertir los bytes de la imagen a formato PIL y transformar\n    image = Image.open(io.BytesIO(image_data)).convert(\"RGB\")\n    image = transform(image).unsqueeze(0).to(device)\n    # Realizar la predicción\n    with torch.no_grad():\n        output = model(image)\n        _, predicted = torch.max(output, 1)\n    predicted_class = classes[predicted.item()]\n    # Guardar la imagen en el servidor",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "get_diagnostics_by_cultivo",
        "kind": 2,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "def get_diagnostics_by_cultivo(db: Session, cultivo_id: int, start_date: datetime = None, end_date: datetime = None):\n    # Log para depuración\n    print(f\"cultivo_id: {cultivo_id}, start_date: {start_date}, end_date: {end_date}\")\n    query = db.query(DiagnosticoFitosanitario).filter(DiagnosticoFitosanitario.cultivo_id == cultivo_id)\n    if start_date:\n        if isinstance(start_date, str):\n            try:\n                start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n            except ValueError:\n                raise HTTPException(status_code=400, detail=\"Formato de fecha no válido para start_date\")",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "get_diagnostic_detail",
        "kind": 2,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "def get_diagnostic_detail(db: Session, diagnostic_id: int):\n    # Cargar la relación 'cultivo' para el detalle del diagnóstico\n    diagnostic = (\n        db.query(DiagnosticoFitosanitario)\n        .options(joinedload(DiagnosticoFitosanitario.cultivo))  # Carga la relación 'cultivo'\n        .filter(DiagnosticoFitosanitario.id == diagnostic_id)\n        .first()\n    )\n    if diagnostic is None:\n        raise HTTPException(status_code=404, detail=\"Diagnóstico no encontrado.\")",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "model_path = os.path.join(\"src\", \"models\", \"swin_transformer_v2.pth\")\n# Configuración del dispositivo\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# Cargar la ruta del modelo desde el archivo .env\n#model_path = os.getenv(\"SWIN_MODEL_PATH\")\n# Verificar si la ruta existe\nif not model_path or not os.path.exists(model_path):\n    raise FileNotFoundError(f\"El archivo del modelo no se encontró en la ruta: {model_path}\")\n# Cargar el modelo en memoria utilizando io.BytesIO\nwith open(model_path, \"rb\") as f:",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# Cargar la ruta del modelo desde el archivo .env\n#model_path = os.getenv(\"SWIN_MODEL_PATH\")\n# Verificar si la ruta existe\nif not model_path or not os.path.exists(model_path):\n    raise FileNotFoundError(f\"El archivo del modelo no se encontró en la ruta: {model_path}\")\n# Cargar el modelo en memoria utilizando io.BytesIO\nwith open(model_path, \"rb\") as f:\n    buffer = io.BytesIO(f.read())\n# Crear el modelo y cargar solo los pesos",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "#model_path",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "#model_path = os.getenv(\"SWIN_MODEL_PATH\")\n# Verificar si la ruta existe\nif not model_path or not os.path.exists(model_path):\n    raise FileNotFoundError(f\"El archivo del modelo no se encontró en la ruta: {model_path}\")\n# Cargar el modelo en memoria utilizando io.BytesIO\nwith open(model_path, \"rb\") as f:\n    buffer = io.BytesIO(f.read())\n# Crear el modelo y cargar solo los pesos\nmodel = create_model('swin_base_patch4_window7_224', pretrained=False, num_classes=10)\nmodel.load_state_dict(torch.load(buffer, map_location=device, weights_only=True))",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "model = create_model('swin_base_patch4_window7_224', pretrained=False, num_classes=10)\nmodel.load_state_dict(torch.load(buffer, map_location=device, weights_only=True))\nmodel = model.to(device)\nmodel.eval()\n# Lista de clases\nclasses = [\n    \"bacterial_leaf_blight\",\n    \"brown_spot\",\n    \"healthy\",\n    \"leaf_blast\",",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "model = model.to(device)\nmodel.eval()\n# Lista de clases\nclasses = [\n    \"bacterial_leaf_blight\",\n    \"brown_spot\",\n    \"healthy\",\n    \"leaf_blast\",\n    \"leaf_scald\",\n    \"narrow_brown_spot\",",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "classes = [\n    \"bacterial_leaf_blight\",\n    \"brown_spot\",\n    \"healthy\",\n    \"leaf_blast\",\n    \"leaf_scald\",\n    \"narrow_brown_spot\",\n    \"neck_blast\",\n    \"rice_hispa\",\n    \"sheath_blight\",",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "transform",
        "kind": 5,
        "importPath": "src.controller.predictionController",
        "description": "src.controller.predictionController",
        "peekOfCode": "transform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\ndef predict_image(image_data: bytes, cultivo_id: int):\n    # Convertir los bytes de la imagen a formato PIL y transformar\n    image = Image.open(io.BytesIO(image_data)).convert(\"RGB\")\n    image = transform(image).unsqueeze(0).to(device)\n    # Realizar la predicción",
        "detail": "src.controller.predictionController",
        "documentation": {}
    },
    {
        "label": "create_role",
        "kind": 2,
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "peekOfCode": "def create_role(role: RoleCreate, db: Session):\n    # Crear el nuevo rol\n    new_role = Rol(nombre=role.nombre, descripcion=role.descripcion)\n    db.add(new_role)\n    db.commit()\n    db.refresh(new_role)  \n    # Asociar permisos al rol en la tabla de relación rol-permiso\n    if role.permisos:  # Verificar si se proporcionaron permisos\n        for permiso_id in role.permisos:\n            role_permission = RolPermiso(rol_id=new_role.id, permiso_id=permiso_id)",
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_roles",
        "kind": 2,
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "peekOfCode": "def get_roles(db: Session):\n    roles = db.query(Rol).all()\n    return {\"message\": f\"{len(roles)} roles found\", \"roles\": roles}\n# Obtener un rol por ID\ndef get_role_by_id(role_id: int, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")\n    return {\"message\": \"Role found\", \"role\": Role.from_orm(role)}\n# Actualizar un rol por ID",
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "get_role_by_id",
        "kind": 2,
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "peekOfCode": "def get_role_by_id(role_id: int, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")\n    return {\"message\": \"Role found\", \"role\": Role.from_orm(role)}\n# Actualizar un rol por ID\ndef update_role(role_id: int, role_update: RoleUpdate, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")",
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "update_role",
        "kind": 2,
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "peekOfCode": "def update_role(role_id: int, role_update: RoleUpdate, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")\n    role.nombre = role_update.nombre if role_update.nombre is not None else role.nombre\n    role.descripcion = role_update.descripcion if role_update.descripcion is not None else role.descripcion\n    db.commit()\n    return {\"message\": \"Role updated successfully\"}\n# Eliminar un rol por ID\ndef delete_role(role_id: int, db: Session):",
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "delete_role",
        "kind": 2,
        "importPath": "src.controller.roleController",
        "description": "src.controller.roleController",
        "peekOfCode": "def delete_role(role_id: int, db: Session):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Role not found\")\n    db.delete(role)\n    db.commit()\n    return {\"message\": \"Role deleted successfully\"}",
        "detail": "src.controller.roleController",
        "documentation": {}
    },
    {
        "label": "create_soil_analysis",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def create_soil_analysis(\n    soil_data: SoilAnalysisCreate,\n    db: Session,\n    archivo_reporte: UploadFile = None\n) -> SoilAnalysisSimpleOut:\n    # Validar que los campos obligatorios estén presentes\n    if soil_data.parametro_quimico and soil_data.parametro_quimico.ph is None:\n        raise HTTPException(status_code=400, detail=\"El campo 'ph' en 'parametro_quimico' es obligatorio.\")\n    # Validar que el lote especificado en la solicitud existe\n    lote_existente = db.query(Land).filter(Land.id == soil_data.lote_id).first()",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_analyses_by_lote",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def get_analyses_by_lote(lote_id: int, db: Session):\n    # Obtener el lote completo (id y nombre)\n    lote = db.query(Land).filter(Land.id == lote_id).first()\n    if not lote:\n        raise HTTPException(status_code=404, detail=\"El lote especificado no existe.\")\n    # Obtener todos los análisis del lote junto con el tipo de suelo y parámetros anidados\n    analyses = db.query(SoilAnalysisModel).options(\n        joinedload(SoilAnalysisModel.soil_type),\n        joinedload(SoilAnalysisModel.chemical_params)\n    ).filter(SoilAnalysisModel.lote_id == lote_id).all()",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_analysis_detail",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def get_analysis_detail(lote_id: int, analysis_id: int, db: Session): \n    analysis = db.query(SoilAnalysisModel).options(\n        joinedload(SoilAnalysisModel.soil_type),\n        joinedload(SoilAnalysisModel.lote),\n        joinedload(SoilAnalysisModel.biological_params),\n        joinedload(SoilAnalysisModel.chemical_params).joinedload(ChemicalParamModel.macronutrients),\n        joinedload(SoilAnalysisModel.chemical_params).joinedload(ChemicalParamModel.micronutrients),\n        joinedload(SoilAnalysisModel.physical_params).joinedload(PhysicalParamModel.texture),\n        joinedload(SoilAnalysisModel.physical_params).joinedload(PhysicalParamModel.color)\n    ).filter_by(id=analysis_id, lote_id=lote_id).first()",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "update_soil_analysis",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def update_soil_analysis(lote_id: int, analysis_id: int, soil_data: SoilAnalysisCreate, db: Session):\n    # Validar que el lote actual especificado en la solicitud existe\n    lote_existente = db.query(Land).filter(Land.id == lote_id).first()\n    if not lote_existente:\n        raise HTTPException(status_code=400, detail=\"El lote especificado para la actualización no existe.\")\n    # Validar que el nuevo lote especificado en soil_data existe si se proporciona un cambio de lote\n    if soil_data.lote_id is not None and soil_data.lote_id != lote_id:\n        nuevo_lote_existente = db.query(Land).filter(Land.id == soil_data.lote_id).first()\n        if not nuevo_lote_existente:\n            raise HTTPException(status_code=400, detail=\"El nuevo lote especificado no existe.\")",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "delete_soil_analysis",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def delete_soil_analysis(lote_id: int, analysis_id: int, db: Session):\n    # Buscar el análisis de suelo junto con sus relaciones dependientes\n    analysis = db.query(SoilAnalysisModel).options(\n        joinedload(SoilAnalysisModel.biological_params),\n        joinedload(SoilAnalysisModel.chemical_params),\n        joinedload(SoilAnalysisModel.physical_params)\n    ).filter_by(id=analysis_id, lote_id=lote_id).first()\n    if not analysis:\n        raise HTTPException(status_code=404, detail=\"Análisis no encontrado\")\n    # Eliminar registros dependientes",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_soil_types",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def get_soil_types(db: Session):\n    soil_types = db.query(SoilTypeModel).all()\n    print(\"Fetched soil types from database:\", soil_types)  # Log data\n    return soil_types\ndef get_textures(db: Session):\n    # Directly query the TextureModel table\n    textures = db.query(TextureModel).all()\n    print(\"Fetched textures:\", textures)\n    return textures\ndef get_colors(db: Session):",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_textures",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def get_textures(db: Session):\n    # Directly query the TextureModel table\n    textures = db.query(TextureModel).all()\n    print(\"Fetched textures:\", textures)\n    return textures\ndef get_colors(db: Session):\n    # Directly query the ColorModel table\n    colors = db.query(ColorModel).all()\n    print(\"Fetched colors:\", colors)\n    return colors",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_colors",
        "kind": 2,
        "importPath": "src.controller.soilAnalysisController",
        "description": "src.controller.soilAnalysisController",
        "peekOfCode": "def get_colors(db: Session):\n    # Directly query the ColorModel table\n    colors = db.query(ColorModel).all()\n    print(\"Fetched colors:\", colors)\n    return colors",
        "detail": "src.controller.soilAnalysisController",
        "documentation": {}
    },
    {
        "label": "get_all_tasks",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def get_all_tasks(db: Session):\n    \"\"\"\n    Obtiene todas las tareas sin cargar relaciones.\n    \"\"\"\n    return db.query(Task).all()\ndef get_task_by_id(db: Session, task_id: int):\n    \"\"\"\n    Obtiene una tarea por ID sin cargar relaciones.\n    \"\"\"\n    return db.query(Task).filter(Task.id == task_id).first()",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_task_by_id",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def get_task_by_id(db: Session, task_id: int):\n    \"\"\"\n    Obtiene una tarea por ID sin cargar relaciones.\n    \"\"\"\n    return db.query(Task).filter(Task.id == task_id).first()\ndef create_task(db: Session, task: TaskCreate):\n    \"\"\"\n    Crea una nueva tarea, incluyendo el nuevo campo precio_labor_cultural.\n    \"\"\"\n    db_task = Task(**task.dict())",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def create_task(db: Session, task: TaskCreate):\n    \"\"\"\n    Crea una nueva tarea, incluyendo el nuevo campo precio_labor_cultural.\n    \"\"\"\n    db_task = Task(**task.dict())\n    db.add(db_task)\n    db.commit()\n    db.refresh(db_task)\n    return db_task\ndef update_task(db: Session, task_id: int, task: TaskUpdate):",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def update_task(db: Session, task_id: int, task: TaskUpdate):\n    \"\"\"\n    Actualiza una tarea existente. Si el estado cambia a 3,\n    guarda la fecha y hora actual en el campo `fecha_realizacion`.\n    \"\"\"\n    db_task = get_task_by_id(db, task_id)\n    if db_task:\n        for key, value in task.dict(exclude_unset=True).items():\n            # Actualiza cada campo proporcionado\n            setattr(db_task, key, value)",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def delete_task(db: Session, task_id: int):\n    \"\"\"\n    Elimina una tarea por ID.\n    \"\"\"\n    db_task = get_task_by_id(db, task_id)\n    if db_task:\n        db.delete(db_task)\n        db.commit()\n    return db_task\ndef get_tasks_by_crop_id(db: Session, crop_id: int):",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_tasks_by_crop_id",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def get_tasks_by_crop_id(db: Session, crop_id: int):\n    \"\"\"\n    Obtiene todas las tareas relacionadas con un cultivo específico por su ID.\n    \"\"\"\n    return (\n        db.query(Task)\n        .filter(Task.cultivo_id == crop_id)\n        .options(joinedload(Task.labor_cultural))  # Carga la relación\n        .all()\n    )",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "update_task_state_and_date",
        "kind": 2,
        "importPath": "src.controller.taskController",
        "description": "src.controller.taskController",
        "peekOfCode": "def update_task_state_and_date(db: Session, task_id: int, new_state: int):\n    \"\"\"\n    Actualiza el estado de una tarea. Si el estado es 3, guarda la fecha y hora\n    actual en el campo `fecha_realizacion`.\n    \"\"\"\n    # Obtener la tarea\n    db_task = get_task_by_id(db, task_id)\n    if not db_task:\n        return {\"error\": \"Tarea no encontrada\"}\n    # Actualizar el estado",
        "detail": "src.controller.taskController",
        "documentation": {}
    },
    {
        "label": "get_total_costs",
        "kind": 2,
        "importPath": "src.controller.totalcostsController",
        "description": "src.controller.totalcostsController",
        "peekOfCode": "def get_total_costs(db: Session, cultivo_id: int):\n    \"\"\"\n    Obtiene:\n    1. Costos (concepto y precio) de gastos asociados al cultivo.\n    2. Precio total de insumos y labores culturales con conceptos \"quemados\".\n    \"\"\"\n    # Obtener costos de la tabla 'gastos'\n    costos = db.query(Costs).filter(Costs.cultivo_id == cultivo_id).all()\n    costos_data = [{\"concepto\": costo.concepto, \"total\": Decimal(costo.precio)} for costo in costos]\n    # Calcular el precio total de insumos",
        "detail": "src.controller.totalcostsController",
        "documentation": {}
    },
    {
        "label": "get_overall_total_cost",
        "kind": 2,
        "importPath": "src.controller.totalcostsController",
        "description": "src.controller.totalcostsController",
        "peekOfCode": "def get_overall_total_cost(db: Session, cultivo_id: int):\n    \"\"\"\n    Calcula el total general de costos de un cultivo, sumando:\n    1. Los costos de la tabla 'gastos'.\n    2. El costo total de insumos.\n    3. El costo total de labores culturales.\n    \"\"\"\n    # Obtener costos de la tabla 'gastos'\n    costos = db.query(Costs).filter(Costs.cultivo_id == cultivo_id).all()\n    total_gastos = sum(Decimal(costo.precio) for costo in costos)",
        "detail": "src.controller.totalcostsController",
        "documentation": {}
    },
    {
        "label": "registerUser",
        "kind": 2,
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "peekOfCode": "def registerUser(user: CrearUsuario, session: Session = Depends(get_session)):\n    # Validate that required fields are not empty or only spaces\n    if not user.nombre.strip():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Name cannot be empty or only spaces.\")\n    if not user.apellido.strip():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Last name cannot be empty or only spaces.\")\n    if not user.email.strip():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Email cannot be empty or only spaces.\")\n    if not user.password.strip():\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Password cannot be empty or only spaces.\")",
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "getUsers",
        "kind": 2,
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "peekOfCode": "def getUsers(db: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    users = db.query(User).all()\n    return users\ndef getUser(user_id: int, db: Session = Depends(get_session)):\n    user = db.query(userModel.User).filter(userModel.User.id == user_id).first()\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    return user\ndef updateUser(user_id: int, user_update: UpdateUser, db: Session = Depends(get_session)):\n    # Validate that 'nombre' and 'apellido' contain only letters and spaces",
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "getUser",
        "kind": 2,
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "peekOfCode": "def getUser(user_id: int, db: Session = Depends(get_session)):\n    user = db.query(userModel.User).filter(userModel.User.id == user_id).first()\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    return user\ndef updateUser(user_id: int, user_update: UpdateUser, db: Session = Depends(get_session)):\n    # Validate that 'nombre' and 'apellido' contain only letters and spaces\n    if user_update.nombre is not None:\n        if not user_update.nombre.replace(\" \", \"\").isalpha():\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Name must only contain letters and spaces.\")",
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "kind": 2,
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "peekOfCode": "def updateUser(user_id: int, user_update: UpdateUser, db: Session = Depends(get_session)):\n    # Validate that 'nombre' and 'apellido' contain only letters and spaces\n    if user_update.nombre is not None:\n        if not user_update.nombre.replace(\" \", \"\").isalpha():\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Name must only contain letters and spaces.\")\n    if user_update.apellido is not None:\n        if not user_update.apellido.replace(\" \", \"\").isalpha():\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Last name must only contain letters and spaces.\")\n    # Apply restrictions if user_update.nombre is provided\n    if user_update.nombre is not None:",
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "deleteUser",
        "kind": 2,
        "importPath": "src.controller.userController",
        "description": "src.controller.userController",
        "peekOfCode": "def deleteUser(user_id: int, db: Session = Depends(get_session)):\n    # Buscar el usuario en la base de datos\n    user = db.query(userModel.User).filter(userModel.User.id == user_id).first()\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    # Eliminar el usuario de la base de datos\n    db.delete(user)\n    db.commit()\n    return {\"message\": \"User deleted successfully\", \"status\": status.HTTP_200_OK}",
        "detail": "src.controller.userController",
        "documentation": {}
    },
    {
        "label": "create_user_farm",
        "kind": 2,
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "peekOfCode": "def create_user_farm(user_farm: UserFarmRoleCreate, db: Session):\n    new_user_farm = UserFarmRole(\n        usuario_id=user_farm.usuario_id, \n        finca_id=user_farm.finca_id, \n        # rol_id=user_farm.rol_id\n    )\n    db.add(new_user_farm)\n    db.commit()\n    db.refresh(new_user_farm)\n    return new_user_farm",
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "getUserFarmRolById",
        "kind": 2,
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "peekOfCode": "def getUserFarmRolById(user_id: int, session: Session):\n    farmUserRol = session.query(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).first()\n    if not farmUserRol:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No hay usuario con id {user_id}\"\n        )\n    return farmUserRol\n# Función para actualizar un registro UserFarmRole\ndef update_user_farm_role_by_id(user_id: int, updated_data: UserFarmRoleUpdate, session: Session):",
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "update_user_farm_role_by_id",
        "kind": 2,
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "peekOfCode": "def update_user_farm_role_by_id(user_id: int, updated_data: UserFarmRoleUpdate, session: Session):\n    farmUserRol = session.query(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).first()\n    if not farmUserRol:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No hay usuario con id {user_id}\"\n        )\n    # Actualizar los campos con la nueva información\n    # farmUserRol.rol_id = updated_data.rol_id\n    farmUserRol.finca_id = updated_data.finca_id",
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "get_all_user_farms",
        "kind": 2,
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "peekOfCode": "def get_all_user_farms(db: Session):\n    return db.query(UserFarmRole).all()\n# Función para eliminar un registro UserFarmRole\ndef delete_user_farm(usuario_id: int, finca_id: int, db: Session):\n    user_farm = db.query(UserFarmRole).filter(\n        UserFarmRole.usuario_id == usuario_id, \n        UserFarmRole.finca_id == finca_id\n    ).first()\n    if not user_farm:\n        return None",
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "delete_user_farm",
        "kind": 2,
        "importPath": "src.controller.userFarmController",
        "description": "src.controller.userFarmController",
        "peekOfCode": "def delete_user_farm(usuario_id: int, finca_id: int, db: Session):\n    user_farm = db.query(UserFarmRole).filter(\n        UserFarmRole.usuario_id == usuario_id, \n        UserFarmRole.finca_id == finca_id\n    ).first()\n    if not user_farm:\n        return None\n    db.delete(user_farm)\n    db.commit()\n    return True",
        "detail": "src.controller.userFarmController",
        "documentation": {}
    },
    {
        "label": "registerUserRole",
        "kind": 2,
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "peekOfCode": "def registerUserRole(user_role: CreateUserRole, db: Session):\n    new_user_role = UserRole(usuario_id=user_role.usuario_id, rol_id=user_role.rol_id)\n    db.add(new_user_role)\n    db.commit()\n    db.refresh(new_user_role)\n    return new_user_role\n# Check if a user is admin\ndef isUserAdmin(user_id: int, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if user_role and user_role.rol_id == 1:  # Assuming 1 is the admin role ID",
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "isUserAdmin",
        "kind": 2,
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "peekOfCode": "def isUserAdmin(user_id: int, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if user_role and user_role.rol_id == 1:  # Assuming 1 is the admin role ID\n        return {\"is_admin\": True}\n    elif user_role:\n        return {\"is_admin\": False}\n    else:\n        raise HTTPException(status_code=404, detail=\"User role not found\")\n# Get a user role by ID\ndef getUserRoleByUserId(user_id: int, db: Session):",
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "getUserRoleByUserId",
        "kind": 2,
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "peekOfCode": "def getUserRoleByUserId(user_id: int, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if not user_role:\n        return {\"error\": f\"User role with user_id {user_id} not found\"}, 404\n    return user_role\n# Update an existing user role\ndef updateUserRole(usuario_id: int, user_role_update: UpdateUserRole, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == usuario_id).first()\n    if not user_role:\n        raise HTTPException(status_code=404, detail=\"User role not found\")",
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "updateUserRole",
        "kind": 2,
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "peekOfCode": "def updateUserRole(usuario_id: int, user_role_update: UpdateUserRole, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == usuario_id).first()\n    if not user_role:\n        raise HTTPException(status_code=404, detail=\"User role not found\")\n    if user_role_update.rol_id is not None:\n        user_role.rol_id = user_role_update.rol_id\n    db.commit()\n    db.refresh(user_role)\n    return user_role\n# Delete a user role",
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "deleteUserRole",
        "kind": 2,
        "importPath": "src.controller.userRoleController",
        "description": "src.controller.userRoleController",
        "peekOfCode": "def deleteUserRole(rol_id: int, db: Session):\n    user_role = db.query(UserRole).filter(UserRole.id == rol_id).first()\n    if user_role:\n        db.delete(user_role)\n        db.commit()\n    return {\"message\": \"User role deleted successfully\"}",
        "detail": "src.controller.userRoleController",
        "documentation": {}
    },
    {
        "label": "create_variable_cost",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def create_variable_cost(db: Session, variable_cost: VariableCostsCreate):\n    db_variable_cost = VariableCost(\n        id_costos_adicionales=variable_cost.id_costos_adicionales,\n        id_agua=variable_cost.id_agua,\n        id_gastos_administrativos_financieros=variable_cost.id_gastos_administrativos_financieros,\n        descripcion=variable_cost.descripcion\n    )\n    db.add(db_variable_cost)\n    db.commit()\n    db.refresh(db_variable_cost)",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "get_variable_costs",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def get_variable_costs(db):\n    variable_costs = db.query(VariableCost).options(\n        joinedload(VariableCost.costos_adicionales),\n        joinedload(VariableCost.agua),\n        joinedload(VariableCost.gastos_administrativos_financieros)\n    ).all()\n    response = []\n    for variable_cost in variable_costs:\n        # Verificamos si las relaciones están presentes antes de acceder a ellas\n        costos_adicionales_nombre = variable_cost.costos_adicionales.costo_capacitacion_real if variable_cost.costos_adicionales else None",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "get_variable_costs_details",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def get_variable_costs_details(db: Session):\n    return db.query(VariableCost).all()\n# Obtener un solo gasto variable por ID\ndef get_variable_cost_by_id(db: Session, variable_cost_id: int):\n    return db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n# Actualizar un gasto variable\ndef update_variable_cost(db: Session, variable_cost_id: int, variable_cost: VariableCostsCreate):\n    db_variable_cost = db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n    if db_variable_cost:\n        db_variable_cost.id_costos_adicionales = variable_cost.id_costos_adicionales",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "get_variable_cost_by_id",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def get_variable_cost_by_id(db: Session, variable_cost_id: int):\n    return db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n# Actualizar un gasto variable\ndef update_variable_cost(db: Session, variable_cost_id: int, variable_cost: VariableCostsCreate):\n    db_variable_cost = db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n    if db_variable_cost:\n        db_variable_cost.id_costos_adicionales = variable_cost.id_costos_adicionales\n        db_variable_cost.id_agua = variable_cost.id_agua\n        db_variable_cost.id_gastos_administrativos_financieros = variable_cost.id_gastos_administrativos_financieros\n        db_variable_cost.descripcion = variable_cost.descripcion",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "update_variable_cost",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def update_variable_cost(db: Session, variable_cost_id: int, variable_cost: VariableCostsCreate):\n    db_variable_cost = db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n    if db_variable_cost:\n        db_variable_cost.id_costos_adicionales = variable_cost.id_costos_adicionales\n        db_variable_cost.id_agua = variable_cost.id_agua\n        db_variable_cost.id_gastos_administrativos_financieros = variable_cost.id_gastos_administrativos_financieros\n        db_variable_cost.descripcion = variable_cost.descripcion\n        db.commit()\n        db.refresh(db_variable_cost)\n    return db_variable_cost",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "delete_variable_cost",
        "kind": 2,
        "importPath": "src.controller.variableCostController",
        "description": "src.controller.variableCostController",
        "peekOfCode": "def delete_variable_cost(db: Session, variable_cost_id: int):\n    db_variable_cost = db.query(VariableCost).filter(VariableCost.id == variable_cost_id).first()\n    if db_variable_cost:\n        db.delete(db_variable_cost)\n        db.commit()\n    return db_variable_cost",
        "detail": "src.controller.variableCostController",
        "documentation": {}
    },
    {
        "label": "createVariety",
        "kind": 2,
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "peekOfCode": "def createVariety(varietyData: VarietyArrozCreate, db: Session):\n    try:\n        newVariety = VarietyArrozModel(**varietyData.dict())\n        db.add(newVariety)\n        db.commit()\n        db.refresh(newVariety)\n        return newVariety\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=\"Error creating variety: \" + str(e))\n# Obtener variedad de arroz por ID",
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "getVariety",
        "kind": 2,
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "peekOfCode": "def getVariety(varietyId: int, db: Session):\n    try:\n        variety = db.query(VarietyArrozModel).filter(VarietyArrozModel.id == varietyId).first()\n        if not variety:\n            raise HTTPException(status_code=404, detail=\"Variety not found\")\n        return variety\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=\"Error retrieving variety: \" + str(e))\n# Listar todas las variedades de arroz\ndef listVarieties(db: Session):",
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "listVarieties",
        "kind": 2,
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "peekOfCode": "def listVarieties(db: Session):\n    try:\n        varieties = db.query(VarietyArrozModel).all()\n        # Convertir el campo 'numero_registro_productor_ica' a string para cada variedad\n        for variety in varieties:\n            if variety.numero_registro_productor_ica is not None:\n                variety.numero_registro_productor_ica = str(variety.numero_registro_productor_ica)\n        return varieties\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=\"Error listing varieties: \" + str(e))",
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "updateVariety",
        "kind": 2,
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "peekOfCode": "def updateVariety(varietyId: int, updatedData: VarietyArrozCreate, db: Session):\n    try:\n        variety = db.query(VarietyArrozModel).filter(VarietyArrozModel.id == varietyId).first()\n        if not variety:\n            raise HTTPException(status_code=404, detail=\"Variety not found\")\n        for key, value in updatedData.dict().items():\n            setattr(variety, key, value)\n        db.commit()\n        db.refresh(variety)\n        return variety",
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "deleteVariety",
        "kind": 2,
        "importPath": "src.controller.varietyArrozController",
        "description": "src.controller.varietyArrozController",
        "peekOfCode": "def deleteVariety(varietyId: int, db: Session):\n    try:\n        variety = db.query(VarietyArrozModel).filter(VarietyArrozModel.id == varietyId).first()\n        if not variety:\n            raise HTTPException(status_code=404, detail=\"Variety not found\")\n        db.delete(variety)\n        db.commit()\n        return {\"message\": \"Variety deleted successfully\"}\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=\"Error deleting variety: \" + str(e))",
        "detail": "src.controller.varietyArrozController",
        "documentation": {}
    },
    {
        "label": "create_variety_rice_stage",
        "kind": 2,
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "peekOfCode": "def create_variety_rice_stage(stage: VarietyRiceStageCreate, db: Session):\n    new_stage = VarietyRiceStageModel(**stage.dict())\n    db.add(new_stage)\n    db.commit()\n    db.refresh(new_stage)\n    return new_stage\ndef get_variety_rice_stages(db: Session):\n    stages = db.query(VarietyRiceStageModel).options(\n        joinedload(VarietyRiceStageModel.variety),\n        joinedload(VarietyRiceStageModel.phenological_stage)",
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "get_variety_rice_stages",
        "kind": 2,
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "peekOfCode": "def get_variety_rice_stages(db: Session):\n    stages = db.query(VarietyRiceStageModel).options(\n        joinedload(VarietyRiceStageModel.variety),\n        joinedload(VarietyRiceStageModel.phenological_stage)\n    ).all()\n    # Convert SQLAlchemy instances to dictionaries\n    result = []\n    for stage in stages:\n        stage_data = {\n            \"id\": stage.id,",
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "get_variety_rice_stage_by_id",
        "kind": 2,
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "peekOfCode": "def get_variety_rice_stage_by_id(stage_id: int, db: Session):\n    return db.query(VarietyRiceStageModel).filter(VarietyRiceStageModel.id == stage_id).first()\ndef update_variety_rice_stage(stage_id: int, stage: VarietyRiceStageUpdate, db: Session):\n    db_stage = get_variety_rice_stage_by_id(stage_id, db)\n    if db_stage:\n        for key, value in stage.dict(exclude_unset=True).items():\n            setattr(db_stage, key, value)\n        db.commit()\n        db.refresh(db_stage)\n    return db_stage",
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "update_variety_rice_stage",
        "kind": 2,
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "peekOfCode": "def update_variety_rice_stage(stage_id: int, stage: VarietyRiceStageUpdate, db: Session):\n    db_stage = get_variety_rice_stage_by_id(stage_id, db)\n    if db_stage:\n        for key, value in stage.dict(exclude_unset=True).items():\n            setattr(db_stage, key, value)\n        db.commit()\n        db.refresh(db_stage)\n    return db_stage\ndef delete_variety_rice_stage(stage_id: int, db: Session):\n    db_stage = get_variety_rice_stage_by_id(stage_id, db)",
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "delete_variety_rice_stage",
        "kind": 2,
        "importPath": "src.controller.varietyRiceStageController",
        "description": "src.controller.varietyRiceStageController",
        "peekOfCode": "def delete_variety_rice_stage(stage_id: int, db: Session):\n    db_stage = get_variety_rice_stage_by_id(stage_id, db)\n    if db_stage:\n        db.delete(db_stage)\n        db.commit()\n    return db_stage",
        "detail": "src.controller.varietyRiceStageController",
        "documentation": {}
    },
    {
        "label": "createWeatherRecordFromAPI",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def createWeatherRecordFromAPI(db: Session, lote_id: int, latitud: float = None, longitud: float = None):\n    # Obtener el lote desde la base de datos\n    lote = db.query(Land).filter(Land.id == lote_id).first()\n    if not lote:\n        raise HTTPException(status_code=404, detail=\"Lote no encontrado\")\n     # Validar las coordenadas recibidas\n    if not latitud or not longitud:\n        raise HTTPException(status_code=500, detail=\"Latitud o longitud no proporcionadas\")\n    # Configuración de la solicitud a OpenWeather\n    api_key = os.getenv(\"OPENWEATHER_API_KEY\")",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherHistory",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def fetchWeatherHistory(db: Session, lote_id: int, start_date: str = None, end_date: str = None, fuente_datos: str = None):\n    # Si no se proporciona start_date, usar un año atrás desde la fecha actual\n    if not start_date:\n        start_date = (datetime.now() - timedelta(days=365)).date()\n    else:\n        start_date = datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    # Si no se proporciona end_date, usar la fecha de hoy\n    if not end_date:\n        end_date = datetime.now().date()\n    else:",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherRecordDetail",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def fetchWeatherRecordDetail(db: Session, id: int):\n    record = db.query(WeatherRecord).filter(WeatherRecord.id == id).first()\n    if not record:\n        raise HTTPException(status_code=404, detail=\"Registro no encontrado\")\n    return record\n# Función para crear un registro meteorológico manual\ndef createManualWeatherRecord(db: Session, record: WeatherRecordCreate, lote_id: int):\n    # Buscar el lote correspondiente a partir del lote_id\n    lote = db.query(Land).filter(Land.id == lote_id).first()\n    if not lote:",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "createManualWeatherRecord",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def createManualWeatherRecord(db: Session, record: WeatherRecordCreate, lote_id: int):\n    # Buscar el lote correspondiente a partir del lote_id\n    lote = db.query(Land).filter(Land.id == lote_id).first()\n    if not lote:\n        raise HTTPException(status_code=404, detail=\"Lote no encontrado\")\n    # Crear el registro meteorológico con la referencia al lote\n    dbRecord = WeatherRecord(\n        lote_id=lote_id,  # Asociamos el lote_id al registro\n        fecha=record.fecha,\n        hora=record.hora,",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "createWeatherRecord",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def createWeatherRecord(db: Session, record: WeatherRecordCreate):\n    dbRecord = WeatherRecord(**record.dict())\n    db.add(dbRecord)\n    db.commit()\n    db.refresh(dbRecord)\n    return dbRecord\n# Función para obtener un registro meteorológico específico por fecha y lote\ndef fetchWeatherRecord(db: Session, fecha: date, lote_id: int):\n    return db.query(WeatherRecord).filter(\n        WeatherRecord.fecha == fecha,",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "fetchWeatherRecord",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def fetchWeatherRecord(db: Session, fecha: date, lote_id: int):\n    return db.query(WeatherRecord).filter(\n        WeatherRecord.fecha == fecha,\n        WeatherRecord.lote_id == lote_id\n    ).first()\n# Función para generar recomendaciones meteorológicas basadas en registros de un lote\ndef getWeatherRecommendations(db: Session, lote_id: int):\n    # Obtener todos los registros meteorológicos del lote especificado\n    registros = db.query(WeatherRecord).filter(WeatherRecord.lote_id == lote_id).all()\n    if not registros:",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "getWeatherRecommendations",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def getWeatherRecommendations(db: Session, lote_id: int):\n    # Obtener todos los registros meteorológicos del lote especificado\n    registros = db.query(WeatherRecord).filter(WeatherRecord.lote_id == lote_id).all()\n    if not registros:\n        raise HTTPException(status_code=404, detail=\"No se encontraron registros para el lote especificado\")\n    # Ejemplo de análisis simple: calcular el promedio de temperatura\n    promedio_temperatura = sum(r.temperatura for r in registros) / len(registros)\n    # Generar recomendaciones basadas en el análisis\n    if promedio_temperatura > 30:\n        recomendacion = \"Riego adicional necesario debido a altas temperaturas.\"",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "updateWeatherRecord",
        "kind": 2,
        "importPath": "src.controller.weatherRecordController",
        "description": "src.controller.weatherRecordController",
        "peekOfCode": "def updateWeatherRecord(db: Session, record_id: int, record_data: WeatherRecordCreate):\n    existing_record = db.query(WeatherRecord).filter(WeatherRecord.id == record_id).first()\n    if not existing_record:\n        raise HTTPException(status_code=404, detail=\"Registro no encontrado\")\n    # Actualizar todos los campos del registro existente\n    for key, value in record_data.dict(exclude_unset=True).items():\n        setattr(existing_record, key, value)\n    db.commit()\n    db.refresh(existing_record)\n    return existing_record",
        "detail": "src.controller.weatherRecordController",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "src.database.database",
        "description": "src.database.database",
        "peekOfCode": "def get_db() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\ndef get_session() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:\n        yield session",
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "src.database.database",
        "description": "src.database.database",
        "peekOfCode": "def get_session() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()",
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "src.database.database",
        "description": "src.database.database",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\n# Verificar si DATABASE_URL se cargó correctamente\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL no está definida en el archivo .env\")\ntry:\n    engine = create_engine(DATABASE_URL)\n    # Intentar establecer una conexión para verificar la URL\n    with engine.connect() as connection:\n        print(\"Conexión a la base de datos establecida con éxito.\")\nexcept SQLAlchemyError as e:",
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.database.database",
        "description": "src.database.database",
        "peekOfCode": "Base = declarative_base()\nSessionLocal = sessionmaker(bind=engine, expire_on_commit=False)\ndef get_db() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\ndef get_session() -> Generator[Session, None, None]:\n    session = SessionLocal()",
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.database.database",
        "description": "src.database.database",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)\ndef get_db() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\ndef get_session() -> Generator[Session, None, None]:\n    session = SessionLocal()\n    try:",
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "src.helpers.auth_bearer",
        "description": "src.helpers.auth_bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(status_code=403, detail=\"Invalid authentication scheme.\")\n            if not self.verify_jwt(credentials.credentials):\n                raise HTTPException(status_code=403, detail=\"Invalid token or expired token.\")",
        "detail": "src.helpers.auth_bearer",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "kind": 2,
        "importPath": "src.helpers.auth_bearer",
        "description": "src.helpers.auth_bearer",
        "peekOfCode": "def decodeJWT(jwtoken: str):\n    try:\n        payload = jwt.decode(jwtoken, JWT_SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except jwt.ExpiredSignatureError:\n        return None\n    except jwt.DecodeError:\n        return None\n    except Exception:\n        return None",
        "detail": "src.helpers.auth_bearer",
        "documentation": {}
    },
    {
        "label": "jwt_bearer",
        "kind": 5,
        "importPath": "src.helpers.auth_bearer",
        "description": "src.helpers.auth_bearer",
        "peekOfCode": "jwt_bearer = JWTBearer()",
        "detail": "src.helpers.auth_bearer",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "peekOfCode": "ALGORITHM = \"HS256\"\nJWT_SECRET_KEY = \"narscbjim@$@&^@&%^&RFghgjvbdsha\"  # Llave secreta para Access Tokens\nJWT_REFRESH_SECRET_KEY = \"13ugfdfgh@#$%^@&jkl45678902\"  # Llave secreta para Refresh Tokens\nACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días",
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "kind": 5,
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "peekOfCode": "JWT_SECRET_KEY = \"narscbjim@$@&^@&%^&RFghgjvbdsha\"  # Llave secreta para Access Tokens\nJWT_REFRESH_SECRET_KEY = \"13ugfdfgh@#$%^@&jkl45678902\"  # Llave secreta para Refresh Tokens\nACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días",
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "kind": 5,
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "peekOfCode": "JWT_REFRESH_SECRET_KEY = \"13ugfdfgh@#$%^@&jkl45678902\"  # Llave secreta para Refresh Tokens\nACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días",
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días\nREFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días",
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "src.helpers.config",
        "description": "src.helpers.config",
        "peekOfCode": "REFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 90  # 90 días",
        "detail": "src.helpers.config",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "src.helpers.email_helper",
        "description": "src.helpers.email_helper",
        "peekOfCode": "def send_email(recipient: str, token: str, user_name: str):\n    sender_email = os.getenv(\"SENDER_EMAIL\")\n    sender_password = os.getenv(\"SENDER_PASSWORD\")\n    # URL de restablecimiento de contraseña desde variable de entorno\n    reset_password_url = f\"{os.getenv('RESET_PASSWORD_URL')}/{token}\"\n    # Configuración del mensaje con un enlace HTML\n    subject = \"Solicitud de Restablecimiento de Contraseña\"\n    body = (\n        f\"Hola {user_name},<br><br>\"\n        \"Has solicitado restablecer tu contraseña. Por favor, utiliza el siguiente enlace para restablecer tu contraseña:<br><br>\"",
        "detail": "src.helpers.email_helper",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def get_hashed_password(password: str) -> str:\n    return passwordContext.hash(password)\ndef verify_password(password: str, hashed_pass: str) -> bool:\n    return passwordContext.verify(password, hashed_pass)\n# Actualización para generar token asociado a un usuario específico\ndef generate_password_reset_token(user_id: int) -> str:\n    expiration = datetime.utcnow() + timedelta(hours=1)  # El token será válido por 1 hora\n    token_data = {\"user_id\": user_id, \"exp\": expiration.timestamp()}\n    return jwt.encode(token_data, JWT_SECRET_KEY, algorithm=ALGORITHM)\n# Función para verificar el token de restablecimiento de contraseña",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def verify_password(password: str, hashed_pass: str) -> bool:\n    return passwordContext.verify(password, hashed_pass)\n# Actualización para generar token asociado a un usuario específico\ndef generate_password_reset_token(user_id: int) -> str:\n    expiration = datetime.utcnow() + timedelta(hours=1)  # El token será válido por 1 hora\n    token_data = {\"user_id\": user_id, \"exp\": expiration.timestamp()}\n    return jwt.encode(token_data, JWT_SECRET_KEY, algorithm=ALGORITHM)\n# Función para verificar el token de restablecimiento de contraseña\ndef verify_password_reset_token(token: str):\n    try:",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def generate_password_reset_token(user_id: int) -> str:\n    expiration = datetime.utcnow() + timedelta(hours=1)  # El token será válido por 1 hora\n    token_data = {\"user_id\": user_id, \"exp\": expiration.timestamp()}\n    return jwt.encode(token_data, JWT_SECRET_KEY, algorithm=ALGORITHM)\n# Función para verificar el token de restablecimiento de contraseña\ndef verify_password_reset_token(token: str):\n    try:\n        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])\n        user_id = payload.get(\"user_id\")\n        if user_id is None:",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def verify_password_reset_token(token: str):\n    try:\n        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])\n        user_id = payload.get(\"user_id\")\n        if user_id is None:\n            return None\n        expiration = payload.get(\"exp\")\n        if datetime.utcnow() > datetime.utcfromtimestamp(expiration):\n            return None\n        return payload  # Retorna los datos del token si es válido",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "send_password_reset_email",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def send_password_reset_email(email: str, token: str):\n    print(f\"Se ha enviado un correo electrónico a {email} con el token de restablecimiento de contraseña: {token}\")\n# Tokens\ndef create_access_token(subject: Union[str, Any], expiresDelta: int = None) -> str:\n    if expiresDelta:\n        expire = datetime.utcnow() + expiresDelta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encodedJwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def create_access_token(subject: Union[str, Any], expiresDelta: int = None) -> str:\n    if expiresDelta:\n        expire = datetime.utcnow() + expiresDelta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encodedJwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)\n    return encodedJwt\ndef create_refresh_token(subject: Union[str, Any], expiresDelta: int = None) -> str:\n    if expiresDelta:",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def create_refresh_token(subject: Union[str, Any], expiresDelta: int = None) -> str:\n    if expiresDelta:\n        expire = datetime.utcnow() + expiresDelta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)\n    toEncode = {\"exp\": expire, \"sub\": str(subject)}\n    encodedJwt = jwt.encode(toEncode, JWT_REFRESH_SECRET_KEY, algorithm=ALGORITHM)\n    return encodedJwt\n# Obtiene el usuario actual autenticado utilizando el token JWT\ndef get_current_user(token: str = Depends(JWTBearer()), db: Session = Depends(get_session)) -> User:",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def get_current_user(token: str = Depends(JWTBearer()), db: Session = Depends(get_session)) -> User:\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Invalid authentication credentials\"\n    )\n    try:\n        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "verify_permission",
        "kind": 2,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "def verify_permission(permission_name: str):\n    # Verifica si el usuario actual tiene el permiso necesario.\n    def verify(user: User = Depends(get_current_user), db: Session = Depends(get_session)):\n        # Obtener todos los roles del usuario\n        user_roles = db.query(UserRole).filter(UserRole.usuario_id == user.id).all()\n        # Verificar si se encontraron roles para el usuario\n        if not user_roles:\n            print(f\"Usuario {user.id} no tiene roles asociados.\")\n            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"User does not have any roles\")\n        print(f\"Roles encontrados para el usuario {user.id}: {user_roles}\")",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "passwordContext",
        "kind": 5,
        "importPath": "src.helpers.utils",
        "description": "src.helpers.utils",
        "peekOfCode": "passwordContext = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef get_hashed_password(password: str) -> str:\n    return passwordContext.hash(password)\ndef verify_password(password: str, hashed_pass: str) -> bool:\n    return passwordContext.verify(password, hashed_pass)\n# Actualización para generar token asociado a un usuario específico\ndef generate_password_reset_token(user_id: int) -> str:\n    expiration = datetime.utcnow() + timedelta(hours=1)  # El token será válido por 1 hora\n    token_data = {\"user_id\": user_id, \"exp\": expiration.timestamp()}\n    return jwt.encode(token_data, JWT_SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "src.helpers.utils",
        "documentation": {}
    },
    {
        "label": "AdditionalCosts",
        "kind": 6,
        "importPath": "src.models.additionalCostsModel",
        "description": "src.models.additionalCostsModel",
        "peekOfCode": "class AdditionalCosts(Base):\n    __tablename__ = \"costos_adicionales\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    costo_capacitacion_real = Column(Float, nullable=True)  # Costo capacitación real\n    costo_control_roedores_real = Column(Float, nullable=True)  # Costo control de roedores real\n    costo_capacitacion_estimado = Column(Float, nullable=True)  # Costo capacitación estimado\n    costo_control_roedores_estimado = Column(Float, nullable=True)  # Costo control de roedores estimado\n    # Relación con VariableCost\n    gastos_variables = relationship(\"VariableCost\", back_populates=\"costos_adicionales\")\n    def __repr__(self):",
        "detail": "src.models.additionalCostsModel",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "kind": 6,
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "peekOfCode": "class AgriculturalInput(Base):\n    __tablename__ = 'insumo_agricola'\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(100), nullable=False)\n    descripcion = Column(String(255), nullable=True)\n    unidad_id = Column(Integer, ForeignKey(\"unidad_insumo.id\"), nullable=False)\n    cultivo_id = Column(Integer, ForeignKey(\"cultivo.id\"), nullable=False)\n    costo_unitario = Column(Float, nullable=False)\n    precio_unitario_estimado = Column(Float, nullable=True)\n    cantidad = Column(Float, nullable=False)",
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "UnidadInsumo",
        "kind": 6,
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "peekOfCode": "class UnidadInsumo(Base):\n    __tablename__ = 'unidad_insumo'\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), unique=True, nullable=False)\n    # Relación inversa para acceder a los insumos\n    insumos = relationship(\"AgriculturalInput\", back_populates=\"unidad\")\nclass TipoInsumo(Base):\n    __tablename__ = 'tipo_insumo'\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), unique=True, nullable=False)",
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "TipoInsumo",
        "kind": 6,
        "importPath": "src.models.agriculturalInputModel",
        "description": "src.models.agriculturalInputModel",
        "peekOfCode": "class TipoInsumo(Base):\n    __tablename__ = 'tipo_insumo'\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), unique=True, nullable=False)\n    # Relación inversa para acceder a los insumos\n    insumos = relationship(\"AgriculturalInput\", back_populates=\"tipo_insumo\")",
        "detail": "src.models.agriculturalInputModel",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "kind": 6,
        "importPath": "src.models.auditModel",
        "description": "src.models.auditModel",
        "peekOfCode": "class AuditLog(Base):\n    __tablename__ = \"audit_logs\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    table_name = Column(String, nullable=False)\n    operation_type = Column(String, nullable=False)  # INSERT, UPDATE, DELETE\n    record_id = Column(Integer, nullable=False)\n    changed_data = Column(JSON, nullable=True)\n    operation_timestamp = Column(TIMESTAMP, nullable=False)",
        "detail": "src.models.auditModel",
        "documentation": {}
    },
    {
        "label": "TokenTable",
        "kind": 6,
        "importPath": "src.models.authModel",
        "description": "src.models.authModel",
        "peekOfCode": "class TokenTable(Base):\n    __tablename__ = \"token\"\n    user_id = Column(Integer)\n    access_toke = Column(String(450), primary_key=True)\n    refresh_toke = Column(String(450),nullable=False)\n    status = Column(Boolean)\n    created_date = Column(DateTime, default=datetime.datetime.now)",
        "detail": "src.models.authModel",
        "documentation": {}
    },
    {
        "label": "Costs",
        "kind": 6,
        "importPath": "src.models.costsModel",
        "description": "src.models.costsModel",
        "peekOfCode": "class Costs(Base):\n    __tablename__ = \"gastos\"\n    id = Column(Integer, primary_key=True, index=True)\n    cultivo_id = Column(Integer, ForeignKey(\"cultivo.id\"), nullable=False)\n    concepto = Column(String, nullable=False)\n    descripcion = Column(String, nullable=True)\n    precio = Column(Float, nullable=False)\n    cultivo = relationship(\"Crop\", back_populates=\"gastos\")",
        "detail": "src.models.costsModel",
        "documentation": {}
    },
    {
        "label": "CropCycle",
        "kind": 6,
        "importPath": "src.models.cropCycleModel",
        "description": "src.models.cropCycleModel",
        "peekOfCode": "class CropCycle(Base):\n    __tablename__ = \"crop_cycle\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(100), nullable=False)\n    fecha_inicio = Column(Date, nullable=False)\n    fecha_fin = Column(Date)\n    cultivo_id = Column(Integer, ForeignKey(\"cultivo.id\"), nullable=False)\n    # Relaciones\n    cultivo = relationship(\"Cultivo\", back_populates=\"crop_cycles\")",
        "detail": "src.models.cropCycleModel",
        "documentation": {}
    },
    {
        "label": "Crop",
        "kind": 6,
        "importPath": "src.models.cropModel",
        "description": "src.models.cropModel",
        "peekOfCode": "class Crop(Base):\n    __tablename__ = 'cultivo'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    cropName = Column('nombre_cultivo', String(100), nullable=False)\n    varietyId = Column('variedad_id', Integer, ForeignKey('variedad_arroz.id'), nullable=False)\n    plotId = Column('lote_id', Integer, ForeignKey('lote.id'), nullable=False)\n    plantingDate = Column('fecha_siembra', Date, nullable=True)\n    estimatedHarvestDate = Column('fecha_estimada_cosecha', Date, nullable=True)\n    slug = Column(String, unique=True, index=True)\n    # Relaciones",
        "detail": "src.models.cropModel",
        "documentation": {}
    },
    {
        "label": "Diagnostic",
        "kind": 6,
        "importPath": "src.models.diagnosticModel",
        "description": "src.models.diagnosticModel",
        "peekOfCode": "class Diagnostic(Base):\n    __tablename__ = 'diagnostico_fitosanitario'\n    id = Column(Integer, primary_key=True, index=True)\n    resultado_ia = Column(JSON)\n    tarea_labor_id = Column(Integer, ForeignKey('tarea_labor_cultural.id'))\n    online = Column(Boolean, default=False)\n    sincronizado = Column(Boolean, default=False)\n    # Relación con la tarea\n    #task = relationship(\"Task\", back_populates=\"diagnostics\")",
        "detail": "src.models.diagnosticModel",
        "documentation": {}
    },
    {
        "label": "Estado",
        "kind": 6,
        "importPath": "src.models.estadoModel",
        "description": "src.models.estadoModel",
        "peekOfCode": "class Estado(Base):\n    __tablename__ = \"estado\"\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String, nullable=False)\n     # Relación hacia Task\n    tasks = relationship(\"Task\", back_populates=\"estado\")",
        "detail": "src.models.estadoModel",
        "documentation": {}
    },
    {
        "label": "Farm",
        "kind": 6,
        "importPath": "src.models.farmModel",
        "description": "src.models.farmModel",
        "peekOfCode": "class Farm(Base):\n    __tablename__ = 'finca'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(50), nullable=False)\n    ubicacion = Column(String(100), nullable=True)\n    area_total = Column(Float, nullable=True)\n    latitud = Column(DECIMAL(10, 5), nullable=True)\n    longitud = Column(DECIMAL(10, 5), nullable=True)\n    slug = Column(String(255), nullable=False)\n    # Nuevos campos",
        "detail": "src.models.farmModel",
        "documentation": {}
    },
    {
        "label": "FinancialExpenses",
        "kind": 6,
        "importPath": "src.models.financialExpensesModel",
        "description": "src.models.financialExpensesModel",
        "peekOfCode": "class FinancialExpenses(Base):\n    __tablename__ = \"gastos_administrativos_financieros\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    costo_impuestos_real = Column(Float, nullable=True)  # Costo impuestos real\n    costo_impuestos_estimado = Column(Float, nullable=True)  # Costo impuestos estimado\n    costo_seguros_real = Column(Float, nullable=True)  # Costo seguros real\n    costo_seguros_estimado = Column(Float, nullable=True)  # Costo seguros estimado\n    # Relación con VariableCost\n    gastos_variables = relationship(\"VariableCost\", back_populates=\"gastos_administrativos_financieros\")\n    def __repr__(self):",
        "detail": "src.models.financialExpensesModel",
        "documentation": {}
    },
    {
        "label": "Harvest",
        "kind": 6,
        "importPath": "src.models.harvestModel",
        "description": "src.models.harvestModel",
        "peekOfCode": "class Harvest(Base):\n    __tablename__ = 'cosecha'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    cultivo_id = Column(Integer, ForeignKey('cultivo.id'), nullable=False)\n    fecha_estimada_cosecha = Column(Date, nullable=True)\n    fecha_cosecha = Column(Date, nullable=True)\n    precio_carga_mercado = Column(Float, nullable=False)\n    gasto_transporte_cosecha = Column(Float, nullable=False)\n    gasto_recoleccion = Column(Float, nullable=False)\n    cantidad_producida_cosecha = Column(Float, nullable=False)",
        "detail": "src.models.harvestModel",
        "documentation": {}
    },
    {
        "label": "LaborCultural",
        "kind": 6,
        "importPath": "src.models.laborCulturalModel",
        "description": "src.models.laborCulturalModel",
        "peekOfCode": "class LaborCultural(Base):\n    __tablename__ = 'labor_cultural'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(100), nullable=False)  # Máximo de 100 caracteres para el nombre\n    descripcion = Column(Text, nullable=True)  # Campo opcional para la descripción\n    precio_hectaria = Column(Numeric(10, 2), nullable=True)  # Precio por hectárea\n    precio_hectaria_estimada = Column(Numeric(10, 2), nullable=True)  # Precio estimado por hectárea\n    id_etapa_fenologica = Column(Integer, ForeignKey('etapa_fenologica.id'), nullable=True)  # Relación con etapa fenológica\n    # Relación con PhenologicalStage\n    etapa_fenologica = relationship(",
        "detail": "src.models.laborCulturalModel",
        "documentation": {}
    },
    {
        "label": "Land",
        "kind": 6,
        "importPath": "src.models.landModel",
        "description": "src.models.landModel",
        "peekOfCode": "class Land(Base):\n    __tablename__ = 'lote'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(100), nullable=False)\n    finca_id = Column(Integer, ForeignKey('finca.id'), nullable=False)\n    area = Column(Float, nullable=False)\n    latitud = Column(DECIMAL(10, 5), nullable=True)\n    longitud = Column(DECIMAL(10, 5), nullable=True)\n    slug = Column(String(255), nullable=False)  # Asegúrate de que el slug está definido\n    arriendo_real = Column(Float, nullable=True)  # Nuevo campo agregado",
        "detail": "src.models.landModel",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "kind": 6,
        "importPath": "src.models.machineryModel",
        "description": "src.models.machineryModel",
        "peekOfCode": "class Machinery(Base):\n    __tablename__ = 'maquinaria_agricola'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column('nombre', String(100), nullable=False)\n    description = Column('descripcion', Text, nullable=True)\n    costPerHour = Column('costo_hora', Float, nullable=False)  # Costo por hora real\n    estimatedCostPerHour = Column('costo_hora_estimado', Float, nullable=True)  # Costo por hora estimado\n    # Relación con OpMech\n    operationMechanization = relationship(\"OpMech\", back_populates=\"machinery\")\n    # Relación inversa con Task",
        "detail": "src.models.machineryModel",
        "documentation": {}
    },
    {
        "label": "Monitoring",
        "kind": 6,
        "importPath": "src.models.monitoringModel",
        "description": "src.models.monitoringModel",
        "peekOfCode": "class Monitoring(Base):\n    __tablename__ = \"monitoreos\"\n    id = Column(Integer, primary_key=True, index=True)\n    tipo = Column(String(100), nullable=False)\n    variedad_arroz_etapa_fenologica_id = Column(Integer, ForeignKey(\"variedad_arroz_etapa_fenologica.id\"), nullable=True)\n    recomendacion = Column(Text)\n    crop_id = Column(Integer, ForeignKey(\"cultivo.id\"), nullable=False)  # Relación con Crop\n    # Nuevos campos\n    fecha_programada = Column(Date, nullable=False)  # Fecha estimada asignada por el administrador\n    fecha_finalizacion = Column(Date, nullable=True)  # Fecha real de finalización",
        "detail": "src.models.monitoringModel",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "kind": 6,
        "importPath": "src.models.opMechModel",
        "description": "src.models.opMechModel",
        "peekOfCode": "class OpMech(Base):\n    __tablename__ = 'operacion_mecanizacion'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    taskId = Column('tarea_labor_id', Integer, ForeignKey('tarea_labor_cultural.id'), nullable=False)\n    mechanizationName = Column('nombre_mecanizacion', String(50), nullable=False)\n    machineryId = Column('maquinaria_id', Integer, ForeignKey('maquinaria_agricola.id'), nullable=False)\n    hoursUsed = Column('horas_uso', Numeric(5, 2), nullable=False)\n    # Relaciones\n    #task = relationship(\"Task\", back_populates=\"operationMechanization\")\n    machinery = relationship(\"Machinery\", back_populates=\"operationMechanization\")",
        "detail": "src.models.opMechModel",
        "documentation": {}
    },
    {
        "label": "PasswordReset",
        "kind": 6,
        "importPath": "src.models.passwordResetModel",
        "description": "src.models.passwordResetModel",
        "peekOfCode": "class PasswordReset(Base):\n    __tablename__ = 'password_resets'\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, index=True, nullable=False)\n    token = Column(String, unique=True, index=True, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    def is_token_expired(self):\n        expiration_time = self.created_at + timedelta(hours=1)\n        return datetime.utcnow() > expiration_time",
        "detail": "src.models.passwordResetModel",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "peekOfCode": "class Permission(Base):\n    __tablename__ = 'permiso'  # Nombre de la tabla en la base de datos\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(100), nullable=False)  # La columna se llama 'nombre'\n    descripcion = Column(String, nullable=True)\n    # Relación inversa con Rol (a través de la tabla intermedia rol_permiso)\n    roles = relationship(\"Rol\", secondary=\"rol_permiso\", back_populates=\"permissions\")\nclass RolPermiso(Base):\n    __tablename__ = 'rol_permiso'  # Nombre de la tabla en la base de datos\n    rol_id = Column(Integer, ForeignKey('rol.id'), primary_key=True)",
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "RolPermiso",
        "kind": 6,
        "importPath": "src.models.permissionModel",
        "description": "src.models.permissionModel",
        "peekOfCode": "class RolPermiso(Base):\n    __tablename__ = 'rol_permiso'  # Nombre de la tabla en la base de datos\n    rol_id = Column(Integer, ForeignKey('rol.id'), primary_key=True)\n    permiso_id = Column(Integer, ForeignKey('permiso.id'), primary_key=True)",
        "detail": "src.models.permissionModel",
        "documentation": {}
    },
    {
        "label": "PhenologicalStage",
        "kind": 6,
        "importPath": "src.models.phenologicalStageModel",
        "description": "src.models.phenologicalStageModel",
        "peekOfCode": "class PhenologicalStage(Base):\n    __tablename__ = 'etapa_fenologica'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String(100), nullable=False)\n    fase = Column(String(50), nullable=False)\n    # Relación inversa hacia VarietyRiceStageModel\n    varieties = relationship(\"VarietyRiceStageModel\", back_populates=\"phenological_stage\")",
        "detail": "src.models.phenologicalStageModel",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitario",
        "kind": 6,
        "importPath": "src.models.phytosanitaryDiagnosisModel",
        "description": "src.models.phytosanitaryDiagnosisModel",
        "peekOfCode": "class DiagnosticoFitosanitario(Base):\n    __tablename__ = \"diagnostico_fitosanitario\"\n    id = Column(Integer, primary_key=True, index=True)\n    resultado_ia = Column(String, nullable=False)\n    ruta = Column(String, nullable=False)\n    cultivo_id = Column(Integer, ForeignKey(\"cultivo.id\"), nullable=False)\n    fecha_diagnostico = Column(Date, nullable=False)\n    confianza_promedio = Column(Float, nullable=True)\n    tipo_problema = Column(String, nullable=True)\n    imagenes_analizadas = Column(Integer, nullable=True)",
        "detail": "src.models.phytosanitaryDiagnosisModel",
        "documentation": {}
    },
    {
        "label": "Rol",
        "kind": 6,
        "importPath": "src.models.rolModel",
        "description": "src.models.rolModel",
        "peekOfCode": "class Rol(Base):\n    __tablename__ = 'rol'\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50), unique=True, nullable=False)\n    descripcion = Column(String(255))\n    # Relación con Permission usando la tabla intermedia rol_permiso\n    permissions = relationship(\"Permission\", secondary=\"rol_permiso\", back_populates=\"roles\")",
        "detail": "src.models.rolModel",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class SoilAnalysisModel(Base):\n    __tablename__ = 'analisis_edafologico'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    lote_id = Column(Integer, ForeignKey('lote.id'), nullable=False)\n    tipo_suelo_id = Column(Integer, ForeignKey(\"tipo_suelo.id\"), nullable=False)\n    fecha_analisis = Column(Date, nullable=False)\n    archivo_reporte = Column(LargeBinary, nullable=True)\n    biological_params = relationship(\"BiologicalParamModel\", uselist=False, back_populates=\"soil_analysis\")\n    chemical_params = relationship(\"ChemicalParamModel\", uselist=False, back_populates=\"soil_analysis\")\n    physical_params = relationship(\"PhysicalParamModel\", uselist=False, back_populates=\"soil_analysis\")",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilTypeModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class SoilTypeModel(Base):\n    __tablename__ = 'tipo_suelo'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    descripcion = Column(String(255), nullable=False)\n    # Relationship\n    soil_analyses = relationship(\"SoilAnalysisModel\", back_populates=\"soil_type\")\n# Model for the `parametro_biologico` table\nclass BiologicalParamModel(Base):\n    __tablename__ = 'parametro_biologico'\n    id = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "BiologicalParamModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class BiologicalParamModel(Base):\n    __tablename__ = 'parametro_biologico'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    analisis_edafologico_id = Column(Integer, ForeignKey(\"analisis_edafologico.id\"), nullable=False)\n    biomasa_microbiana = Column(DECIMAL(10, 2), nullable=True)\n    actividad_enzimatica = Column(DECIMAL(10, 2), nullable=True)\n    # Relationship\n    soil_analysis = relationship(\"SoilAnalysisModel\", back_populates=\"biological_params\")\n# Model for the `parametro_quimico` table\nclass ChemicalParamModel(Base):",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "ChemicalParamModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class ChemicalParamModel(Base):\n    __tablename__ = 'parametro_quimico'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    analisis_edafologico_id = Column(Integer, ForeignKey(\"analisis_edafologico.id\"), nullable=False)\n    ph = Column(DECIMAL(4, 2), nullable=True)\n    conductividad_electrica = Column(DECIMAL(10, 2), nullable=True)\n    materia_organica = Column(DECIMAL(10, 2), nullable=True)\n    capacidad_intercambio_cationico = Column(DECIMAL(10, 2), nullable=True)\n    # Relationships\n    macronutrients = relationship(\"MacronutrientModel\", back_populates=\"chemical_param\")",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "PhysicalParamModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class PhysicalParamModel(Base):\n    __tablename__ = 'parametro_fisico'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    analisis_edafologico_id = Column(Integer, ForeignKey(\"analisis_edafologico.id\"), nullable=False)\n    textura_id = Column(Integer, ForeignKey(\"textura.id\"), nullable=False)\n    color_id = Column(Integer, ForeignKey(\"color.id\"), nullable=False)\n    densidad_aparente = Column(DECIMAL(10, 2), nullable=True)\n    profundidad_efectiva = Column(DECIMAL(10, 2), nullable=True)\n    # Relationships\n    soil_analysis = relationship(\"SoilAnalysisModel\", back_populates=\"physical_params\")",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "MacronutrientModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class MacronutrientModel(Base):\n    __tablename__ = 'macronutriente'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    parametro_quimico_id = Column(Integer, ForeignKey(\"parametro_quimico.id\"), nullable=False)\n    n = Column(DECIMAL(10, 2), nullable=True)\n    p = Column(DECIMAL(10, 2), nullable=True)\n    k = Column(DECIMAL(10, 2), nullable=True)\n    ca = Column(DECIMAL(10, 2), nullable=True)\n    mg = Column(DECIMAL(10, 2), nullable=True)\n    s = Column(DECIMAL(10, 2), nullable=True)",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "MicronutrientModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class MicronutrientModel(Base):\n    __tablename__ = 'micronutriente'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    parametro_quimico_id = Column(Integer, ForeignKey(\"parametro_quimico.id\"), nullable=False)\n    fe = Column(DECIMAL(10, 2), nullable=True)\n    cu = Column(DECIMAL(10, 2), nullable=True)\n    mn = Column(DECIMAL(10, 2), nullable=True)\n    zn = Column(DECIMAL(10, 2), nullable=True)\n    b = Column(DECIMAL(10, 2), nullable=True)\n    # Relationship",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "TextureModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class TextureModel(Base):\n    __tablename__ = 'textura'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    descripcion = Column(String(255), nullable=False)\n    # Relationship\n    physical_params = relationship(\"PhysicalParamModel\", back_populates=\"texture\")\n# Model for the `color` table\nclass ColorModel(Base):\n    __tablename__ = 'color'\n    id = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "ColorModel",
        "kind": 6,
        "importPath": "src.models.soilAnalysisModel",
        "description": "src.models.soilAnalysisModel",
        "peekOfCode": "class ColorModel(Base):\n    __tablename__ = 'color'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    descripcion = Column(String(255), nullable=False)\n    # Relationship\n    physical_params = relationship(\"PhysicalParamModel\", back_populates=\"color\")",
        "detail": "src.models.soilAnalysisModel",
        "documentation": {}
    },
    {
        "label": "SoilType",
        "kind": 6,
        "importPath": "src.models.soilTypeModel",
        "description": "src.models.soilTypeModel",
        "peekOfCode": "class SoilType(Base):\n    __tablename__ = 'tipo_suelo'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    descripcion = Column(String(255), nullable=False)\n    # Relación inversa con SoilAnalysis\n    soil_analyses = relationship(\"SoilAnalysis\", back_populates=\"tipo_suelo\")",
        "detail": "src.models.soilTypeModel",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "src.models.taskModel",
        "description": "src.models.taskModel",
        "peekOfCode": "class Task(Base):\n    __tablename__ = \"tarea_labor_cultural\"\n    id = Column(Integer, primary_key=True, index=True)\n    fecha_estimada = Column(Date, nullable=False)\n    fecha_realizacion = Column(Date, nullable=True)\n    descripcion = Column(String, nullable=True)\n    estado_id = Column(Integer, ForeignKey(\"estado.id\", ondelete=\"CASCADE\"), nullable=False)\n    es_mecanizable = Column(Boolean, default=False)\n    cultivo_id = Column(Integer, ForeignKey(\"cultivo.id\", ondelete=\"CASCADE\"), nullable=False)\n    labor_cultural_id = Column(Integer, ForeignKey(\"labor_cultural.id\", ondelete=\"CASCADE\"), nullable=False)",
        "detail": "src.models.taskModel",
        "documentation": {}
    },
    {
        "label": "UserFarmRole",
        "kind": 6,
        "importPath": "src.models.userFarmRoleModel",
        "description": "src.models.userFarmRoleModel",
        "peekOfCode": "class UserFarmRole(Base):\n    __tablename__ = 'usuario_finca'\n    usuario_id = Column(Integer, ForeignKey('usuario.id', ondelete='CASCADE'), primary_key=True)\n    # rol_id = Column(Integer, ForeignKey('rol.id'), primary_key=True)\n    finca_id = Column(Integer, ForeignKey('finca.id', ondelete='CASCADE'), primary_key=True)",
        "detail": "src.models.userFarmRoleModel",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.userModel",
        "description": "src.models.userModel",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'usuario'\n    id = Column(Integer, primary_key = True)\n    nombre = Column(String(50), nullable=False )\n    apellido = Column(String(50), nullable=False)\n    email = Column(String(50), unique=True, nullable=False)\n    password = Column(String(100),nullable=False)\n    primer_login = Column(Boolean, default=True)\n    #Relación con task\n    tasks = relationship(\"Task\", back_populates=\"usuario\")  # Nueva relación",
        "detail": "src.models.userModel",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "src.models.userRoleModel",
        "description": "src.models.userRoleModel",
        "peekOfCode": "class UserRole(Base):\n    __tablename__ = \"usuario_rol\"\n    id = Column(Integer, primary_key=True)\n    usuario_id = Column(Integer, ForeignKey('usuario.id'), nullable=False)\n    rol_id = Column(Integer, ForeignKey('rol.id'), nullable=False)",
        "detail": "src.models.userRoleModel",
        "documentation": {}
    },
    {
        "label": "VariableCost",
        "kind": 6,
        "importPath": "src.models.variableCostModel",
        "description": "src.models.variableCostModel",
        "peekOfCode": "class VariableCost(Base):\n    __tablename__ = 'gastos_variables'\n    id = Column(Integer, primary_key=True, index=True)\n    id_costos_adicionales = Column(Integer, ForeignKey('costos_adicionales.id'))\n    id_agua = Column(Integer, ForeignKey('agua.id'))  # Correcta referencia a la tabla 'agua'\n    id_gastos_administrativos_financieros = Column(Integer, ForeignKey('gastos_administrativos_financieros.id'))\n    descripcion = Column(String)\n    # Relaciones con otras tablas\n    costos_adicionales = relationship(\"AdditionalCosts\", back_populates=\"gastos_variables\")\n    agua = relationship(\"Agua\", back_populates=\"gastos_variables\")",
        "detail": "src.models.variableCostModel",
        "documentation": {}
    },
    {
        "label": "VarietyArrozModel",
        "kind": 6,
        "importPath": "src.models.varietyArrozModel",
        "description": "src.models.varietyArrozModel",
        "peekOfCode": "class VarietyArrozModel(Base):\n    __tablename__ = 'variedad_arroz'\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(100), nullable=False)  # Cambiado de 50 a 100\n    numero_registro_productor_ica = Column(String(50), nullable=False)  # Cambiado a String\n    caracteristicas_variedad = Column(Text, nullable=True)\n    # Relación con la tabla de cultivos (crops)\n    crops = relationship(\"Crop\", order_by=\"Crop.id\", back_populates=\"variety\")\n    # Relación inversa con VarietyRiceStageModel\n    stages = relationship(\"VarietyRiceStageModel\", back_populates=\"variety\", cascade=\"all, delete-orphan\")",
        "detail": "src.models.varietyArrozModel",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageModel",
        "kind": 6,
        "importPath": "src.models.varietyRiceStageModel",
        "description": "src.models.varietyRiceStageModel",
        "peekOfCode": "class VarietyRiceStageModel(Base):\n    __tablename__ = \"variedad_arroz_etapa_fenologica\"\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(100), nullable=False)\n    etapa_fenologica_id = Column(Integer, ForeignKey(\"etapa_fenologica.id\", ondelete=\"SET NULL\"), nullable=True)\n    dias_duracion = Column(Integer)\n    variedad_arroz_id = Column(Integer, ForeignKey(\"variedad_arroz.id\", ondelete=\"CASCADE\"))\n    # Relación con la tabla `variedad_arroz`\n    variety = relationship(\"VarietyArrozModel\", back_populates=\"stages\")\n    # Relación con la tabla `etapa_fenologica`",
        "detail": "src.models.varietyRiceStageModel",
        "documentation": {}
    },
    {
        "label": "Agua",
        "kind": 6,
        "importPath": "src.models.waterModel",
        "description": "src.models.waterModel",
        "peekOfCode": "class Agua(Base):\n    __tablename__ = 'agua'\n    id = Column(Integer, primary_key=True, index=True)\n    costo_instalacion_agua_real = Column(Integer, nullable=True)\n    costo_instalacion_agua_estimado = Column(Integer, nullable=True)\n    costo_consumo_agua_real = Column(Integer, nullable=True)\n    costo_consumo_agua_estimado = Column(Integer, nullable=True)\n    consumo_energia_real = Column(Integer, nullable=True)\n    consumo_energia_estimada = Column(Integer, nullable=True)\n    # Relación bidireccional con VariableCost",
        "detail": "src.models.waterModel",
        "documentation": {}
    },
    {
        "label": "WeatherRecord",
        "kind": 6,
        "importPath": "src.models.weatherRecordModel",
        "description": "src.models.weatherRecordModel",
        "peekOfCode": "class WeatherRecord(Base):\n    __tablename__ = \"registro_meteorologico\"\n    id = Column(Integer, primary_key=True, index=True)\n    lote_id = Column(Integer, ForeignKey('lote.id'), nullable=False)\n    fecha = Column(Date, nullable=False)\n    hora = Column(Time, nullable=True)  # Cambiado a nullable=True para permitir None\n    temperatura = Column(Float, nullable=False)\n    presion_atmosferica = Column(Float, nullable=False)\n    humedad = Column(Float, nullable=False)\n    precipitacion = Column(Float)",
        "detail": "src.models.weatherRecordModel",
        "documentation": {}
    },
    {
        "label": "WeightUnit",
        "kind": 6,
        "importPath": "src.models.weightUnitModel",
        "description": "src.models.weightUnitModel",
        "peekOfCode": "class WeightUnit(Base):\n    __tablename__ = 'unidad_peso'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    unit = Column(String(50), nullable=False)\n    # Inverse relationship\n    #crops = relationship(\"Crop\", order_by=\"Crop.id\", back_populates=\"weightUnit\")",
        "detail": "src.models.weightUnitModel",
        "documentation": {}
    },
    {
        "label": "register_input",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def register_input(input: AgriculturalInputCreate, session: Session = Depends(get_session)):\n    return createInput(input, session)\n@AGRICULTURAL_INPUT_ROUTES.get('/inputs', response_model=list[AgriculturalInput])\ndef list_inputs(session: Session = Depends(get_session)):\n    return getAllInput(session)\n@AGRICULTURAL_INPUT_ROUTES.get('/input/{input_id}', response_model=AgriculturalInput)\ndef get_input(input_id: int, session: Session = Depends(get_session)):\n    return getInputById(input_id, session)\n@AGRICULTURAL_INPUT_ROUTES.put('/update/input/{input_id}')\ndef update_input_route(input_id: int, input: AgriculturalInputUpdate, session: Session = Depends(get_session)):",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "list_inputs",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def list_inputs(session: Session = Depends(get_session)):\n    return getAllInput(session)\n@AGRICULTURAL_INPUT_ROUTES.get('/input/{input_id}', response_model=AgriculturalInput)\ndef get_input(input_id: int, session: Session = Depends(get_session)):\n    return getInputById(input_id, session)\n@AGRICULTURAL_INPUT_ROUTES.put('/update/input/{input_id}')\ndef update_input_route(input_id: int, input: AgriculturalInputUpdate, session: Session = Depends(get_session)):\n    return updateInput(input_id, input, session)\n@AGRICULTURAL_INPUT_ROUTES.delete('/delete/input/{input_id}')\ndef delete_input_route(input_id: int, session: Session = Depends(get_session)):",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def get_input(input_id: int, session: Session = Depends(get_session)):\n    return getInputById(input_id, session)\n@AGRICULTURAL_INPUT_ROUTES.put('/update/input/{input_id}')\ndef update_input_route(input_id: int, input: AgriculturalInputUpdate, session: Session = Depends(get_session)):\n    return updateInput(input_id, input, session)\n@AGRICULTURAL_INPUT_ROUTES.delete('/delete/input/{input_id}')\ndef delete_input_route(input_id: int, session: Session = Depends(get_session)):\n    return deleteInput(input_id, session)\n# Ruta para obtener todas las unidades de insumo\n@AGRICULTURAL_INPUT_ROUTES.get('/units', response_model=list[UnidadInsumoSchema])",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "update_input_route",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def update_input_route(input_id: int, input: AgriculturalInputUpdate, session: Session = Depends(get_session)):\n    return updateInput(input_id, input, session)\n@AGRICULTURAL_INPUT_ROUTES.delete('/delete/input/{input_id}')\ndef delete_input_route(input_id: int, session: Session = Depends(get_session)):\n    return deleteInput(input_id, session)\n# Ruta para obtener todas las unidades de insumo\n@AGRICULTURAL_INPUT_ROUTES.get('/units', response_model=list[UnidadInsumoSchema])\ndef list_units(session: Session = Depends(get_session)):\n    return get_all_units(session)\n# Ruta para obtener todos los tipos de insumo",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "delete_input_route",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def delete_input_route(input_id: int, session: Session = Depends(get_session)):\n    return deleteInput(input_id, session)\n# Ruta para obtener todas las unidades de insumo\n@AGRICULTURAL_INPUT_ROUTES.get('/units', response_model=list[UnidadInsumoSchema])\ndef list_units(session: Session = Depends(get_session)):\n    return get_all_units(session)\n# Ruta para obtener todos los tipos de insumo\n@AGRICULTURAL_INPUT_ROUTES.get('/input-types')\ndef list_input_types(session: Session = Depends(get_session)):\n    return get_all_input_types(session)",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "list_units",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def list_units(session: Session = Depends(get_session)):\n    return get_all_units(session)\n# Ruta para obtener todos los tipos de insumo\n@AGRICULTURAL_INPUT_ROUTES.get('/input-types')\ndef list_input_types(session: Session = Depends(get_session)):\n    return get_all_input_types(session)",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "list_input_types",
        "kind": 2,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "def list_input_types(session: Session = Depends(get_session)):\n    return get_all_input_types(session)",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "AGRICULTURAL_INPUT_ROUTES",
        "kind": 5,
        "importPath": "src.routes.agriculturalInputRoutes",
        "description": "src.routes.agriculturalInputRoutes",
        "peekOfCode": "AGRICULTURAL_INPUT_ROUTES = APIRouter()\n# Rutas para operaciones CRUD de insumos agrícolas\n@AGRICULTURAL_INPUT_ROUTES.post('/register-input')\ndef register_input(input: AgriculturalInputCreate, session: Session = Depends(get_session)):\n    return createInput(input, session)\n@AGRICULTURAL_INPUT_ROUTES.get('/inputs', response_model=list[AgriculturalInput])\ndef list_inputs(session: Session = Depends(get_session)):\n    return getAllInput(session)\n@AGRICULTURAL_INPUT_ROUTES.get('/input/{input_id}', response_model=AgriculturalInput)\ndef get_input(input_id: int, session: Session = Depends(get_session)):",
        "detail": "src.routes.agriculturalInputRoutes",
        "documentation": {}
    },
    {
        "label": "list_all_audits",
        "kind": 2,
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "peekOfCode": "def list_all_audits(db: Session = Depends(get_session)):\n    return get_all_audits(db)\n@AUDIT_ROUTES.get(\"/audits/table/{table_name}\")\ndef list_audits_by_table(table_name: str, db: Session = Depends(get_session)):\n    return get_audits_by_table(db, table_name)\n@AUDIT_ROUTES.get(\"/audits/operation/{operation_type}\")\ndef list_audits_by_operation(operation_type: str, db: Session = Depends(get_session)):\n    return get_audits_by_operation(db, operation_type)\n@AUDIT_ROUTES.get(\"/audits/{table_name}/{record_id}\")\ndef get_audit_details(table_name: str, record_id: int, db: Session = Depends(get_session)):",
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "list_audits_by_table",
        "kind": 2,
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "peekOfCode": "def list_audits_by_table(table_name: str, db: Session = Depends(get_session)):\n    return get_audits_by_table(db, table_name)\n@AUDIT_ROUTES.get(\"/audits/operation/{operation_type}\")\ndef list_audits_by_operation(operation_type: str, db: Session = Depends(get_session)):\n    return get_audits_by_operation(db, operation_type)\n@AUDIT_ROUTES.get(\"/audits/{table_name}/{record_id}\")\ndef get_audit_details(table_name: str, record_id: int, db: Session = Depends(get_session)):\n    return get_audit_by_table_and_id(db, table_name, record_id)",
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "list_audits_by_operation",
        "kind": 2,
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "peekOfCode": "def list_audits_by_operation(operation_type: str, db: Session = Depends(get_session)):\n    return get_audits_by_operation(db, operation_type)\n@AUDIT_ROUTES.get(\"/audits/{table_name}/{record_id}\")\ndef get_audit_details(table_name: str, record_id: int, db: Session = Depends(get_session)):\n    return get_audit_by_table_and_id(db, table_name, record_id)",
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "get_audit_details",
        "kind": 2,
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "peekOfCode": "def get_audit_details(table_name: str, record_id: int, db: Session = Depends(get_session)):\n    return get_audit_by_table_and_id(db, table_name, record_id)",
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "AUDIT_ROUTES",
        "kind": 5,
        "importPath": "src.routes.auditRoutes",
        "description": "src.routes.auditRoutes",
        "peekOfCode": "AUDIT_ROUTES = APIRouter()\n@AUDIT_ROUTES.get(\"/audits/\")\ndef list_all_audits(db: Session = Depends(get_session)):\n    return get_all_audits(db)\n@AUDIT_ROUTES.get(\"/audits/table/{table_name}\")\ndef list_audits_by_table(table_name: str, db: Session = Depends(get_session)):\n    return get_audits_by_table(db, table_name)\n@AUDIT_ROUTES.get(\"/audits/operation/{operation_type}\")\ndef list_audits_by_operation(operation_type: str, db: Session = Depends(get_session)):\n    return get_audits_by_operation(db, operation_type)",
        "detail": "src.routes.auditRoutes",
        "documentation": {}
    },
    {
        "label": "loginRoute",
        "kind": 2,
        "importPath": "src.routes.authRoutes",
        "description": "src.routes.authRoutes",
        "peekOfCode": "def loginRoute(request: LoginRequest, db: Session = Depends(get_session)):\n    return login(request, db)\n@AUTH_ROUTES.post('/logout')\ndef logoutRoute(user_id: int, db: Session = Depends(get_session)):\n    return logout(user_id, db)",
        "detail": "src.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "logoutRoute",
        "kind": 2,
        "importPath": "src.routes.authRoutes",
        "description": "src.routes.authRoutes",
        "peekOfCode": "def logoutRoute(user_id: int, db: Session = Depends(get_session)):\n    return logout(user_id, db)",
        "detail": "src.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "AUTH_ROUTES",
        "kind": 5,
        "importPath": "src.routes.authRoutes",
        "description": "src.routes.authRoutes",
        "peekOfCode": "AUTH_ROUTES = APIRouter()\n@AUTH_ROUTES.post('/login', response_model=TokenSchema)\ndef loginRoute(request: LoginRequest, db: Session = Depends(get_session)):\n    return login(request, db)\n@AUTH_ROUTES.post('/logout')\ndef logoutRoute(user_id: int, db: Session = Depends(get_session)):\n    return logout(user_id, db)",
        "detail": "src.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.cities_Router",
        "description": "src.routes.cities_Router",
        "peekOfCode": "router = APIRouter()\n# Endpoint para filtrar departamentos\n@router.get(\"/departments/filter\")\nasync def get_filtered_departments(query: str = Query(..., min_length=1, description=\"Parte del nombre del departamento\")):\n    filtered_departments = filter_departments(query)\n    return JSONResponse(content=filtered_departments)\n# Endpoint para filtrar ciudades por departamento\n@router.get(\"/departments/{department_id}/cities/filter\")\nasync def get_filtered_cities(department_id: int, query: str = Query(..., min_length=1, description=\"Parte del nombre de la ciudad\")):\n    filtered_cities = filter_cities_by_department(department_id, query)",
        "detail": "src.routes.cities_Router",
        "documentation": {}
    },
    {
        "label": "create_new_cost",
        "kind": 2,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "def create_new_cost(cost_data: CostsCreate, db: Session = Depends(get_session)):\n    return create_cost(db, cost_data)\n@router.get(\"/costs/{cultivo_id}\", response_model=List[CostsOut])\ndef list_costs_by_cultivo(cultivo_id: int, db: Session = Depends(get_session)):\n    return get_costs_by_cultivo(db, cultivo_id)\n@router.get(\"/costs/details/{cost_id}\", response_model=CostsOut)\ndef get_cost_details(cost_id: int, db: Session = Depends(get_session)):\n    cost = get_cost_by_id(db, cost_id)\n    if not cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "list_costs_by_cultivo",
        "kind": 2,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "def list_costs_by_cultivo(cultivo_id: int, db: Session = Depends(get_session)):\n    return get_costs_by_cultivo(db, cultivo_id)\n@router.get(\"/costs/details/{cost_id}\", response_model=CostsOut)\ndef get_cost_details(cost_id: int, db: Session = Depends(get_session)):\n    cost = get_cost_by_id(db, cost_id)\n    if not cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")\n    return cost\n@router.put(\"/costs/{cost_id}\", response_model=CostsOut)\ndef update_existing_cost(cost_id: int, cost_data: CostsUpdate, db: Session = Depends(get_session)):",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "get_cost_details",
        "kind": 2,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "def get_cost_details(cost_id: int, db: Session = Depends(get_session)):\n    cost = get_cost_by_id(db, cost_id)\n    if not cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")\n    return cost\n@router.put(\"/costs/{cost_id}\", response_model=CostsOut)\ndef update_existing_cost(cost_id: int, cost_data: CostsUpdate, db: Session = Depends(get_session)):\n    updated_cost = update_cost(db, cost_id, cost_data)\n    if not updated_cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "update_existing_cost",
        "kind": 2,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "def update_existing_cost(cost_id: int, cost_data: CostsUpdate, db: Session = Depends(get_session)):\n    updated_cost = update_cost(db, cost_id, cost_data)\n    if not updated_cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")\n    return updated_cost\n@router.delete(\"/costs/{cost_id}\", response_model=dict)\ndef delete_existing_cost(cost_id: int, db: Session = Depends(get_session)):\n    deleted_cost = delete_cost(db, cost_id)\n    if not deleted_cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "delete_existing_cost",
        "kind": 2,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "def delete_existing_cost(cost_id: int, db: Session = Depends(get_session)):\n    deleted_cost = delete_cost(db, cost_id)\n    if not deleted_cost:\n        raise HTTPException(status_code=404, detail=\"Cost not found\")\n    return {\"message\": \"Cost deleted successfully\"}",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.costsRoutes",
        "description": "src.routes.costsRoutes",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/costs\", response_model=CostsOut)\ndef create_new_cost(cost_data: CostsCreate, db: Session = Depends(get_session)):\n    return create_cost(db, cost_data)\n@router.get(\"/costs/{cultivo_id}\", response_model=List[CostsOut])\ndef list_costs_by_cultivo(cultivo_id: int, db: Session = Depends(get_session)):\n    return get_costs_by_cultivo(db, cultivo_id)\n@router.get(\"/costs/details/{cost_id}\", response_model=CostsOut)\ndef get_cost_details(cost_id: int, db: Session = Depends(get_session)):\n    cost = get_cost_by_id(db, cost_id)",
        "detail": "src.routes.costsRoutes",
        "documentation": {}
    },
    {
        "label": "CROP_CYCLE_ROUTES",
        "kind": 5,
        "importPath": "src.routes.cropCycleRoutes",
        "description": "src.routes.cropCycleRoutes",
        "peekOfCode": "CROP_CYCLE_ROUTES = APIRouter(prefix=\"/crop-cycle\")\n@CROP_CYCLE_ROUTES.post(\"/generate-cycle\", response_model=list[CropCycleStageResponse])\nasync def generate_crop_cycle(cycle_request: CropCycleRequest):\n    try:\n        return generateCropCycle(cycle_request.sowingDate)\n    except HTTPException as e:\n        raise e",
        "detail": "src.routes.cropCycleRoutes",
        "documentation": {}
    },
    {
        "label": "createCropRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def createCropRoute(crop: CropCreate, db: Session = Depends(get_session)):\n    return createCrop(crop, db)\n# Ruta para obtener todos los cultivos (sin filtrar)\n@CROP_ROUTES.get(\"/crops/all\", response_model=list[CropOut])\ndef getAllCropsRoute(db: Session = Depends(get_session)):\n    return getAllCrops(db)\n# Nueva ruta para obtener cultivos por ID de lote (filtrados por plotId)\n@CROP_ROUTES.get(\"/crops/by_land/{land_id}\", response_model=list[CropOut])\ndef getCropsByLandRoute(land_id: int, db: Session = Depends(get_session)):\n    return getCropsByLand(land_id, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "getAllCropsRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def getAllCropsRoute(db: Session = Depends(get_session)):\n    return getAllCrops(db)\n# Nueva ruta para obtener cultivos por ID de lote (filtrados por plotId)\n@CROP_ROUTES.get(\"/crops/by_land/{land_id}\", response_model=list[CropOut])\ndef getCropsByLandRoute(land_id: int, db: Session = Depends(get_session)):\n    return getCropsByLand(land_id, db)\n# Ruta para obtener un cultivo específico por su ID\n@CROP_ROUTES.get(\"/crops/{crop_id}\", response_model=CropOut)\ndef getCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return getCrop(crop_id, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "getCropsByLandRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def getCropsByLandRoute(land_id: int, db: Session = Depends(get_session)):\n    return getCropsByLand(land_id, db)\n# Ruta para obtener un cultivo específico por su ID\n@CROP_ROUTES.get(\"/crops/{crop_id}\", response_model=CropOut)\ndef getCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return getCrop(crop_id, db)\n# Ruta para actualizar un cultivo\n@CROP_ROUTES.put(\"/crops/{crop_id}\", response_model=CropOut)\ndef updateCropRoute(crop_id: int, crop: CropUpdate, db: Session = Depends(get_session)):\n    return updateCrop(crop_id, crop, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "getCropRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def getCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return getCrop(crop_id, db)\n# Ruta para actualizar un cultivo\n@CROP_ROUTES.put(\"/crops/{crop_id}\", response_model=CropOut)\ndef updateCropRoute(crop_id: int, crop: CropUpdate, db: Session = Depends(get_session)):\n    return updateCrop(crop_id, crop, db)\n# Ruta para eliminar un cultivo\n@CROP_ROUTES.delete(\"/crops/{crop_id}\")\ndef deleteCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return deleteCrop(crop_id, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "updateCropRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def updateCropRoute(crop_id: int, crop: CropUpdate, db: Session = Depends(get_session)):\n    return updateCrop(crop_id, crop, db)\n# Ruta para eliminar un cultivo\n@CROP_ROUTES.delete(\"/crops/{crop_id}\")\ndef deleteCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return deleteCrop(crop_id, db)\n# Ruta para obtener información de un cultivo por slugs de finca, lote y cultivo\n@CROP_ROUTES.get(\"/finca/{finca_slug}/lote/{lote_slug}/cultivo/{cultivo_slug}\", response_model=CropOut)\ndef get_crop_route(finca_slug: str, lote_slug: str, cultivo_slug: str, db: Session = Depends(get_session)):\n    return getCropInfo(finca_slug, lote_slug, cultivo_slug, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "deleteCropRoute",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def deleteCropRoute(crop_id: int, db: Session = Depends(get_session)):\n    return deleteCrop(crop_id, db)\n# Ruta para obtener información de un cultivo por slugs de finca, lote y cultivo\n@CROP_ROUTES.get(\"/finca/{finca_slug}/lote/{lote_slug}/cultivo/{cultivo_slug}\", response_model=CropOut)\ndef get_crop_route(finca_slug: str, lote_slug: str, cultivo_slug: str, db: Session = Depends(get_session)):\n    return getCropInfo(finca_slug, lote_slug, cultivo_slug, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "get_crop_route",
        "kind": 2,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "def get_crop_route(finca_slug: str, lote_slug: str, cultivo_slug: str, db: Session = Depends(get_session)):\n    return getCropInfo(finca_slug, lote_slug, cultivo_slug, db)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "CROP_ROUTES",
        "kind": 5,
        "importPath": "src.routes.cropRoutes",
        "description": "src.routes.cropRoutes",
        "peekOfCode": "CROP_ROUTES = APIRouter()\n# Ruta para crear un cultivo\n@CROP_ROUTES.post(\"/crops\", response_model=CropOut)\ndef createCropRoute(crop: CropCreate, db: Session = Depends(get_session)):\n    return createCrop(crop, db)\n# Ruta para obtener todos los cultivos (sin filtrar)\n@CROP_ROUTES.get(\"/crops/all\", response_model=list[CropOut])\ndef getAllCropsRoute(db: Session = Depends(get_session)):\n    return getAllCrops(db)\n# Nueva ruta para obtener cultivos por ID de lote (filtrados por plotId)",
        "detail": "src.routes.cropRoutes",
        "documentation": {}
    },
    {
        "label": "list_cultural_works",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def list_cultural_works(cultivo_id: int, db: Session = Depends(get_db)):\n    return get_cultural_works_by_crop(db, cultivo_id)\n#valor total de todas las actividades\n@router.get(\"/crops/{cultivo_id}/cultural-works/total-value\")\ndef get_total_value(cultivo_id: int, db: Session = Depends(get_db)):\n    return get_total_cultural_works_value(db, cultivo_id)\n#filtro por actividad\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-activity\")\ndef filter_activity(cultivo_id: int, activity_name: str, db: Session = Depends(get_db)):\n    return filter_by_activity(cultivo_id, activity_name, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_value",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def get_total_value(cultivo_id: int, db: Session = Depends(get_db)):\n    return get_total_cultural_works_value(db, cultivo_id)\n#filtro por actividad\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-activity\")\ndef filter_activity(cultivo_id: int, activity_name: str, db: Session = Depends(get_db)):\n    return filter_by_activity(cultivo_id, activity_name, db)\n#filtro por maquinaria\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-machinery\")\ndef filter_machinery(cultivo_id: int, machinery_name: str, db: Session = Depends(get_db)):\n    return filter_by_machinery(cultivo_id, machinery_name, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "filter_activity",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def filter_activity(cultivo_id: int, activity_name: str, db: Session = Depends(get_db)):\n    return filter_by_activity(cultivo_id, activity_name, db)\n#filtro por maquinaria\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-machinery\")\ndef filter_machinery(cultivo_id: int, machinery_name: str, db: Session = Depends(get_db)):\n    return filter_by_machinery(cultivo_id, machinery_name, db)\n#filtro por operador\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-operator\")\ndef filter_operator(cultivo_id: int, operator_name: str, db: Session = Depends(get_db)):\n    return filter_by_operator(cultivo_id, operator_name, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "filter_machinery",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def filter_machinery(cultivo_id: int, machinery_name: str, db: Session = Depends(get_db)):\n    return filter_by_machinery(cultivo_id, machinery_name, db)\n#filtro por operador\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-operator\")\ndef filter_operator(cultivo_id: int, operator_name: str, db: Session = Depends(get_db)):\n    return filter_by_operator(cultivo_id, operator_name, db)\n#filtro fecha\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-date-range\")\ndef filter_date_range(cultivo_id: int, start_date: datetime, end_date: datetime, db: Session = Depends(get_db)):\n    return filter_by_date_range(cultivo_id, start_date, end_date, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "filter_operator",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def filter_operator(cultivo_id: int, operator_name: str, db: Session = Depends(get_db)):\n    return filter_by_operator(cultivo_id, operator_name, db)\n#filtro fecha\n@router.get(\"/crops/{cultivo_id}/cultural-works/filter-by-date-range\")\ndef filter_date_range(cultivo_id: int, start_date: datetime, end_date: datetime, db: Session = Depends(get_db)):\n    return filter_by_date_range(cultivo_id, start_date, end_date, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "filter_date_range",
        "kind": 2,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "def filter_date_range(cultivo_id: int, start_date: datetime, end_date: datetime, db: Session = Depends(get_db)):\n    return filter_by_date_range(cultivo_id, start_date, end_date, db)",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.culturalWorkRoutes",
        "description": "src.routes.culturalWorkRoutes",
        "peekOfCode": "router = APIRouter()\n#lista totas las actividades del cultivo\n@router.get(\"/crops/{cultivo_id}/cultural-works\")\ndef list_cultural_works(cultivo_id: int, db: Session = Depends(get_db)):\n    return get_cultural_works_by_crop(db, cultivo_id)\n#valor total de todas las actividades\n@router.get(\"/crops/{cultivo_id}/cultural-works/total-value\")\ndef get_total_value(cultivo_id: int, db: Session = Depends(get_db)):\n    return get_total_cultural_works_value(db, cultivo_id)\n#filtro por actividad",
        "detail": "src.routes.culturalWorkRoutes",
        "documentation": {}
    },
    {
        "label": "create_diagnostic_route",
        "kind": 2,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "def create_diagnostic_route(diagnostic: DiagnosticCreate, db: Session = Depends(get_db)):\n    return create_diagnostic(db, diagnostic)\n# Obtener un diagnóstico fitosanitario por ID\n@DIAGNOSTIC_ROUTES.get(\"/diagnostics/{diagnostic_id}\", response_model=Diagnostic)\ndef read_diagnostic(diagnostic_id: int, db: Session = Depends(get_db)):\n    return get_diagnostic(db, diagnostic_id)\n# Obtener todos los diagnósticos fitosanitarios\n@DIAGNOSTIC_ROUTES.get(\"/diagnostics/\", response_model=list[Diagnostic])\ndef read_all_diagnostics(db: Session = Depends(get_db)):\n    return get_diagnostics(db)",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "read_diagnostic",
        "kind": 2,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "def read_diagnostic(diagnostic_id: int, db: Session = Depends(get_db)):\n    return get_diagnostic(db, diagnostic_id)\n# Obtener todos los diagnósticos fitosanitarios\n@DIAGNOSTIC_ROUTES.get(\"/diagnostics/\", response_model=list[Diagnostic])\ndef read_all_diagnostics(db: Session = Depends(get_db)):\n    return get_diagnostics(db)\n# Actualizar un diagnóstico fitosanitario\n@DIAGNOSTIC_ROUTES.put(\"/diagnostics/{diagnostic_id}\", response_model=Diagnostic)\ndef update_diagnostic_route(diagnostic_id: int, diagnostic: DiagnosticCreate, db: Session = Depends(get_db)):\n    return update_diagnostic(db, diagnostic_id, diagnostic)",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "read_all_diagnostics",
        "kind": 2,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "def read_all_diagnostics(db: Session = Depends(get_db)):\n    return get_diagnostics(db)\n# Actualizar un diagnóstico fitosanitario\n@DIAGNOSTIC_ROUTES.put(\"/diagnostics/{diagnostic_id}\", response_model=Diagnostic)\ndef update_diagnostic_route(diagnostic_id: int, diagnostic: DiagnosticCreate, db: Session = Depends(get_db)):\n    return update_diagnostic(db, diagnostic_id, diagnostic)\n# Eliminar un diagnóstico fitosanitario\n@DIAGNOSTIC_ROUTES.delete(\"/diagnostics/{diagnostic_id}\", response_model=dict)\ndef delete_diagnostic_route(diagnostic_id: int, db: Session = Depends(get_db)):\n    return delete_diagnostic(db, diagnostic_id)",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "update_diagnostic_route",
        "kind": 2,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "def update_diagnostic_route(diagnostic_id: int, diagnostic: DiagnosticCreate, db: Session = Depends(get_db)):\n    return update_diagnostic(db, diagnostic_id, diagnostic)\n# Eliminar un diagnóstico fitosanitario\n@DIAGNOSTIC_ROUTES.delete(\"/diagnostics/{diagnostic_id}\", response_model=dict)\ndef delete_diagnostic_route(diagnostic_id: int, db: Session = Depends(get_db)):\n    return delete_diagnostic(db, diagnostic_id)",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "delete_diagnostic_route",
        "kind": 2,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "def delete_diagnostic_route(diagnostic_id: int, db: Session = Depends(get_db)):\n    return delete_diagnostic(db, diagnostic_id)",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "DIAGNOSTIC_ROUTES",
        "kind": 5,
        "importPath": "src.routes.diagnosticRoutes",
        "description": "src.routes.diagnosticRoutes",
        "peekOfCode": "DIAGNOSTIC_ROUTES = APIRouter()\n# Crear un nuevo diagnóstico fitosanitario\n@DIAGNOSTIC_ROUTES.post(\"/diagnostics/\", response_model=Diagnostic)\ndef create_diagnostic_route(diagnostic: DiagnosticCreate, db: Session = Depends(get_db)):\n    return create_diagnostic(db, diagnostic)\n# Obtener un diagnóstico fitosanitario por ID\n@DIAGNOSTIC_ROUTES.get(\"/diagnostics/{diagnostic_id}\", response_model=Diagnostic)\ndef read_diagnostic(diagnostic_id: int, db: Session = Depends(get_db)):\n    return get_diagnostic(db, diagnostic_id)\n# Obtener todos los diagnósticos fitosanitarios",
        "detail": "src.routes.diagnosticRoutes",
        "documentation": {}
    },
    {
        "label": "get_crops_for_farm",
        "kind": 2,
        "importPath": "src.routes.farmCropRoutes",
        "description": "src.routes.farmCropRoutes",
        "peekOfCode": "def get_crops_for_farm(farm_id: int, db: Session = Depends(get_session)):\n    crops = get_crops_by_farm_id(farm_id, db)\n    if not crops:\n        raise HTTPException(status_code=404, detail=\"No crops found for this farm\")\n    return [CropOut(\n        id=c.id,\n        cropName=c.cropName,\n        varietyId=c.varietyId,\n        varietyName=None,  # Ahora varietyName siempre estará presente, pero con None si no se consulta\n        plotId=c.plotId,",
        "detail": "src.routes.farmCropRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_CROP_ROUTES",
        "kind": 5,
        "importPath": "src.routes.farmCropRoutes",
        "description": "src.routes.farmCropRoutes",
        "peekOfCode": "FARM_CROP_ROUTES = APIRouter()\n@FARM_CROP_ROUTES.get(\"/farms/{farm_id}/crops\", response_model=list[CropOut])\ndef get_crops_for_farm(farm_id: int, db: Session = Depends(get_session)):\n    crops = get_crops_by_farm_id(farm_id, db)\n    if not crops:\n        raise HTTPException(status_code=404, detail=\"No crops found for this farm\")\n    return [CropOut(\n        id=c.id,\n        cropName=c.cropName,\n        varietyId=c.varietyId,",
        "detail": "src.routes.farmCropRoutes",
        "documentation": {}
    },
    {
        "label": "get_lots",
        "kind": 2,
        "importPath": "src.routes.farmLotRoutes",
        "description": "src.routes.farmLotRoutes",
        "peekOfCode": "def get_lots(farm_id: int, db: Session = Depends(get_db)):\n    return get_lots_by_farm(farm_id, db)",
        "detail": "src.routes.farmLotRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_LOT_ROUTES",
        "kind": 5,
        "importPath": "src.routes.farmLotRoutes",
        "description": "src.routes.farmLotRoutes",
        "peekOfCode": "FARM_LOT_ROUTES = APIRouter()\n@FARM_LOT_ROUTES.get(\"/farmlots/farm/{farm_id}\", response_model=list[FarmLotSchema])\ndef get_lots(farm_id: int, db: Session = Depends(get_db)):\n    return get_lots_by_farm(farm_id, db)",
        "detail": "src.routes.farmLotRoutes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "def register(farm: FarmSchema, session: Session = Depends(get_session)):\n    return createFarm(farm, session)\n@FARM_ROUTES.get('/farms', response_model=list[FarmSchema])\ndef allFarms(session: Session = Depends(get_session)):\n    return getAllFarms(session)\n@FARM_ROUTES.get('/farm/{farm_id}', response_model=FarmSchema)\ndef gotFarm(farm_id: int, session: Session = Depends(get_session)):\n    return getFarmById(farm_id, session)\n@FARM_ROUTES.put('/update/farm/{farm_id}')\ndef updaFarm(farm_id: int, farm: UpdateFarmSchema, session: Session = Depends(get_session)):",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "allFarms",
        "kind": 2,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "def allFarms(session: Session = Depends(get_session)):\n    return getAllFarms(session)\n@FARM_ROUTES.get('/farm/{farm_id}', response_model=FarmSchema)\ndef gotFarm(farm_id: int, session: Session = Depends(get_session)):\n    return getFarmById(farm_id, session)\n@FARM_ROUTES.put('/update/farm/{farm_id}')\ndef updaFarm(farm_id: int, farm: UpdateFarmSchema, session: Session = Depends(get_session)):\n    return updateFarm(farm_id, farm, session)\n@FARM_ROUTES.delete('/delete/farm/{farm_id}')\ndef removeFarm(farm_id: int, session: Session = Depends(get_session)):",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "gotFarm",
        "kind": 2,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "def gotFarm(farm_id: int, session: Session = Depends(get_session)):\n    return getFarmById(farm_id, session)\n@FARM_ROUTES.put('/update/farm/{farm_id}')\ndef updaFarm(farm_id: int, farm: UpdateFarmSchema, session: Session = Depends(get_session)):\n    return updateFarm(farm_id, farm, session)\n@FARM_ROUTES.delete('/delete/farm/{farm_id}')\ndef removeFarm(farm_id: int, session: Session = Depends(get_session)):\n    return deleteFarm(farm_id, session)",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "updaFarm",
        "kind": 2,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "def updaFarm(farm_id: int, farm: UpdateFarmSchema, session: Session = Depends(get_session)):\n    return updateFarm(farm_id, farm, session)\n@FARM_ROUTES.delete('/delete/farm/{farm_id}')\ndef removeFarm(farm_id: int, session: Session = Depends(get_session)):\n    return deleteFarm(farm_id, session)",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "removeFarm",
        "kind": 2,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "def removeFarm(farm_id: int, session: Session = Depends(get_session)):\n    return deleteFarm(farm_id, session)",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "FARM_ROUTES",
        "kind": 5,
        "importPath": "src.routes.farmRoutes",
        "description": "src.routes.farmRoutes",
        "peekOfCode": "FARM_ROUTES = APIRouter()\n@FARM_ROUTES.post('/register-farm')\ndef register(farm: FarmSchema, session: Session = Depends(get_session)):\n    return createFarm(farm, session)\n@FARM_ROUTES.get('/farms', response_model=list[FarmSchema])\ndef allFarms(session: Session = Depends(get_session)):\n    return getAllFarms(session)\n@FARM_ROUTES.get('/farm/{farm_id}', response_model=FarmSchema)\ndef gotFarm(farm_id: int, session: Session = Depends(get_session)):\n    return getFarmById(farm_id, session)",
        "detail": "src.routes.farmRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_additional_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_total_additional_costs(db: Session = Depends(get_db)):\n    total_additional_costs = calculate_total_additional_costs(db)\n    return {\"total_additional_costs\": total_additional_costs}\n@FINANCIAL_ROUTES.get(\"/financial/estimated-additional-costs\", response_model=TotalAdditionalCostsResponse)\ndef get_total_estimated_additional_costs(db: Session = Depends(get_db)):\n    total_estimated_additional_costs = calculate_total_estimated_additional_costs(db)\n    return {\"total_additional_costs\": total_estimated_additional_costs}  # Cambiado a total_additional_costs\n# Gastos Financieros (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/financial-expenses\", response_model=TotalFinancialExpensesResponse)\ndef get_total_financial_expenses(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_estimated_additional_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_total_estimated_additional_costs(db: Session = Depends(get_db)):\n    total_estimated_additional_costs = calculate_total_estimated_additional_costs(db)\n    return {\"total_additional_costs\": total_estimated_additional_costs}  # Cambiado a total_additional_costs\n# Gastos Financieros (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/financial-expenses\", response_model=TotalFinancialExpensesResponse)\ndef get_total_financial_expenses(db: Session = Depends(get_db)):\n    total_financial_expenses = calculate_total_financial_expenses(db)\n    return {\"total_financial_expenses\": total_financial_expenses}\n@FINANCIAL_ROUTES.get(\"/financial/estimated-financial-expenses\", response_model=TotalFinancialExpensesResponse)\ndef get_total_estimated_financial_expenses(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_financial_expenses",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_total_financial_expenses(db: Session = Depends(get_db)):\n    total_financial_expenses = calculate_total_financial_expenses(db)\n    return {\"total_financial_expenses\": total_financial_expenses}\n@FINANCIAL_ROUTES.get(\"/financial/estimated-financial-expenses\", response_model=TotalFinancialExpensesResponse)\ndef get_total_estimated_financial_expenses(db: Session = Depends(get_db)):\n    total_estimated_financial_expenses = calculate_total_estimated_financial_expenses(db)\n    return {\"total_financial_expenses\": total_estimated_financial_expenses}  # Cambiado a total_financial_expenses\n# Labores Culturales (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/real-labor-costs\", response_model=List[RealLaborCostsResponse])\ndef get_labor_costs(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_estimated_financial_expenses",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_total_estimated_financial_expenses(db: Session = Depends(get_db)):\n    total_estimated_financial_expenses = calculate_total_estimated_financial_expenses(db)\n    return {\"total_financial_expenses\": total_estimated_financial_expenses}  # Cambiado a total_financial_expenses\n# Labores Culturales (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/real-labor-costs\", response_model=List[RealLaborCostsResponse])\ndef get_labor_costs(db: Session = Depends(get_db)):\n    labor_costs = get_real_labor_costs(db)\n    return labor_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-labor-costs\", response_model=List[RealLaborCostsResponse])\ndef get_estimated_labor_costs_route(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_labor_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_labor_costs(db: Session = Depends(get_db)):\n    labor_costs = get_real_labor_costs(db)\n    return labor_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-labor-costs\", response_model=List[RealLaborCostsResponse])\ndef get_estimated_labor_costs_route(db: Session = Depends(get_db)):\n    estimated_labor_costs = get_estimated_labor_costs(db)  # Asegúrate de usar la función correcta del controlador\n    return estimated_labor_costs\n# Costos de Maquinaria (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/machinery-costs\", response_model=List[MachineryCostResponse])\ndef get_machinery_costs(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_estimated_labor_costs_route",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_estimated_labor_costs_route(db: Session = Depends(get_db)):\n    estimated_labor_costs = get_estimated_labor_costs(db)  # Asegúrate de usar la función correcta del controlador\n    return estimated_labor_costs\n# Costos de Maquinaria (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/machinery-costs\", response_model=List[MachineryCostResponse])\ndef get_machinery_costs(db: Session = Depends(get_db)):\n    machinery_costs = get_real_machinery_costs(db)\n    return machinery_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-machinery-costs\", response_model=List[MachineryCostResponse])\ndef get_estimated_machinery_costs(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_machinery_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_machinery_costs(db: Session = Depends(get_db)):\n    machinery_costs = get_real_machinery_costs(db)\n    return machinery_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-machinery-costs\", response_model=List[MachineryCostResponse])\ndef get_estimated_machinery_costs(db: Session = Depends(get_db)):\n    estimated_machinery_costs = get_estimated_machinery_costs_from_controller(db)  # Cambia el nombre aquí\n    return estimated_machinery_costs\n# Costos de Insumos Agrícolas (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/agricultural-input-costs\", response_model=List[AgriculturalInputCostsResponse])\ndef get_agricultural_input_costs(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_estimated_machinery_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_estimated_machinery_costs(db: Session = Depends(get_db)):\n    estimated_machinery_costs = get_estimated_machinery_costs_from_controller(db)  # Cambia el nombre aquí\n    return estimated_machinery_costs\n# Costos de Insumos Agrícolas (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/agricultural-input-costs\", response_model=List[AgriculturalInputCostsResponse])\ndef get_agricultural_input_costs(db: Session = Depends(get_db)):\n    agricultural_input_costs = get_real_agricultural_input_costs(db)\n    return agricultural_input_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-agricultural-input-costs\", response_model=List[AgriculturalInputCostsResponse])\ndef get_estimated_agricultural_input_costs_route(db: Session = Depends(get_db)):",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_agricultural_input_costs",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_agricultural_input_costs(db: Session = Depends(get_db)):\n    agricultural_input_costs = get_real_agricultural_input_costs(db)\n    return agricultural_input_costs\n@FINANCIAL_ROUTES.get(\"/financial/estimated-agricultural-input-costs\", response_model=List[AgriculturalInputCostsResponse])\ndef get_estimated_agricultural_input_costs_route(db: Session = Depends(get_db)):\n    estimated_agricultural_input_costs = get_estimated_agricultural_input_costs(db)  # Llama la función del controlador\n    return estimated_agricultural_input_costs",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "get_estimated_agricultural_input_costs_route",
        "kind": 2,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "def get_estimated_agricultural_input_costs_route(db: Session = Depends(get_db)):\n    estimated_agricultural_input_costs = get_estimated_agricultural_input_costs(db)  # Llama la función del controlador\n    return estimated_agricultural_input_costs",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "FINANCIAL_ROUTES",
        "kind": 5,
        "importPath": "src.routes.financialRoutes",
        "description": "src.routes.financialRoutes",
        "peekOfCode": "FINANCIAL_ROUTES = APIRouter()\n# Costos Adicionales (Reales y Estimados)\n@FINANCIAL_ROUTES.get(\"/financial/additional-costs\", response_model=TotalAdditionalCostsResponse)\ndef get_total_additional_costs(db: Session = Depends(get_db)):\n    total_additional_costs = calculate_total_additional_costs(db)\n    return {\"total_additional_costs\": total_additional_costs}\n@FINANCIAL_ROUTES.get(\"/financial/estimated-additional-costs\", response_model=TotalAdditionalCostsResponse)\ndef get_total_estimated_additional_costs(db: Session = Depends(get_db)):\n    total_estimated_additional_costs = calculate_total_estimated_additional_costs(db)\n    return {\"total_additional_costs\": total_estimated_additional_costs}  # Cambiado a total_additional_costs",
        "detail": "src.routes.financialRoutes",
        "documentation": {}
    },
    {
        "label": "list_harvests_by_crop",
        "kind": 2,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "def list_harvests_by_crop(cultivo_id: int, db: Session = Depends(get_session)):\n    try:\n        return get_all_harvests_by_crop(db, cultivo_id)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n@HARVEST_ROUTES.get(\"/harvest/{cultivo_id}/{cosecha_id}\")\ndef retrieve_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):\n    try:\n        return get_harvest(db, cultivo_id, cosecha_id)\n    except ValueError as e:",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "retrieve_harvest",
        "kind": 2,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "def retrieve_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):\n    try:\n        return get_harvest(db, cultivo_id, cosecha_id)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n@HARVEST_ROUTES.post(\"/harvest/\", response_model=HarvestOut)\ndef create_new_harvest(harvest_data: HarvestCreate, db: Session = Depends(get_session)):\n    try:\n        return create_harvest(db, harvest_data.dict())\n    except ValueError as e:",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "create_new_harvest",
        "kind": 2,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "def create_new_harvest(harvest_data: HarvestCreate, db: Session = Depends(get_session)):\n    try:\n        return create_harvest(db, harvest_data.dict())\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n@HARVEST_ROUTES.put(\"/harvest/{cultivo_id}/{cosecha_id}\", response_model=HarvestOut)\ndef modify_harvest(cultivo_id: int, cosecha_id: int, update_data: HarvestUpdate, db: Session = Depends(get_session)):\n    return update_harvest(db, cultivo_id, cosecha_id, update_data.dict(exclude_unset=True))\n@HARVEST_ROUTES.delete(\"/harvest/{cultivo_id}/{cosecha_id}\")\ndef remove_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "modify_harvest",
        "kind": 2,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "def modify_harvest(cultivo_id: int, cosecha_id: int, update_data: HarvestUpdate, db: Session = Depends(get_session)):\n    return update_harvest(db, cultivo_id, cosecha_id, update_data.dict(exclude_unset=True))\n@HARVEST_ROUTES.delete(\"/harvest/{cultivo_id}/{cosecha_id}\")\ndef remove_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):\n    try:\n        return delete_harvest(db, cultivo_id, cosecha_id)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "remove_harvest",
        "kind": 2,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "def remove_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):\n    try:\n        return delete_harvest(db, cultivo_id, cosecha_id)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "HARVEST_ROUTES",
        "kind": 5,
        "importPath": "src.routes.harvestRoute",
        "description": "src.routes.harvestRoute",
        "peekOfCode": "HARVEST_ROUTES = APIRouter()\n@HARVEST_ROUTES.get(\"/harvest/crops/{cultivo_id}\")\ndef list_harvests_by_crop(cultivo_id: int, db: Session = Depends(get_session)):\n    try:\n        return get_all_harvests_by_crop(db, cultivo_id)\n    except ValueError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n@HARVEST_ROUTES.get(\"/harvest/{cultivo_id}/{cosecha_id}\")\ndef retrieve_harvest(cultivo_id: int, cosecha_id: int, db: Session = Depends(get_session)):\n    try:",
        "detail": "src.routes.harvestRoute",
        "documentation": {}
    },
    {
        "label": "LABOR_CULTURAL_ROUTES",
        "kind": 5,
        "importPath": "src.routes.laborCulturalRoutes",
        "description": "src.routes.laborCulturalRoutes",
        "peekOfCode": "LABOR_CULTURAL_ROUTES = APIRouter()\n# Crear una nueva labor cultural\n@LABOR_CULTURAL_ROUTES.post(\"/labor-cultural/create\", response_model=LaborCulturalResponse)\nasync def create_labor(labor: LaborCulturalCreate, db: Session = Depends(get_db)):\n    return create_labor_cultural(labor, db)\n# Obtener todas las labores culturales\n@LABOR_CULTURAL_ROUTES.get(\"/labor-cultural/read\", response_model=list[LaborCulturalResponse])\nasync def read_labors(db: Session = Depends(get_db)):\n    return get_labores_culturales(db)\n# Obtener una labor cultural por ID",
        "detail": "src.routes.laborCulturalRoutes",
        "documentation": {}
    },
    {
        "label": "getCrops",
        "kind": 2,
        "importPath": "src.routes.landCropRoutes",
        "description": "src.routes.landCropRoutes",
        "peekOfCode": "def getCrops(landId: int, db: Session = Depends(get_db)):\n    return getCropsByLandId(landId, db)",
        "detail": "src.routes.landCropRoutes",
        "documentation": {}
    },
    {
        "label": "LAND_CROP_ROUTES",
        "kind": 5,
        "importPath": "src.routes.landCropRoutes",
        "description": "src.routes.landCropRoutes",
        "peekOfCode": "LAND_CROP_ROUTES = APIRouter()\n@LAND_CROP_ROUTES.get(\"/land/{landId}\", response_model=list[CropOut])  # Cambiar a CropOut\ndef getCrops(landId: int, db: Session = Depends(get_db)):\n    return getCropsByLandId(landId, db)",
        "detail": "src.routes.landCropRoutes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def register(land: LandSchema, session: Session = Depends(get_session)):\n    return createLand(land, session)\n@LAND_ROUTES.get('/lands', response_model=list[LandSchema])\ndef listLands(session: Session = Depends(get_session)):\n    return getAllLands(session)\n@LAND_ROUTES.get('/land/{land_id}', response_model=LandSchema)\ndef getLote(land_id: int, session: Session = Depends(get_session)):\n    return getLandById(land_id, session)\n@LAND_ROUTES.put('/update/land/{land_id}')\ndef updLand(land_id: int, land: UpdateLandSchema, session: Session = Depends(get_session)):",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "listLands",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def listLands(session: Session = Depends(get_session)):\n    return getAllLands(session)\n@LAND_ROUTES.get('/land/{land_id}', response_model=LandSchema)\ndef getLote(land_id: int, session: Session = Depends(get_session)):\n    return getLandById(land_id, session)\n@LAND_ROUTES.put('/update/land/{land_id}')\ndef updLand(land_id: int, land: UpdateLandSchema, session: Session = Depends(get_session)):\n    return updateLand(land_id, land, session)\n@LAND_ROUTES.delete('/delete/land/{land_id}')\ndef removeLand(land_id: int, session: Session = Depends(get_session)):",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "getLote",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def getLote(land_id: int, session: Session = Depends(get_session)):\n    return getLandById(land_id, session)\n@LAND_ROUTES.put('/update/land/{land_id}')\ndef updLand(land_id: int, land: UpdateLandSchema, session: Session = Depends(get_session)):\n    return updateLand(land_id, land, session)\n@LAND_ROUTES.delete('/delete/land/{land_id}')\ndef removeLand(land_id: int, session: Session = Depends(get_session)):\n    return deleteLand(land_id, session)\n# Nuevo endpoint para calcular el arriendo total\n@LAND_ROUTES.get('/lands/{plot_id}/total-rent')",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "updLand",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def updLand(land_id: int, land: UpdateLandSchema, session: Session = Depends(get_session)):\n    return updateLand(land_id, land, session)\n@LAND_ROUTES.delete('/delete/land/{land_id}')\ndef removeLand(land_id: int, session: Session = Depends(get_session)):\n    return deleteLand(land_id, session)\n# Nuevo endpoint para calcular el arriendo total\n@LAND_ROUTES.get('/lands/{plot_id}/total-rent')\ndef get_total_rent(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_total_rent(plot_id, session)\n#costos de maquinaria y mano de obra cultural",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "removeLand",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def removeLand(land_id: int, session: Session = Depends(get_session)):\n    return deleteLand(land_id, session)\n# Nuevo endpoint para calcular el arriendo total\n@LAND_ROUTES.get('/lands/{plot_id}/total-rent')\ndef get_total_rent(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_total_rent(plot_id, session)\n#costos de maquinaria y mano de obra cultural\n@LAND_ROUTES.get('/lands/{plot_id}/machinery-and-labor-costs')\ndef get_machinery_and_labor_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_machinery_and_labor_costs(plot_id, session)",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_rent",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def get_total_rent(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_total_rent(plot_id, session)\n#costos de maquinaria y mano de obra cultural\n@LAND_ROUTES.get('/lands/{plot_id}/machinery-and-labor-costs')\ndef get_machinery_and_labor_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_machinery_and_labor_costs(plot_id, session)\n#Costos de insumos agricolas \n@LAND_ROUTES.get('/lands/{plot_id}/agricultural-input-costs')\ndef get_agricultural_input_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_agricultural_input_costs(plot_id, session)",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "get_machinery_and_labor_costs",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def get_machinery_and_labor_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_machinery_and_labor_costs(plot_id, session)\n#Costos de insumos agricolas \n@LAND_ROUTES.get('/lands/{plot_id}/agricultural-input-costs')\ndef get_agricultural_input_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_agricultural_input_costs(plot_id, session)",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "get_agricultural_input_costs",
        "kind": 2,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "def get_agricultural_input_costs(plot_id: int, session: Session = Depends(get_session)):\n    return calculate_agricultural_input_costs(plot_id, session)",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "LAND_ROUTES",
        "kind": 5,
        "importPath": "src.routes.landRoutes",
        "description": "src.routes.landRoutes",
        "peekOfCode": "LAND_ROUTES = APIRouter()\n@LAND_ROUTES.post('/register-land')\ndef register(land: LandSchema, session: Session = Depends(get_session)):\n    return createLand(land, session)\n@LAND_ROUTES.get('/lands', response_model=list[LandSchema])\ndef listLands(session: Session = Depends(get_session)):\n    return getAllLands(session)\n@LAND_ROUTES.get('/land/{land_id}', response_model=LandSchema)\ndef getLote(land_id: int, session: Session = Depends(get_session)):\n    return getLandById(land_id, session)",
        "detail": "src.routes.landRoutes",
        "documentation": {}
    },
    {
        "label": "create_machinery_route",
        "kind": 2,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "def create_machinery_route(machinery: MaquinariaAgricolaCreate, db: Session = Depends(get_db)):\n    return create_machinery(machinery, db)\n# Obtener una maquinaria por ID\n@MACHINERY_ROUTES.get(\"/machinery/{machinery_id}\", response_model=MaquinariaAgricola)\ndef get_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    db_machinery = get_machinery(machinery_id, db)\n    if db_machinery is None:\n        raise HTTPException(status_code=404, detail=\"Machinery not found\")\n    return db_machinery\n# Obtener todas las maquinarias",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "get_machinery_route",
        "kind": 2,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "def get_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    db_machinery = get_machinery(machinery_id, db)\n    if db_machinery is None:\n        raise HTTPException(status_code=404, detail=\"Machinery not found\")\n    return db_machinery\n# Obtener todas las maquinarias\n@MACHINERY_ROUTES.get(\"/machineries/\", response_model=list[MaquinariaAgricola])\ndef get_all_machineries_route(db: Session = Depends(get_db)):\n    return get_all_machineries(db)\n# Actualizar una maquinaria",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "get_all_machineries_route",
        "kind": 2,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "def get_all_machineries_route(db: Session = Depends(get_db)):\n    return get_all_machineries(db)\n# Actualizar una maquinaria\n@MACHINERY_ROUTES.put(\"/machinery/{machinery_id}\", response_model=MaquinariaAgricola)\ndef update_machinery_route(machinery_id: int, machinery: MaquinariaAgricolaUpdate, db: Session = Depends(get_db)):\n    return update_machinery(machinery_id, machinery, db)\n# Eliminar una maquinaria\n@MACHINERY_ROUTES.delete(\"/machinery/{machinery_id}\", response_model=dict)\ndef delete_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    return delete_machinery(machinery_id, db)",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "update_machinery_route",
        "kind": 2,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "def update_machinery_route(machinery_id: int, machinery: MaquinariaAgricolaUpdate, db: Session = Depends(get_db)):\n    return update_machinery(machinery_id, machinery, db)\n# Eliminar una maquinaria\n@MACHINERY_ROUTES.delete(\"/machinery/{machinery_id}\", response_model=dict)\ndef delete_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    return delete_machinery(machinery_id, db)",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "delete_machinery_route",
        "kind": 2,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "def delete_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    return delete_machinery(machinery_id, db)",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "MACHINERY_ROUTES",
        "kind": 5,
        "importPath": "src.routes.machineryRoutes",
        "description": "src.routes.machineryRoutes",
        "peekOfCode": "MACHINERY_ROUTES = APIRouter()\n# Crear una nueva maquinaria\n@MACHINERY_ROUTES.post(\"/machinery/\", response_model=MaquinariaAgricola, status_code=status.HTTP_201_CREATED)\ndef create_machinery_route(machinery: MaquinariaAgricolaCreate, db: Session = Depends(get_db)):\n    return create_machinery(machinery, db)\n# Obtener una maquinaria por ID\n@MACHINERY_ROUTES.get(\"/machinery/{machinery_id}\", response_model=MaquinariaAgricola)\ndef get_machinery_route(machinery_id: int, db: Session = Depends(get_db)):\n    db_machinery = get_machinery(machinery_id, db)\n    if db_machinery is None:",
        "detail": "src.routes.machineryRoutes",
        "documentation": {}
    },
    {
        "label": "create_monitoring_route",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def create_monitoring_route(monitoring: MonitoringCreate, db: Session = Depends(get_db)):\n    return create_monitoring(db, monitoring)\n@MONITORING_ROUTES.get(\"/monitoring/\", response_model=list[MonitoringOut])\ndef read_monitorings(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):\n    return get_monitorings(db, skip, limit)\n@MONITORING_ROUTES.get(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef read_monitoring(monitoring_id: int, db: Session = Depends(get_db)):\n    return get_monitoring(db, monitoring_id)\n@MONITORING_ROUTES.put(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef update_monitoring_route(monitoring_id: int, monitoring: MonitoringUpdate, db: Session = Depends(get_db)):",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "read_monitorings",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def read_monitorings(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):\n    return get_monitorings(db, skip, limit)\n@MONITORING_ROUTES.get(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef read_monitoring(monitoring_id: int, db: Session = Depends(get_db)):\n    return get_monitoring(db, monitoring_id)\n@MONITORING_ROUTES.put(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef update_monitoring_route(monitoring_id: int, monitoring: MonitoringUpdate, db: Session = Depends(get_db)):\n    updated_monitoring = update_monitoring(db, monitoring_id, monitoring)\n    return updated_monitoring\n@MONITORING_ROUTES.delete(\"/monitoring/{monitoring_id}\", status_code=status.HTTP_200_OK)",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "read_monitoring",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def read_monitoring(monitoring_id: int, db: Session = Depends(get_db)):\n    return get_monitoring(db, monitoring_id)\n@MONITORING_ROUTES.put(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef update_monitoring_route(monitoring_id: int, monitoring: MonitoringUpdate, db: Session = Depends(get_db)):\n    updated_monitoring = update_monitoring(db, monitoring_id, monitoring)\n    return updated_monitoring\n@MONITORING_ROUTES.delete(\"/monitoring/{monitoring_id}\", status_code=status.HTTP_200_OK)\ndef delete_monitoring_route(monitoring_id: int, db: Session = Depends(get_db)):\n    return delete_monitoring(db, monitoring_id)\n# Ruta para obtener monitoreos específicos de un cultivo mediante `crop_id`",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "update_monitoring_route",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def update_monitoring_route(monitoring_id: int, monitoring: MonitoringUpdate, db: Session = Depends(get_db)):\n    updated_monitoring = update_monitoring(db, monitoring_id, monitoring)\n    return updated_monitoring\n@MONITORING_ROUTES.delete(\"/monitoring/{monitoring_id}\", status_code=status.HTTP_200_OK)\ndef delete_monitoring_route(monitoring_id: int, db: Session = Depends(get_db)):\n    return delete_monitoring(db, monitoring_id)\n# Ruta para obtener monitoreos específicos de un cultivo mediante `crop_id`\n@MONITORING_ROUTES.get(\"/monitoring/by_crop/{crop_id}\", response_model=list[MonitoringOut])\ndef get_monitorings_by_crop_route(crop_id: int, db: Session = Depends(get_db)):\n    return get_monitorings_by_crop(db, crop_id)",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "delete_monitoring_route",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def delete_monitoring_route(monitoring_id: int, db: Session = Depends(get_db)):\n    return delete_monitoring(db, monitoring_id)\n# Ruta para obtener monitoreos específicos de un cultivo mediante `crop_id`\n@MONITORING_ROUTES.get(\"/monitoring/by_crop/{crop_id}\", response_model=list[MonitoringOut])\ndef get_monitorings_by_crop_route(crop_id: int, db: Session = Depends(get_db)):\n    return get_monitorings_by_crop(db, crop_id)",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "get_monitorings_by_crop_route",
        "kind": 2,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "def get_monitorings_by_crop_route(crop_id: int, db: Session = Depends(get_db)):\n    return get_monitorings_by_crop(db, crop_id)",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "MONITORING_ROUTES",
        "kind": 5,
        "importPath": "src.routes.monitoringRoutes",
        "description": "src.routes.monitoringRoutes",
        "peekOfCode": "MONITORING_ROUTES = APIRouter()\n@MONITORING_ROUTES.post(\"/monitoring/\", response_model=MonitoringOut, status_code=status.HTTP_201_CREATED)\ndef create_monitoring_route(monitoring: MonitoringCreate, db: Session = Depends(get_db)):\n    return create_monitoring(db, monitoring)\n@MONITORING_ROUTES.get(\"/monitoring/\", response_model=list[MonitoringOut])\ndef read_monitorings(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):\n    return get_monitorings(db, skip, limit)\n@MONITORING_ROUTES.get(\"/monitoring/{monitoring_id}\", response_model=MonitoringOut)\ndef read_monitoring(monitoring_id: int, db: Session = Depends(get_db)):\n    return get_monitoring(db, monitoring_id)",
        "detail": "src.routes.monitoringRoutes",
        "documentation": {}
    },
    {
        "label": "create_operation_mechanization",
        "kind": 2,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "def create_operation_mechanization(operation: OpMechCreate, db: Session = Depends(get_db)):\n    return create_op_mech(operation, db)\n# Obtener una operación mecanización por ID\n@OP_MECH_ROUTES.get(\"/operation-mechanization/{op_mech_id}\", response_model=OpMechResponse)\ndef read_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    db_op_mech = get_op_mech_by_id(op_mech_id, db)\n    if db_op_mech is None:\n        raise HTTPException(status_code=404, detail=\"Operación mecanización no encontrada\")\n    return db_op_mech\n# Obtener todas las operaciones mecanización",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "read_operation_mechanization",
        "kind": 2,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "def read_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    db_op_mech = get_op_mech_by_id(op_mech_id, db)\n    if db_op_mech is None:\n        raise HTTPException(status_code=404, detail=\"Operación mecanización no encontrada\")\n    return db_op_mech\n# Obtener todas las operaciones mecanización\n@OP_MECH_ROUTES.get(\"/operation-mechanizations/\", response_model=list[OpMechResponse])\ndef read_all_operation_mechanizations(db: Session = Depends(get_db)):\n    return get_all_op_mechs(db)\n# Actualizar una operación mecanización",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "read_all_operation_mechanizations",
        "kind": 2,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "def read_all_operation_mechanizations(db: Session = Depends(get_db)):\n    return get_all_op_mechs(db)\n# Actualizar una operación mecanización\n@OP_MECH_ROUTES.put(\"/operation-mechanization/{op_mech_id}\", response_model=OpMechCreate)\ndef update_operation_mechanization(op_mech_id: int, operation: OpMechUpdate, db: Session = Depends(get_db)):\n    return update_op_mech(op_mech_id, operation, db)\n# Eliminar una operación mecanización\n@OP_MECH_ROUTES.delete(\"/operation-mechanization/{op_mech_id}\", response_model=dict)\ndef delete_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    return delete_op_mech(op_mech_id, db)",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "update_operation_mechanization",
        "kind": 2,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "def update_operation_mechanization(op_mech_id: int, operation: OpMechUpdate, db: Session = Depends(get_db)):\n    return update_op_mech(op_mech_id, operation, db)\n# Eliminar una operación mecanización\n@OP_MECH_ROUTES.delete(\"/operation-mechanization/{op_mech_id}\", response_model=dict)\ndef delete_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    return delete_op_mech(op_mech_id, db)",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "delete_operation_mechanization",
        "kind": 2,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "def delete_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    return delete_op_mech(op_mech_id, db)",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "OP_MECH_ROUTES",
        "kind": 5,
        "importPath": "src.routes.opMechRoutes",
        "description": "src.routes.opMechRoutes",
        "peekOfCode": "OP_MECH_ROUTES = APIRouter()\n# Crear una nueva operación mecanización\n@OP_MECH_ROUTES.post(\"/operation-mechanization/\", response_model=OpMechCreate)\ndef create_operation_mechanization(operation: OpMechCreate, db: Session = Depends(get_db)):\n    return create_op_mech(operation, db)\n# Obtener una operación mecanización por ID\n@OP_MECH_ROUTES.get(\"/operation-mechanization/{op_mech_id}\", response_model=OpMechResponse)\ndef read_operation_mechanization(op_mech_id: int, db: Session = Depends(get_db)):\n    db_op_mech = get_op_mech_by_id(op_mech_id, db)\n    if db_op_mech is None:",
        "detail": "src.routes.opMechRoutes",
        "documentation": {}
    },
    {
        "label": "changeUserPassword",
        "kind": 2,
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "peekOfCode": "def changeUserPassword(request: ChangePassword, db: Session = Depends(get_session)):\n    return changePassword(request, db)\n# RECUPERACION\n# Enviar token de recuperacion al email\n@PASSWORD_RESET_ROUTES.post(\"/password-reset/request\")\ndef requestPasswordResetRoute(request: PasswordResetRequest, session: Session = Depends(get_session)):\n    return requestPasswordReset(request, session)\n# Valida el token de recuperacion existente\n@PASSWORD_RESET_ROUTES.get(\"/Reset_Password/{token}\", response_class=HTMLResponse)\ndef reset_password_page_route(token: str):",
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "requestPasswordResetRoute",
        "kind": 2,
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "peekOfCode": "def requestPasswordResetRoute(request: PasswordResetRequest, session: Session = Depends(get_session)):\n    return requestPasswordReset(request, session)\n# Valida el token de recuperacion existente\n@PASSWORD_RESET_ROUTES.get(\"/Reset_Password/{token}\", response_class=HTMLResponse)\ndef reset_password_page_route(token: str):\n    # Verificamos el token antes de mostrar la página\n    token_data = verify_password_reset_token(token)\n    if token_data is None:\n        # Si el token no es válido o ha expirado, lanzamos una excepción\n        raise HTTPException(",
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "reset_password_page_route",
        "kind": 2,
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "peekOfCode": "def reset_password_page_route(token: str):\n    # Verificamos el token antes de mostrar la página\n    token_data = verify_password_reset_token(token)\n    if token_data is None:\n        # Si el token no es válido o ha expirado, lanzamos una excepción\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid or expired token\"\n        )\n    # Si el token es válido, mostramos la página de restablecimiento",
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "updatePasswordRoute",
        "kind": 2,
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "peekOfCode": "def updatePasswordRoute(token: str = Form(...), new_password: str = Form(...), session: Session = Depends(get_session)):\n    return updatePassword(token, PasswordUpdate(new_password=new_password), session)",
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_ROUTES",
        "kind": 5,
        "importPath": "src.routes.passwordResetRoutes",
        "description": "src.routes.passwordResetRoutes",
        "peekOfCode": "PASSWORD_RESET_ROUTES = APIRouter()\n# Cambio de contraseña\n@PASSWORD_RESET_ROUTES.post('/change-password')\ndef changeUserPassword(request: ChangePassword, db: Session = Depends(get_session)):\n    return changePassword(request, db)\n# RECUPERACION\n# Enviar token de recuperacion al email\n@PASSWORD_RESET_ROUTES.post(\"/password-reset/request\")\ndef requestPasswordResetRoute(request: PasswordResetRequest, session: Session = Depends(get_session)):\n    return requestPasswordReset(request, session)",
        "detail": "src.routes.passwordResetRoutes",
        "documentation": {}
    },
    {
        "label": "get_all_permissions_route",
        "kind": 2,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "def get_all_permissions_route(db: Session = Depends(get_session)):\n    return get_all_permissions(db)\n@PERMISSION_ROUTES.post(\"/permissions/create\", response_model=PermissionSchema)\ndef createPermissionRoute(permission: CreatePermission, session: Session = Depends(get_session)):\n    return createPermission(permission, session)\n@PERMISSION_ROUTES.get(\"/permissions/{id}\", response_model=PermissionSchema)\ndef getPermissionRoute(id: int, session: Session = Depends(get_session)):  # Cambia `permission_id` a `id` para coincidir con el parámetro\n    return getPermission(id, session)\n@PERMISSION_ROUTES.put(\"/permissions/update/{id}\", response_model=PermissionSchema)\ndef updatePermissionRoute(id: int, permission: UpdatePermission, session: Session = Depends(get_session)):",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "createPermissionRoute",
        "kind": 2,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "def createPermissionRoute(permission: CreatePermission, session: Session = Depends(get_session)):\n    return createPermission(permission, session)\n@PERMISSION_ROUTES.get(\"/permissions/{id}\", response_model=PermissionSchema)\ndef getPermissionRoute(id: int, session: Session = Depends(get_session)):  # Cambia `permission_id` a `id` para coincidir con el parámetro\n    return getPermission(id, session)\n@PERMISSION_ROUTES.put(\"/permissions/update/{id}\", response_model=PermissionSchema)\ndef updatePermissionRoute(id: int, permission: UpdatePermission, session: Session = Depends(get_session)):\n    return updatePermission(id, permission, session)\n@PERMISSION_ROUTES.delete(\"/permissions/delete/{id}\")\ndef deletePermissionRoute(id: int, session: Session = Depends(get_session)):",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "getPermissionRoute",
        "kind": 2,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "def getPermissionRoute(id: int, session: Session = Depends(get_session)):  # Cambia `permission_id` a `id` para coincidir con el parámetro\n    return getPermission(id, session)\n@PERMISSION_ROUTES.put(\"/permissions/update/{id}\", response_model=PermissionSchema)\ndef updatePermissionRoute(id: int, permission: UpdatePermission, session: Session = Depends(get_session)):\n    return updatePermission(id, permission, session)\n@PERMISSION_ROUTES.delete(\"/permissions/delete/{id}\")\ndef deletePermissionRoute(id: int, session: Session = Depends(get_session)):\n    return deletePermission(id, session)",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "updatePermissionRoute",
        "kind": 2,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "def updatePermissionRoute(id: int, permission: UpdatePermission, session: Session = Depends(get_session)):\n    return updatePermission(id, permission, session)\n@PERMISSION_ROUTES.delete(\"/permissions/delete/{id}\")\ndef deletePermissionRoute(id: int, session: Session = Depends(get_session)):\n    return deletePermission(id, session)",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "deletePermissionRoute",
        "kind": 2,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "def deletePermissionRoute(id: int, session: Session = Depends(get_session)):\n    return deletePermission(id, session)",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "PERMISSION_ROUTES",
        "kind": 5,
        "importPath": "src.routes.permissionRouter",
        "description": "src.routes.permissionRouter",
        "peekOfCode": "PERMISSION_ROUTES = APIRouter()\n@PERMISSION_ROUTES.get(\"/permissions\", response_model=dict)\ndef get_all_permissions_route(db: Session = Depends(get_session)):\n    return get_all_permissions(db)\n@PERMISSION_ROUTES.post(\"/permissions/create\", response_model=PermissionSchema)\ndef createPermissionRoute(permission: CreatePermission, session: Session = Depends(get_session)):\n    return createPermission(permission, session)\n@PERMISSION_ROUTES.get(\"/permissions/{id}\", response_model=PermissionSchema)\ndef getPermissionRoute(id: int, session: Session = Depends(get_session)):  # Cambia `permission_id` a `id` para coincidir con el parámetro\n    return getPermission(id, session)",
        "detail": "src.routes.permissionRouter",
        "documentation": {}
    },
    {
        "label": "get_stages_route",
        "kind": 2,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "def get_stages_route(db: Session = Depends(get_session)):\n    return get_all_phenological_stages(db)\n@PHENOLOGICAL_STAGE_ROUTES.get(\"/phenological-stages/{stage_id}\", response_model=PhenologicalStageResponse)\ndef get_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return get_phenological_stage(stage_id, db)\n@PHENOLOGICAL_STAGE_ROUTES.post(\"/phenological-stages\", response_model=PhenologicalStageResponse)\ndef create_stage_route(stage_data: PhenologicalStageCreate, db: Session = Depends(get_session)):\n    return create_phenological_stage(stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.put(\"/phenological-stages/{stage_id}\", response_model=PhenologicalStageResponse)\ndef update_stage_route(stage_id: int, stage_data: PhenologicalStageUpdate, db: Session = Depends(get_session)):",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "get_stage_route",
        "kind": 2,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "def get_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return get_phenological_stage(stage_id, db)\n@PHENOLOGICAL_STAGE_ROUTES.post(\"/phenological-stages\", response_model=PhenologicalStageResponse)\ndef create_stage_route(stage_data: PhenologicalStageCreate, db: Session = Depends(get_session)):\n    return create_phenological_stage(stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.put(\"/phenological-stages/{stage_id}\", response_model=PhenologicalStageResponse)\ndef update_stage_route(stage_id: int, stage_data: PhenologicalStageUpdate, db: Session = Depends(get_session)):\n    return update_phenological_stage(stage_id, stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.delete(\"/phenological-stages/{stage_id}\", response_model=dict)\ndef delete_stage_route(stage_id: int, db: Session = Depends(get_session)):",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "create_stage_route",
        "kind": 2,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "def create_stage_route(stage_data: PhenologicalStageCreate, db: Session = Depends(get_session)):\n    return create_phenological_stage(stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.put(\"/phenological-stages/{stage_id}\", response_model=PhenologicalStageResponse)\ndef update_stage_route(stage_id: int, stage_data: PhenologicalStageUpdate, db: Session = Depends(get_session)):\n    return update_phenological_stage(stage_id, stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.delete(\"/phenological-stages/{stage_id}\", response_model=dict)\ndef delete_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return delete_phenological_stage(stage_id, db)",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "update_stage_route",
        "kind": 2,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "def update_stage_route(stage_id: int, stage_data: PhenologicalStageUpdate, db: Session = Depends(get_session)):\n    return update_phenological_stage(stage_id, stage_data, db)\n@PHENOLOGICAL_STAGE_ROUTES.delete(\"/phenological-stages/{stage_id}\", response_model=dict)\ndef delete_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return delete_phenological_stage(stage_id, db)",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "delete_stage_route",
        "kind": 2,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "def delete_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return delete_phenological_stage(stage_id, db)",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "PHENOLOGICAL_STAGE_ROUTES",
        "kind": 5,
        "importPath": "src.routes.phenologicalStageRoutes",
        "description": "src.routes.phenologicalStageRoutes",
        "peekOfCode": "PHENOLOGICAL_STAGE_ROUTES = APIRouter()\n@PHENOLOGICAL_STAGE_ROUTES.get(\"/phenological-stages\", response_model=list[PhenologicalStageResponse])\ndef get_stages_route(db: Session = Depends(get_session)):\n    return get_all_phenological_stages(db)\n@PHENOLOGICAL_STAGE_ROUTES.get(\"/phenological-stages/{stage_id}\", response_model=PhenologicalStageResponse)\ndef get_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    return get_phenological_stage(stage_id, db)\n@PHENOLOGICAL_STAGE_ROUTES.post(\"/phenological-stages\", response_model=PhenologicalStageResponse)\ndef create_stage_route(stage_data: PhenologicalStageCreate, db: Session = Depends(get_session)):\n    return create_phenological_stage(stage_data, db)",
        "detail": "src.routes.phenologicalStageRoutes",
        "documentation": {}
    },
    {
        "label": "list_inputs",
        "kind": 2,
        "importPath": "src.routes.preciosinsumoRoutes",
        "description": "src.routes.preciosinsumoRoutes",
        "peekOfCode": "def list_inputs(cultivo_id: int, session: Session = Depends(get_session)):\n    return get_inputs_by_crop(cultivo_id, session)\n#dar el costo total de todos los insumos\n@router.get(\"/cultivos/{cultivo_id}/insumos/total-cost\", tags=[\"Insumos\"])\ndef get_total_cost(cultivo_id: int, session: Session = Depends(get_session)):\n    \"\"\"\n    Retorna el costo total de todos los insumos relacionados con un cultivo.\n    \"\"\"\n    return get_total_input_cost_by_crop(cultivo_id, session)\n#filtro para listar insumos, mediante nombres de insumos va filtrando",
        "detail": "src.routes.preciosinsumoRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_cost",
        "kind": 2,
        "importPath": "src.routes.preciosinsumoRoutes",
        "description": "src.routes.preciosinsumoRoutes",
        "peekOfCode": "def get_total_cost(cultivo_id: int, session: Session = Depends(get_session)):\n    \"\"\"\n    Retorna el costo total de todos los insumos relacionados con un cultivo.\n    \"\"\"\n    return get_total_input_cost_by_crop(cultivo_id, session)\n#filtro para listar insumos, mediante nombres de insumos va filtrando\n@router.get(\"/cultivos/{cultivo_id}/insumos/search\", response_model=List[AgriculturalInputWithTipoSchema])\ndef search_inputs_by_partial_name(cultivo_id: int, concepto: str, session: Session = Depends(get_session)):\n    return get_inputs_by_crop_and_partial_name(cultivo_id, concepto, session)",
        "detail": "src.routes.preciosinsumoRoutes",
        "documentation": {}
    },
    {
        "label": "search_inputs_by_partial_name",
        "kind": 2,
        "importPath": "src.routes.preciosinsumoRoutes",
        "description": "src.routes.preciosinsumoRoutes",
        "peekOfCode": "def search_inputs_by_partial_name(cultivo_id: int, concepto: str, session: Session = Depends(get_session)):\n    return get_inputs_by_crop_and_partial_name(cultivo_id, concepto, session)",
        "detail": "src.routes.preciosinsumoRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.preciosinsumoRoutes",
        "description": "src.routes.preciosinsumoRoutes",
        "peekOfCode": "router = APIRouter()\n#lista todos los insumos que se han usado en el cultivo\n@router.get(\"/cultivos/{cultivo_id}/insumos\", response_model=List[AgriculturalInputWithTipoSchema])\ndef list_inputs(cultivo_id: int, session: Session = Depends(get_session)):\n    return get_inputs_by_crop(cultivo_id, session)\n#dar el costo total de todos los insumos\n@router.get(\"/cultivos/{cultivo_id}/insumos/total-cost\", tags=[\"Insumos\"])\ndef get_total_cost(cultivo_id: int, session: Session = Depends(get_session)):\n    \"\"\"\n    Retorna el costo total de todos los insumos relacionados con un cultivo.",
        "detail": "src.routes.preciosinsumoRoutes",
        "documentation": {}
    },
    {
        "label": "read_diagnostics_history",
        "kind": 2,
        "importPath": "src.routes.predictionRoutes",
        "description": "src.routes.predictionRoutes",
        "peekOfCode": "def read_diagnostics_history(cultivo_id: int, start_date: date = None, end_date: date = None, db: Session = Depends(get_db)):\n    return get_diagnostics_by_cultivo(db, cultivo_id, start_date, end_date)\n@PREDICTION_ROUTES.get(\"/diagnostics/detail/{id}\", response_model=DiagnosticoFitosanitarioOut)\ndef read_diagnostic_detail(id: int, db: Session = Depends(get_db)):\n    return get_diagnostic_detail(db, id)\n'''",
        "detail": "src.routes.predictionRoutes",
        "documentation": {}
    },
    {
        "label": "read_diagnostic_detail",
        "kind": 2,
        "importPath": "src.routes.predictionRoutes",
        "description": "src.routes.predictionRoutes",
        "peekOfCode": "def read_diagnostic_detail(id: int, db: Session = Depends(get_db)):\n    return get_diagnostic_detail(db, id)\n'''",
        "detail": "src.routes.predictionRoutes",
        "documentation": {}
    },
    {
        "label": "PREDICTION_ROUTES",
        "kind": 5,
        "importPath": "src.routes.predictionRoutes",
        "description": "src.routes.predictionRoutes",
        "peekOfCode": "PREDICTION_ROUTES = APIRouter()\n@PREDICTION_ROUTES.post(\"/predict\")\nasync def predict(file: UploadFile = File(...), cultivo_id: int = Form(...)):\n    # Validación adicional para `cultivo_id`\n    if not isinstance(cultivo_id, int) or cultivo_id <= 0:\n        raise HTTPException(status_code=400, detail=\"El `cultivo_id` debe ser un número entero positivo válido.\")\n    # Leer la imagen del archivo cargado\n    image_data = await file.read()\n    # Llamar a la función de predicción en el controlador\n    predicted_class = predict_image(image_data, cultivo_id)",
        "detail": "src.routes.predictionRoutes",
        "documentation": {}
    },
    {
        "label": "get_role_permissions",
        "kind": 2,
        "importPath": "src.routes.rol_permissionRoutes",
        "description": "src.routes.rol_permissionRoutes",
        "peekOfCode": "def get_role_permissions(role_id: int, db: Session = Depends(get_session)):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    permissions = db.query(Permission).filter(Permission.roles.contains(role)).all()\n    # Cambia role.name a role.nombre\n    return {\"role\": role.nombre, \"permissions\": [permission.nombre for permission in permissions]}\n# Ruta para eliminar un permiso de un rol\n@ROL_PERMISSION_ROUTES.delete(\"/roles/{role_id}/permissions/{permission_id}\", dependencies=[Depends(verify_permission(\"eliminar_rol\"))])\ndef delete_role_permission(role_id: int, permission_id: int, db: Session = Depends(get_session)):",
        "detail": "src.routes.rol_permissionRoutes",
        "documentation": {}
    },
    {
        "label": "delete_role_permission",
        "kind": 2,
        "importPath": "src.routes.rol_permissionRoutes",
        "description": "src.routes.rol_permissionRoutes",
        "peekOfCode": "def delete_role_permission(role_id: int, permission_id: int, db: Session = Depends(get_session)):\n    return remove_permission_from_role(role_id, permission_id, db)\n@ROL_PERMISSION_ROUTES.put(\"/roles/{role_id}/permissions/{permission_id}\", dependencies=[Depends(verify_permission(\"actualizar_rol\"))])\ndef update_role_permission(role_id: int, permission_id: int, db: Session = Depends(get_session)):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    permission = db.query(Permission).filter(Permission.id == permission_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    if not permission:\n        raise HTTPException(status_code=404, detail=\"Permission not found\")",
        "detail": "src.routes.rol_permissionRoutes",
        "documentation": {}
    },
    {
        "label": "update_role_permission",
        "kind": 2,
        "importPath": "src.routes.rol_permissionRoutes",
        "description": "src.routes.rol_permissionRoutes",
        "peekOfCode": "def update_role_permission(role_id: int, permission_id: int, db: Session = Depends(get_session)):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    permission = db.query(Permission).filter(Permission.id == permission_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    if not permission:\n        raise HTTPException(status_code=404, detail=\"Permission not found\")\n    # Añadir el permiso al rol\n    add_permission_to_role(role_id, permission_id, db)\n    return {\"message\": f\"Permission '{permission.nombre}' successfully added to role '{role.nombre}'\"}",
        "detail": "src.routes.rol_permissionRoutes",
        "documentation": {}
    },
    {
        "label": "ROL_PERMISSION_ROUTES",
        "kind": 5,
        "importPath": "src.routes.rol_permissionRoutes",
        "description": "src.routes.rol_permissionRoutes",
        "peekOfCode": "ROL_PERMISSION_ROUTES = APIRouter()\n# Ruta para consultar los permisos de un rol\n@ROL_PERMISSION_ROUTES.get(\"/roles/{role_id}/permissions\", dependencies=[Depends(verify_permission(\"ver_rol\"))])\ndef get_role_permissions(role_id: int, db: Session = Depends(get_session)):\n    role = db.query(Rol).filter(Rol.id == role_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    permissions = db.query(Permission).filter(Permission.roles.contains(role)).all()\n    # Cambia role.name a role.nombre\n    return {\"role\": role.nombre, \"permissions\": [permission.nombre for permission in permissions]}",
        "detail": "src.routes.rol_permissionRoutes",
        "documentation": {}
    },
    {
        "label": "create_role_route",
        "kind": 2,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "def create_role_route(role: RoleCreate, db: Session = Depends(get_session)):\n    return create_role(role, db)\n@ROLE_ROUTES.get(\"/roles\", dependencies=[Depends(verify_permission(\"crear_rol\"))], response_model=dict)\ndef get_roles_route(db: Session = Depends(get_session)):\n    roles_data = get_roles(db)\n    roles = [Role.from_orm(role) for role in roles_data[\"roles\"] if role.descripcion is not None]\n    return {\"message\": roles_data[\"message\"], \"roles\": roles}\n@ROLE_ROUTES.get(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"ver_rol\"))], response_model=dict)\ndef get_role_by_id_route(role_id: int, db: Session = Depends(get_session)):\n    return get_role_by_id(role_id, db)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "get_roles_route",
        "kind": 2,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "def get_roles_route(db: Session = Depends(get_session)):\n    roles_data = get_roles(db)\n    roles = [Role.from_orm(role) for role in roles_data[\"roles\"] if role.descripcion is not None]\n    return {\"message\": roles_data[\"message\"], \"roles\": roles}\n@ROLE_ROUTES.get(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"ver_rol\"))], response_model=dict)\ndef get_role_by_id_route(role_id: int, db: Session = Depends(get_session)):\n    return get_role_by_id(role_id, db)\n@ROLE_ROUTES.put(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"actualizar_rol\"))], response_model=dict)\ndef update_role_route(role_id: int, role: RoleUpdate, db: Session = Depends(get_session)):\n    return update_role(role_id, role, db)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "get_role_by_id_route",
        "kind": 2,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "def get_role_by_id_route(role_id: int, db: Session = Depends(get_session)):\n    return get_role_by_id(role_id, db)\n@ROLE_ROUTES.put(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"actualizar_rol\"))], response_model=dict)\ndef update_role_route(role_id: int, role: RoleUpdate, db: Session = Depends(get_session)):\n    return update_role(role_id, role, db)\n@ROLE_ROUTES.delete(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"eliminar_rol\"))], response_model=dict)\ndef delete_role_route(role_id: int, db: Session = Depends(get_session)):\n    return delete_role(role_id, db)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "update_role_route",
        "kind": 2,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "def update_role_route(role_id: int, role: RoleUpdate, db: Session = Depends(get_session)):\n    return update_role(role_id, role, db)\n@ROLE_ROUTES.delete(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"eliminar_rol\"))], response_model=dict)\ndef delete_role_route(role_id: int, db: Session = Depends(get_session)):\n    return delete_role(role_id, db)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "delete_role_route",
        "kind": 2,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "def delete_role_route(role_id: int, db: Session = Depends(get_session)):\n    return delete_role(role_id, db)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "ROLE_ROUTES",
        "kind": 5,
        "importPath": "src.routes.roleRoutes",
        "description": "src.routes.roleRoutes",
        "peekOfCode": "ROLE_ROUTES = APIRouter()\n@ROLE_ROUTES.post(\"/roles\", dependencies=[Depends(verify_permission(\"crear_rol\"))], response_model=dict)\ndef create_role_route(role: RoleCreate, db: Session = Depends(get_session)):\n    return create_role(role, db)\n@ROLE_ROUTES.get(\"/roles\", dependencies=[Depends(verify_permission(\"crear_rol\"))], response_model=dict)\ndef get_roles_route(db: Session = Depends(get_session)):\n    roles_data = get_roles(db)\n    roles = [Role.from_orm(role) for role in roles_data[\"roles\"] if role.descripcion is not None]\n    return {\"message\": roles_data[\"message\"], \"roles\": roles}\n@ROLE_ROUTES.get(\"/roles/{role_id}\", dependencies=[Depends(verify_permission(\"ver_rol\"))], response_model=dict)",
        "detail": "src.routes.roleRoutes",
        "documentation": {}
    },
    {
        "label": "create_soil_analysis_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def create_soil_analysis_route(\n    soil_data: SoilAnalysisCreate = Body(...),\n    db: Session = Depends(get_db)\n):\n    # Crear el análisis de suelo y obtener el ID\n    analysis = create_soil_analysis(soil_data, db)\n    # Crear la respuesta simplificada con el ID y mensaje\n    response_data = SoilAnalysisSimpleOut(\n        id=analysis.id,\n        message=f\"Análisis de suelo creado exitosamente con el id: {analysis.id}\"",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "get_analyses_by_lote_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def get_analyses_by_lote_route(lote_id: int, db: Session = Depends(get_db)):\n    return get_analyses_by_lote(lote_id, db)\n@SOIL_ANALYSIS_ROUTES.get(\"/soil_analysis/{lote_id}/{analysis_id}\", response_model=SoilAnalysisOut)\ndef get_analysis_detail_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):\n    return get_analysis_detail(lote_id, analysis_id, db)\n@SOIL_ANALYSIS_ROUTES.put(\"/soil_analysis/{lote_id}/{analysis_id}\")\ndef update_soil_analysis_route(lote_id: int, analysis_id: int, soil_data: SoilAnalysisCreate, db: Session = Depends(get_db)):\n    return update_soil_analysis(lote_id, analysis_id, soil_data, db)\n@SOIL_ANALYSIS_ROUTES.delete(\"/soil_analysis/{lote_id}/{analysis_id}\")\ndef delete_soil_analysis_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "get_analysis_detail_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def get_analysis_detail_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):\n    return get_analysis_detail(lote_id, analysis_id, db)\n@SOIL_ANALYSIS_ROUTES.put(\"/soil_analysis/{lote_id}/{analysis_id}\")\ndef update_soil_analysis_route(lote_id: int, analysis_id: int, soil_data: SoilAnalysisCreate, db: Session = Depends(get_db)):\n    return update_soil_analysis(lote_id, analysis_id, soil_data, db)\n@SOIL_ANALYSIS_ROUTES.delete(\"/soil_analysis/{lote_id}/{analysis_id}\")\ndef delete_soil_analysis_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):\n    return delete_soil_analysis(lote_id, analysis_id, db)\n@SOIL_ANALYSIS_ROUTES.get(\"/soil_types\", response_model=list[SoilTypeOut])\ndef get_soil_types_route(db: Session = Depends(get_db)):",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "update_soil_analysis_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def update_soil_analysis_route(lote_id: int, analysis_id: int, soil_data: SoilAnalysisCreate, db: Session = Depends(get_db)):\n    return update_soil_analysis(lote_id, analysis_id, soil_data, db)\n@SOIL_ANALYSIS_ROUTES.delete(\"/soil_analysis/{lote_id}/{analysis_id}\")\ndef delete_soil_analysis_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):\n    return delete_soil_analysis(lote_id, analysis_id, db)\n@SOIL_ANALYSIS_ROUTES.get(\"/soil_types\", response_model=list[SoilTypeOut])\ndef get_soil_types_route(db: Session = Depends(get_db)):\n    soil_types = get_soil_types(db)\n    print(\"Response for /soil_types route:\", soil_types)  # Log response\n    return soil_types",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "delete_soil_analysis_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def delete_soil_analysis_route(lote_id: int, analysis_id: int, db: Session = Depends(get_db)):\n    return delete_soil_analysis(lote_id, analysis_id, db)\n@SOIL_ANALYSIS_ROUTES.get(\"/soil_types\", response_model=list[SoilTypeOut])\ndef get_soil_types_route(db: Session = Depends(get_db)):\n    soil_types = get_soil_types(db)\n    print(\"Response for /soil_types route:\", soil_types)  # Log response\n    return soil_types\n@SOIL_ANALYSIS_ROUTES.get(\"/textures\", response_model=list[TextureOut])\ndef get_textures_route(db: Session = Depends(get_db)):\n    return get_textures(db)",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "get_soil_types_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def get_soil_types_route(db: Session = Depends(get_db)):\n    soil_types = get_soil_types(db)\n    print(\"Response for /soil_types route:\", soil_types)  # Log response\n    return soil_types\n@SOIL_ANALYSIS_ROUTES.get(\"/textures\", response_model=list[TextureOut])\ndef get_textures_route(db: Session = Depends(get_db)):\n    return get_textures(db)\n@SOIL_ANALYSIS_ROUTES.get(\"/colors\", response_model=list[ColorOut])\ndef get_colors_route(db: Session = Depends(get_db)):\n    return get_colors(db)",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "get_textures_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def get_textures_route(db: Session = Depends(get_db)):\n    return get_textures(db)\n@SOIL_ANALYSIS_ROUTES.get(\"/colors\", response_model=list[ColorOut])\ndef get_colors_route(db: Session = Depends(get_db)):\n    return get_colors(db)",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "get_colors_route",
        "kind": 2,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "def get_colors_route(db: Session = Depends(get_db)):\n    return get_colors(db)",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "SOIL_ANALYSIS_ROUTES",
        "kind": 5,
        "importPath": "src.routes.soilAnalysisRoutes",
        "description": "src.routes.soilAnalysisRoutes",
        "peekOfCode": "SOIL_ANALYSIS_ROUTES = APIRouter()\n@SOIL_ANALYSIS_ROUTES.post(\"/soil_analysis\", response_model=SoilAnalysisSimpleOut, status_code=201)\ndef create_soil_analysis_route(\n    soil_data: SoilAnalysisCreate = Body(...),\n    db: Session = Depends(get_db)\n):\n    # Crear el análisis de suelo y obtener el ID\n    analysis = create_soil_analysis(soil_data, db)\n    # Crear la respuesta simplificada con el ID y mensaje\n    response_data = SoilAnalysisSimpleOut(",
        "detail": "src.routes.soilAnalysisRoutes",
        "documentation": {}
    },
    {
        "label": "list_tasks",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def list_tasks(db: Session = Depends(get_db)):\n    return get_all_tasks(db)\n@TASK_ROUTES.get(\"/tasks/{task_id}\", response_model=TaskOut)\ndef read_task(task_id: int, db: Session = Depends(get_db)):\n    task = get_task_by_id(db, task_id)\n    if task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return task\n@TASK_ROUTES.post(\"/tasksCreate\", response_model=TaskOut)\ndef create_new_task(task: TaskCreate, db: Session = Depends(get_db)):",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "read_task",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def read_task(task_id: int, db: Session = Depends(get_db)):\n    task = get_task_by_id(db, task_id)\n    if task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return task\n@TASK_ROUTES.post(\"/tasksCreate\", response_model=TaskOut)\ndef create_new_task(task: TaskCreate, db: Session = Depends(get_db)):\n    return create_task(db, task)\n@TASK_ROUTES.put(\"/tasks/{task_id}\", response_model=TaskOut)\ndef update_existing_task(task_id: int, task: TaskUpdate, db: Session = Depends(get_db)):",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "create_new_task",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def create_new_task(task: TaskCreate, db: Session = Depends(get_db)):\n    return create_task(db, task)\n@TASK_ROUTES.put(\"/tasks/{task_id}\", response_model=TaskOut)\ndef update_existing_task(task_id: int, task: TaskUpdate, db: Session = Depends(get_db)):\n    db_task = update_task(db, task_id, task)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return db_task\n@TASK_ROUTES.delete(\"/tasks/{task_id}\", response_model=TaskOut)\ndef delete_existing_task(task_id: int, db: Session = Depends(get_db)):",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "update_existing_task",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def update_existing_task(task_id: int, task: TaskUpdate, db: Session = Depends(get_db)):\n    db_task = update_task(db, task_id, task)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return db_task\n@TASK_ROUTES.delete(\"/tasks/{task_id}\", response_model=TaskOut)\ndef delete_existing_task(task_id: int, db: Session = Depends(get_db)):\n    db_task = delete_task(db, task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "delete_existing_task",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def delete_existing_task(task_id: int, db: Session = Depends(get_db)):\n    db_task = delete_task(db, task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return db_task\n# Nuevo endpoint para obtener tareas asociadas a un cultivo específico\n@TASK_ROUTES.get(\"/crops/{crop_id}/tasks\", response_model=list[TaskOut])\ndef get_tasks_for_crop(crop_id: int, db: Session = Depends(get_db)):\n    tasks = get_tasks_by_crop_id(db, crop_id)\n    if not tasks:",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "get_tasks_for_crop",
        "kind": 2,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "def get_tasks_for_crop(crop_id: int, db: Session = Depends(get_db)):\n    tasks = get_tasks_by_crop_id(db, crop_id)\n    if not tasks:\n        raise HTTPException(status_code=404, detail=\"No tasks found for this crop\")\n    return tasks",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "TASK_ROUTES",
        "kind": 5,
        "importPath": "src.routes.taskRoutes",
        "description": "src.routes.taskRoutes",
        "peekOfCode": "TASK_ROUTES = APIRouter()\n@TASK_ROUTES.get(\"/taskslist\", response_model=list[TaskOut])\ndef list_tasks(db: Session = Depends(get_db)):\n    return get_all_tasks(db)\n@TASK_ROUTES.get(\"/tasks/{task_id}\", response_model=TaskOut)\ndef read_task(task_id: int, db: Session = Depends(get_db)):\n    task = get_task_by_id(db, task_id)\n    if task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return task",
        "detail": "src.routes.taskRoutes",
        "documentation": {}
    },
    {
        "label": "get_total_costs_data",
        "kind": 2,
        "importPath": "src.routes.totalcostsRoutes",
        "description": "src.routes.totalcostsRoutes",
        "peekOfCode": "def get_total_costs_data(cultivo_id: int, db: Session = Depends(get_session)):\n    \"\"\"\n    Retorna los costos del cultivo, insumos y labores culturales con conceptos quemados.\n    \"\"\"\n    try:\n        return get_total_costs(db, cultivo_id)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n#Trae el costo total de todos los costos\n@router.get(\"/overall-total/{cultivo_id}\", response_model=OverallTotalResponse, tags=[\"Costs\"])",
        "detail": "src.routes.totalcostsRoutes",
        "documentation": {}
    },
    {
        "label": "get_overall_total",
        "kind": 2,
        "importPath": "src.routes.totalcostsRoutes",
        "description": "src.routes.totalcostsRoutes",
        "peekOfCode": "def get_overall_total(cultivo_id: int, db: Session = Depends(get_session)):\n    \"\"\"\n    Retorna el total general de costos de un cultivo.\n    \"\"\"\n    try:\n        return get_overall_total_cost(db, cultivo_id)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "detail": "src.routes.totalcostsRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.totalcostsRoutes",
        "description": "src.routes.totalcostsRoutes",
        "peekOfCode": "router = APIRouter()\n#Trae el bodý del nombre y costos totales de cada uno\n@router.get(\"/total-costs/{cultivo_id}\", response_model=TotalCostsResponse, tags=[\"Costs\"])\ndef get_total_costs_data(cultivo_id: int, db: Session = Depends(get_session)):\n    \"\"\"\n    Retorna los costos del cultivo, insumos y labores culturales con conceptos quemados.\n    \"\"\"\n    try:\n        return get_total_costs(db, cultivo_id)\n    except Exception as e:",
        "detail": "src.routes.totalcostsRoutes",
        "documentation": {}
    },
    {
        "label": "assign_farm_to_user",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def assign_farm_to_user(user_id: int, request: AssignFarmRequest, db: Session = Depends(get_session)):\n    user_farm = UserFarmRoleCreate(usuario_id=user_id, finca_id=request.farm_id)\n    try:\n        # Intenta asignar la finca al usuario\n        return create_user_farm(user_farm, db)\n    except IntegrityError:\n        # Si ocurre una excepción de duplicidad, realiza un rollback y lanza un mensaje de error específico\n        db.rollback()\n        raise HTTPException(status_code=400, detail=\"El usuario ya está relacionado a esa finca.\")\n# Ruta para obtener todos los registros de UserFarmRole",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "get_all_user_farms_route",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def get_all_user_farms_route(db: Session = Depends(get_session)):\n    return get_all_user_farms(db)\n@USER_FARM_ROUTES.get(\"/users/{user_id}/farms\", response_model=List[FarmSchema])\ndef get_user_farms(user_id: int, db: Session = Depends(get_session)):\n    # Filtra las fincas que están relacionadas al `user_id`\n    farms = db.query(Farm).join(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not farms:\n        raise HTTPException(status_code=404, detail=\"No farms found for this user\")\n    return farms\n# Ruta para obtener un registro de UserFarmRole por ID de usuario",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "get_user_farms",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def get_user_farms(user_id: int, db: Session = Depends(get_session)):\n    # Filtra las fincas que están relacionadas al `user_id`\n    farms = db.query(Farm).join(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not farms:\n        raise HTTPException(status_code=404, detail=\"No farms found for this user\")\n    return farms\n# Ruta para obtener un registro de UserFarmRole por ID de usuario\n@USER_FARM_ROUTES.get('/user-farms/{user_id}', response_model=list[FarmSchema])\ndef get_user_farms(user_id: int, session: Session = Depends(get_session)):\n    # Consulta todas las fincas relacionadas con el usuario especificado",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "get_user_farms",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def get_user_farms(user_id: int, session: Session = Depends(get_session)):\n    # Consulta todas las fincas relacionadas con el usuario especificado\n    user_farms = (\n        session.query(Farm)\n        .join(UserFarmRole, UserFarmRole.finca_id == Farm.id)\n        .filter(UserFarmRole.usuario_id == user_id)\n        .all()\n    )\n    if not user_farms:\n        raise HTTPException(status_code=404, detail=\"No farms found for this user\")",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "update_user_farm_role_route",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def update_user_farm_role_route(user_id: int, updated_data: UserFarmRoleUpdate, session: Session = Depends(get_session)):\n    return update_user_farm_role_by_id(user_id, updated_data, session)\n# Ruta para eliminar un registro de UserFarmRole\n@USER_FARM_ROUTES.delete(\"/user-farm/{usuario_id}/{finca_id}\")\ndef delete_user_farm_route(usuario_id: int, finca_id: int, db: Session = Depends(get_session)):\n    if not delete_user_farm(usuario_id, finca_id, db):\n        raise HTTPException(status_code=404, detail=\"UserFarmRole not found\")\n    return {\"message\": \"UserFarmRole deleted successfully\"}",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "delete_user_farm_route",
        "kind": 2,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "def delete_user_farm_route(usuario_id: int, finca_id: int, db: Session = Depends(get_session)):\n    if not delete_user_farm(usuario_id, finca_id, db):\n        raise HTTPException(status_code=404, detail=\"UserFarmRole not found\")\n    return {\"message\": \"UserFarmRole deleted successfully\"}",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "USER_FARM_ROUTES",
        "kind": 5,
        "importPath": "src.routes.userFarmRoutes",
        "description": "src.routes.userFarmRoutes",
        "peekOfCode": "USER_FARM_ROUTES = APIRouter()\n@USER_FARM_ROUTES.post(\"/users/{user_id}/assign-farm\", response_model=UserFarmRoleShema)\ndef assign_farm_to_user(user_id: int, request: AssignFarmRequest, db: Session = Depends(get_session)):\n    user_farm = UserFarmRoleCreate(usuario_id=user_id, finca_id=request.farm_id)\n    try:\n        # Intenta asignar la finca al usuario\n        return create_user_farm(user_farm, db)\n    except IntegrityError:\n        # Si ocurre una excepción de duplicidad, realiza un rollback y lanza un mensaje de error específico\n        db.rollback()",
        "detail": "src.routes.userFarmRoutes",
        "documentation": {}
    },
    {
        "label": "get_user_lots",
        "kind": 2,
        "importPath": "src.routes.userLoteRoutes",
        "description": "src.routes.userLoteRoutes",
        "peekOfCode": "def get_user_lots(user_id: int, db: Session = Depends(get_session)):\n    # Obtener fincas relacionadas con el usuario\n    farms = db.query(Farm).join(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not farms:\n        raise HTTPException(status_code=404, detail=\"No farms found for this user\")\n    # Obtener lotes relacionados con esas fincas\n    lots = db.query(Land).filter(Land.finca_id.in_([farm.id for farm in farms])).all()\n    if not lots:\n        raise HTTPException(status_code=404, detail=\"No lots found for this user\")\n    return lots",
        "detail": "src.routes.userLoteRoutes",
        "documentation": {}
    },
    {
        "label": "USER_LOT_ROUTES",
        "kind": 5,
        "importPath": "src.routes.userLoteRoutes",
        "description": "src.routes.userLoteRoutes",
        "peekOfCode": "USER_LOT_ROUTES = APIRouter()\n@USER_LOT_ROUTES.get(\"/users/{user_id}/lots\", response_model=list[LandSchema])\ndef get_user_lots(user_id: int, db: Session = Depends(get_session)):\n    # Obtener fincas relacionadas con el usuario\n    farms = db.query(Farm).join(UserFarmRole).filter(UserFarmRole.usuario_id == user_id).all()\n    if not farms:\n        raise HTTPException(status_code=404, detail=\"No farms found for this user\")\n    # Obtener lotes relacionados con esas fincas\n    lots = db.query(Land).filter(Land.finca_id.in_([farm.id for farm in farms])).all()\n    if not lots:",
        "detail": "src.routes.userLoteRoutes",
        "documentation": {}
    },
    {
        "label": "register_user_role",
        "kind": 2,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "def register_user_role(user_role: CreateUserRole, session: Session = Depends(get_session)):\n    return registerUserRole(user_role, session)\n@USER_ROLE_ROUTES.get(\"/user-roles/user/{user_id}\", response_model=Role)\ndef get_user_role(user_id: int, db: Session = Depends(get_session)):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if not user_role:\n        raise HTTPException(status_code=404, detail=\"User role not found\")\n    role = db.query(Rol).filter(Rol.id == user_role.rol_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "get_user_role",
        "kind": 2,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "def get_user_role(user_id: int, db: Session = Depends(get_session)):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if not user_role:\n        raise HTTPException(status_code=404, detail=\"User role not found\")\n    role = db.query(Rol).filter(Rol.id == user_role.rol_id).first()\n    if not role:\n        raise HTTPException(status_code=404, detail=\"Role not found\")\n    # Cambia 'name' por 'nombre' (que es el campo correcto en Pydantic)\n    return Role(id=role.id, nombre=role.nombre, descripcion=role.descripcion)\n# Nueva ruta para verificar si el usuario es administrador",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "check_if_user_is_admin",
        "kind": 2,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "def check_if_user_is_admin(user_id: int, db: Session = Depends(get_session)):\n    return isUserAdmin(user_id, db)\n@USER_ROLE_ROUTES.get(\"/user-roles\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\nasync def get_user_roles(db: Session = Depends(get_session), current_user: UserRole = Depends(get_current_user)):\n    roles = db.query(UserRole).all()\n    return roles\n@USER_ROLE_ROUTES.put('/user-roles/update/{usuario_id}', dependencies=[Depends(verify_permission(\"actualizar_usuario\"))])\ndef modify_user_role(usuario_id: int, user_role_update: UpdateUserRole, db: Session = Depends(get_session)):\n    return updateUserRole(usuario_id, user_role_update, db)\n@USER_ROLE_ROUTES.delete('/user-roles/delete/{role_id}', dependencies=[Depends(verify_permission(\"eliminar_usuario\"))])",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "modify_user_role",
        "kind": 2,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "def modify_user_role(usuario_id: int, user_role_update: UpdateUserRole, db: Session = Depends(get_session)):\n    return updateUserRole(usuario_id, user_role_update, db)\n@USER_ROLE_ROUTES.delete('/user-roles/delete/{role_id}', dependencies=[Depends(verify_permission(\"eliminar_usuario\"))])\ndef remove_user_role(role_id: int, db: Session = Depends(get_session)):\n    return deleteUserRole(role_id, db)",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "remove_user_role",
        "kind": 2,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "def remove_user_role(role_id: int, db: Session = Depends(get_session)):\n    return deleteUserRole(role_id, db)",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "USER_ROLE_ROUTES",
        "kind": 5,
        "importPath": "src.routes.userRoleRoutes",
        "description": "src.routes.userRoleRoutes",
        "peekOfCode": "USER_ROLE_ROUTES = APIRouter()\n@USER_ROLE_ROUTES.post(\"/user-roles/register\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\ndef register_user_role(user_role: CreateUserRole, session: Session = Depends(get_session)):\n    return registerUserRole(user_role, session)\n@USER_ROLE_ROUTES.get(\"/user-roles/user/{user_id}\", response_model=Role)\ndef get_user_role(user_id: int, db: Session = Depends(get_session)):\n    user_role = db.query(UserRole).filter(UserRole.usuario_id == user_id).first()\n    if not user_role:\n        raise HTTPException(status_code=404, detail=\"User role not found\")\n    role = db.query(Rol).filter(Rol.id == user_role.rol_id).first()",
        "detail": "src.routes.userRoleRoutes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "peekOfCode": "def register(user: CrearUsuario, session: Session = Depends(get_session)):\n    return registerUser(user, session)\n@USER_ROUTES.get('/users/{user_id}', dependencies=[Depends(verify_permission(\"ver_usuario\"))])\ndef getUserId(user_id: int, db: Session = Depends(get_session)):\n    return getUser(user_id, db)\n@USER_ROUTES.get(\"/users\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\nasync def get_users(db: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    users = db.query(User).all()\n    return users\n@USER_ROUTES.put('/users/update/{user_id}', dependencies=[Depends(verify_permission(\"actualizar_usuario\"))])",
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "getUserId",
        "kind": 2,
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "peekOfCode": "def getUserId(user_id: int, db: Session = Depends(get_session)):\n    return getUser(user_id, db)\n@USER_ROUTES.get(\"/users\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\nasync def get_users(db: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    users = db.query(User).all()\n    return users\n@USER_ROUTES.put('/users/update/{user_id}', dependencies=[Depends(verify_permission(\"actualizar_usuario\"))])\ndef modifyUser(user_id: int, user_update: UpdateUser, db: Session = Depends(get_session)):\n    return updateUser(user_id, user_update, db)\n@USER_ROUTES.delete('/users/delete/{user_id}', dependencies=[Depends(verify_permission(\"eliminar_usuario\"))])",
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "modifyUser",
        "kind": 2,
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "peekOfCode": "def modifyUser(user_id: int, user_update: UpdateUser, db: Session = Depends(get_session)):\n    return updateUser(user_id, user_update, db)\n@USER_ROUTES.delete('/users/delete/{user_id}', dependencies=[Depends(verify_permission(\"eliminar_usuario\"))])\ndef removeUser(user_id: int, db: Session = Depends(get_session)):\n    return deleteUser(user_id, db)",
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "removeUser",
        "kind": 2,
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "peekOfCode": "def removeUser(user_id: int, db: Session = Depends(get_session)):\n    return deleteUser(user_id, db)",
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "USER_ROUTES",
        "kind": 5,
        "importPath": "src.routes.userRoutes",
        "description": "src.routes.userRoutes",
        "peekOfCode": "USER_ROUTES = APIRouter()\n@USER_ROUTES.post(\"/users/register\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\ndef register(user: CrearUsuario, session: Session = Depends(get_session)):\n    return registerUser(user, session)\n@USER_ROUTES.get('/users/{user_id}', dependencies=[Depends(verify_permission(\"ver_usuario\"))])\ndef getUserId(user_id: int, db: Session = Depends(get_session)):\n    return getUser(user_id, db)\n@USER_ROUTES.get(\"/users\", dependencies=[Depends(verify_permission(\"crear_usuario\"))])\nasync def get_users(db: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    users = db.query(User).all()",
        "detail": "src.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "create_variable_cost_route",
        "kind": 2,
        "importPath": "src.routes.variableCostRoutes",
        "description": "src.routes.variableCostRoutes",
        "peekOfCode": "def create_variable_cost_route(variable_costs: VariableCostsCreate, db: Session = Depends(get_db)):\n    return create_variable_cost(db, variable_costs)\n# Obtener todos los gastos variables\n@VARIABLE_COST_ROUTES.get(\"/financial/variable-costs\", response_model=List[VariableCostsResponse])\ndef get_variable_costs_route(db: Session = Depends(get_db)):\n    return get_variable_costs(db)\n# Obtener detalles de los gastos variables\n@VARIABLE_COST_ROUTES.get(\"/financial/variable-costs-details\", response_model=List[VariableCostsResponse])\ndef get_variable_costs_details_route(db: Session = Depends(get_db)):\n    return get_variable_costs_details(db)  # Llama a la nueva función",
        "detail": "src.routes.variableCostRoutes",
        "documentation": {}
    },
    {
        "label": "get_variable_costs_route",
        "kind": 2,
        "importPath": "src.routes.variableCostRoutes",
        "description": "src.routes.variableCostRoutes",
        "peekOfCode": "def get_variable_costs_route(db: Session = Depends(get_db)):\n    return get_variable_costs(db)\n# Obtener detalles de los gastos variables\n@VARIABLE_COST_ROUTES.get(\"/financial/variable-costs-details\", response_model=List[VariableCostsResponse])\ndef get_variable_costs_details_route(db: Session = Depends(get_db)):\n    return get_variable_costs_details(db)  # Llama a la nueva función",
        "detail": "src.routes.variableCostRoutes",
        "documentation": {}
    },
    {
        "label": "get_variable_costs_details_route",
        "kind": 2,
        "importPath": "src.routes.variableCostRoutes",
        "description": "src.routes.variableCostRoutes",
        "peekOfCode": "def get_variable_costs_details_route(db: Session = Depends(get_db)):\n    return get_variable_costs_details(db)  # Llama a la nueva función",
        "detail": "src.routes.variableCostRoutes",
        "documentation": {}
    },
    {
        "label": "VARIABLE_COST_ROUTES",
        "kind": 5,
        "importPath": "src.routes.variableCostRoutes",
        "description": "src.routes.variableCostRoutes",
        "peekOfCode": "VARIABLE_COST_ROUTES = APIRouter()\n# Crear un gasto variable\n@VARIABLE_COST_ROUTES.post(\"/financial/variable-costs\", response_model=VariableCostsResponse)\ndef create_variable_cost_route(variable_costs: VariableCostsCreate, db: Session = Depends(get_db)):\n    return create_variable_cost(db, variable_costs)\n# Obtener todos los gastos variables\n@VARIABLE_COST_ROUTES.get(\"/financial/variable-costs\", response_model=List[VariableCostsResponse])\ndef get_variable_costs_route(db: Session = Depends(get_db)):\n    return get_variable_costs(db)\n# Obtener detalles de los gastos variables",
        "detail": "src.routes.variableCostRoutes",
        "documentation": {}
    },
    {
        "label": "register_variety",
        "kind": 2,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "def register_variety(variety: VarietyArrozCreate, db: Session = Depends(get_db)):\n    return createVariety(variety, db)\n# Ruta para listar todas las variedades de arroz\n@VARIETY_ARROZ_ROUTES.get('/list-varieties', response_model=list[VarietyArrozResponse])\ndef list_varieties(db: Session = Depends(get_db)):\n    return listVarieties(db)\n# Ruta para obtener una variedad de arroz por ID\n@VARIETY_ARROZ_ROUTES.get('/get-variety/{variety_id}', response_model=VarietyArrozResponse)\ndef get_variety(variety_id: int, db: Session = Depends(get_db)):\n    return getVariety(variety_id, db)",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "list_varieties",
        "kind": 2,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "def list_varieties(db: Session = Depends(get_db)):\n    return listVarieties(db)\n# Ruta para obtener una variedad de arroz por ID\n@VARIETY_ARROZ_ROUTES.get('/get-variety/{variety_id}', response_model=VarietyArrozResponse)\ndef get_variety(variety_id: int, db: Session = Depends(get_db)):\n    return getVariety(variety_id, db)\n# Ruta para actualizar una variedad de arroz\n@VARIETY_ARROZ_ROUTES.put('/update-variety/{variety_id}', response_model=VarietyArrozResponse)\ndef update_variety(variety_id: int, variety: VarietyArrozCreate, db: Session = Depends(get_db)):\n    return updateVariety(variety_id, variety, db)",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "get_variety",
        "kind": 2,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "def get_variety(variety_id: int, db: Session = Depends(get_db)):\n    return getVariety(variety_id, db)\n# Ruta para actualizar una variedad de arroz\n@VARIETY_ARROZ_ROUTES.put('/update-variety/{variety_id}', response_model=VarietyArrozResponse)\ndef update_variety(variety_id: int, variety: VarietyArrozCreate, db: Session = Depends(get_db)):\n    return updateVariety(variety_id, variety, db)\n# Ruta para eliminar una variedad de arroz\n@VARIETY_ARROZ_ROUTES.delete('/delete-variety/{variety_id}')\ndef delete_variety(variety_id: int, db: Session = Depends(get_db)):\n    return deleteVariety(variety_id, db)",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "update_variety",
        "kind": 2,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "def update_variety(variety_id: int, variety: VarietyArrozCreate, db: Session = Depends(get_db)):\n    return updateVariety(variety_id, variety, db)\n# Ruta para eliminar una variedad de arroz\n@VARIETY_ARROZ_ROUTES.delete('/delete-variety/{variety_id}')\ndef delete_variety(variety_id: int, db: Session = Depends(get_db)):\n    return deleteVariety(variety_id, db)",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "delete_variety",
        "kind": 2,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "def delete_variety(variety_id: int, db: Session = Depends(get_db)):\n    return deleteVariety(variety_id, db)",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "VARIETY_ARROZ_ROUTES",
        "kind": 5,
        "importPath": "src.routes.varietyArrozRoutes",
        "description": "src.routes.varietyArrozRoutes",
        "peekOfCode": "VARIETY_ARROZ_ROUTES = APIRouter()\n# Ruta para crear una nueva variedad de arroz\n@VARIETY_ARROZ_ROUTES.post('/register-variety', response_model=VarietyArrozResponse)\ndef register_variety(variety: VarietyArrozCreate, db: Session = Depends(get_db)):\n    return createVariety(variety, db)\n# Ruta para listar todas las variedades de arroz\n@VARIETY_ARROZ_ROUTES.get('/list-varieties', response_model=list[VarietyArrozResponse])\ndef list_varieties(db: Session = Depends(get_db)):\n    return listVarieties(db)\n# Ruta para obtener una variedad de arroz por ID",
        "detail": "src.routes.varietyArrozRoutes",
        "documentation": {}
    },
    {
        "label": "create_stage_route",
        "kind": 2,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "def create_stage_route(stage: VarietyRiceStageCreate, db: Session = Depends(get_session)):\n    return create_variety_rice_stage(stage, db)\n@VARIETY_RICE_STAGE_ROUTES.get(\"/variety-rice-stages\", response_model=list[VarietyRiceStageResponse])\ndef get_stages_route(db: Session = Depends(get_session)):\n    stages = get_variety_rice_stages(db)\n    return stages\n@VARIETY_RICE_STAGE_ROUTES.get(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)\ndef get_stage_by_id_route(stage_id: int, db: Session = Depends(get_session)):\n    stage = get_variety_rice_stage_by_id(stage_id, db)\n    if not stage:",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "get_stages_route",
        "kind": 2,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "def get_stages_route(db: Session = Depends(get_session)):\n    stages = get_variety_rice_stages(db)\n    return stages\n@VARIETY_RICE_STAGE_ROUTES.get(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)\ndef get_stage_by_id_route(stage_id: int, db: Session = Depends(get_session)):\n    stage = get_variety_rice_stage_by_id(stage_id, db)\n    if not stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")\n    return stage\n@VARIETY_RICE_STAGE_ROUTES.put(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "get_stage_by_id_route",
        "kind": 2,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "def get_stage_by_id_route(stage_id: int, db: Session = Depends(get_session)):\n    stage = get_variety_rice_stage_by_id(stage_id, db)\n    if not stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")\n    return stage\n@VARIETY_RICE_STAGE_ROUTES.put(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)\ndef update_stage_route(stage_id: int, stage: VarietyRiceStageUpdate, db: Session = Depends(get_session)):\n    updated_stage = update_variety_rice_stage(stage_id, stage, db)\n    if not updated_stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "update_stage_route",
        "kind": 2,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "def update_stage_route(stage_id: int, stage: VarietyRiceStageUpdate, db: Session = Depends(get_session)):\n    updated_stage = update_variety_rice_stage(stage_id, stage, db)\n    if not updated_stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")\n    return updated_stage\n@VARIETY_RICE_STAGE_ROUTES.delete(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)\ndef delete_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    deleted_stage = delete_variety_rice_stage(stage_id, db)\n    if not deleted_stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "delete_stage_route",
        "kind": 2,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "def delete_stage_route(stage_id: int, db: Session = Depends(get_session)):\n    deleted_stage = delete_variety_rice_stage(stage_id, db)\n    if not deleted_stage:\n        raise HTTPException(status_code=404, detail=\"Stage not found\")\n    return deleted_stage",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "VARIETY_RICE_STAGE_ROUTES",
        "kind": 5,
        "importPath": "src.routes.varietyRiceStageRoutes",
        "description": "src.routes.varietyRiceStageRoutes",
        "peekOfCode": "VARIETY_RICE_STAGE_ROUTES = APIRouter()\n@VARIETY_RICE_STAGE_ROUTES.post(\"/variety-rice-stages\", response_model=VarietyRiceStageResponse)\ndef create_stage_route(stage: VarietyRiceStageCreate, db: Session = Depends(get_session)):\n    return create_variety_rice_stage(stage, db)\n@VARIETY_RICE_STAGE_ROUTES.get(\"/variety-rice-stages\", response_model=list[VarietyRiceStageResponse])\ndef get_stages_route(db: Session = Depends(get_session)):\n    stages = get_variety_rice_stages(db)\n    return stages\n@VARIETY_RICE_STAGE_ROUTES.get(\"/variety-rice-stages/{stage_id}\", response_model=VarietyRiceStageResponse)\ndef get_stage_by_id_route(stage_id: int, db: Session = Depends(get_session)):",
        "detail": "src.routes.varietyRiceStageRoutes",
        "documentation": {}
    },
    {
        "label": "registerWeatherRecord",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def registerWeatherRecord(\n    record: WeatherRecordCreate, db: Session = Depends(get_db)):\n    return createWeatherRecord(db, record)\n# @WEATHER_RECORD_ROUTES.post(\"/meteorology/manual\", response_model=WeatherRecordResponse)\n# def registerManualWeatherRecord(\n#     record: WeatherRecordCreate, db: Session = Depends(get_db)):\n#     return createManualWeatherRecord(db, record)\n@WEATHER_RECORD_ROUTES.post(\"/meteorology/manual/{lote_id}\", response_model=WeatherRecordResponse)\ndef registerManualWeatherRecord(\n    lote_id: int,  # Tomamos el lote_id como parámetro",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "registerManualWeatherRecord",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def registerManualWeatherRecord(\n    lote_id: int,  # Tomamos el lote_id como parámetro\n    record: WeatherRecordCreate,  # Los datos meteorológicos\n    db: Session = Depends(get_db)\n):\n    # Aquí llamamos a la función que crea el registro meteorológico, pasando el lote_id\n    return createManualWeatherRecord(db, record, lote_id)\n@WEATHER_RECORD_ROUTES.post(\"/meteorology/api\", response_model=WeatherRecordResponse)\ndef registerWeatherRecordFromAPI(data: LoteIdWithCoordinatesRequest, db: Session = Depends(get_db)):\n    \"\"\"",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "registerWeatherRecordFromAPI",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def registerWeatherRecordFromAPI(data: LoteIdWithCoordinatesRequest, db: Session = Depends(get_db)):\n    \"\"\"\n    Endpoint para registrar automáticamente un dato meteorológico basado en la API.\n    \"\"\"\n    return createWeatherRecordFromAPI(db, data.lote_id, data.latitud, data.longitud)\n@WEATHER_RECORD_ROUTES.get(\"/weather-record/{lote_id}/recommendations\")\ndef getRecommendations(lote_id: int, db: Session = Depends(get_db)):\n    return getWeatherRecommendations(db, lote_id)\n@WEATHER_RECORD_ROUTES.get(\"/weather-record/by-date/{fecha}/{lote_id}\", response_model=WeatherRecordResponse)\ndef getWeatherRecord(fecha: str, lote_id: int, db: Session = Depends(get_db)):",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "getRecommendations",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def getRecommendations(lote_id: int, db: Session = Depends(get_db)):\n    return getWeatherRecommendations(db, lote_id)\n@WEATHER_RECORD_ROUTES.get(\"/weather-record/by-date/{fecha}/{lote_id}\", response_model=WeatherRecordResponse)\ndef getWeatherRecord(fecha: str, lote_id: int, db: Session = Depends(get_db)):\n    record = fetchWeatherRecord(db, fecha, lote_id)\n    if record is None:\n        raise HTTPException(status_code=404, detail=\"Registro no encontrado\")\n    return record\n@WEATHER_RECORD_ROUTES.get(\"/meteorology/history/{lote_id}\", response_model=List[WeatherRecordResponse])\ndef getWeatherHistory(",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "getWeatherRecord",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def getWeatherRecord(fecha: str, lote_id: int, db: Session = Depends(get_db)):\n    record = fetchWeatherRecord(db, fecha, lote_id)\n    if record is None:\n        raise HTTPException(status_code=404, detail=\"Registro no encontrado\")\n    return record\n@WEATHER_RECORD_ROUTES.get(\"/meteorology/history/{lote_id}\", response_model=List[WeatherRecordResponse])\ndef getWeatherHistory(\n    lote_id: int,\n    fecha_inicio: Optional[str] = None,\n    fecha_fin: Optional[str] = None,",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "getWeatherHistory",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def getWeatherHistory(\n    lote_id: int,\n    fecha_inicio: Optional[str] = None,\n    fecha_fin: Optional[str] = None,\n    fuente_datos: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Endpoint para consultar el historial meteorológico de un lote.\n    \"\"\"",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "getWeatherRecordDetail",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def getWeatherRecordDetail(id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Endpoint para ver el detalle de un registro meteorológico específico.\n    \"\"\"\n    record = fetchWeatherRecordDetail(db, id)\n    if record is None:\n        raise HTTPException(status_code=404, detail=\"Registro no encontrado\")\n    return record\n@WEATHER_RECORD_ROUTES.put(\"/meteorology/history/update/{id}\", response_model=WeatherRecordResponse)\ndef updateWeatherRecord(",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "updateWeatherRecord",
        "kind": 2,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "def updateWeatherRecord(\n    id: int,\n    record: WeatherRecordCreate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Endpoint para actualizar un registro meteorológico existente.\n    \"\"\"\n    existing_record = db.query(WeatherRecord).filter(WeatherRecord.id == id).first()\n    if existing_record is None:",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "WEATHER_RECORD_ROUTES",
        "kind": 5,
        "importPath": "src.routes.weatherRecordRoute",
        "description": "src.routes.weatherRecordRoute",
        "peekOfCode": "WEATHER_RECORD_ROUTES = APIRouter()\n@WEATHER_RECORD_ROUTES.post(\"/weather-record/\", response_model=WeatherRecordResponse)\ndef registerWeatherRecord(\n    record: WeatherRecordCreate, db: Session = Depends(get_db)):\n    return createWeatherRecord(db, record)\n# @WEATHER_RECORD_ROUTES.post(\"/meteorology/manual\", response_model=WeatherRecordResponse)\n# def registerManualWeatherRecord(\n#     record: WeatherRecordCreate, db: Session = Depends(get_db)):\n#     return createManualWeatherRecord(db, record)\n@WEATHER_RECORD_ROUTES.post(\"/meteorology/manual/{lote_id}\", response_model=WeatherRecordResponse)",
        "detail": "src.routes.weatherRecordRoute",
        "documentation": {}
    },
    {
        "label": "PermissionSchema",
        "kind": 6,
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "peekOfCode": "class PermissionSchema(BaseModel):\n    id: int\n    nombre: str\n    description: str = None\n    class Config:\n        from_attributes = True\nclass CreatePermission(BaseModel):\n    name: str\n    description: str = None\nclass UpdatePermission(BaseModel):",
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "CreatePermission",
        "kind": 6,
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "peekOfCode": "class CreatePermission(BaseModel):\n    name: str\n    description: str = None\nclass UpdatePermission(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "UpdatePermission",
        "kind": 6,
        "importPath": "src.schemas.PermissionSchema",
        "description": "src.schemas.PermissionSchema",
        "peekOfCode": "class UpdatePermission(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "src.schemas.PermissionSchema",
        "documentation": {}
    },
    {
        "label": "UnidadInsumoSchema",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class UnidadInsumoSchema(BaseModel):\n    id: int\n    nombre: str\n    class Config:\n        orm_mode = True  \n# Esquema de TipoInsumo\nclass TipoInsumoSchema(BaseModel):\n    id: int\n    nombre: str\n    class Config:",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "TipoInsumoSchema",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class TipoInsumoSchema(BaseModel):\n    id: int\n    nombre: str\n    class Config:\n        orm_mode = True  \n# Esquema base de AgriculturalInput\nclass AgriculturalInputBase(BaseModel):\n    nombre: str\n    descripcion: Optional[str] = None\n    costo_unitario: float",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputBase",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class AgriculturalInputBase(BaseModel):\n    nombre: str\n    descripcion: Optional[str] = None\n    costo_unitario: float\n    cantidad: float\nclass AgriculturalInputCreate(AgriculturalInputBase):\n    unidad_id: int  # unidad_id se usa solo en la creación\n    tipo_insumo_id: int  # tipo_insumo_id también se usa solo en la creación\nclass AgriculturalInput(AgriculturalInputBase):\n    id: int",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputCreate",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class AgriculturalInputCreate(AgriculturalInputBase):\n    unidad_id: int  # unidad_id se usa solo en la creación\n    tipo_insumo_id: int  # tipo_insumo_id también se usa solo en la creación\nclass AgriculturalInput(AgriculturalInputBase):\n    id: int\n    unidad: Optional[UnidadInsumoSchema] = None  # Permitir que unidad sea None\n    tipo_insumo: Optional[TipoInsumoSchema] = None  # Permitir que tipo_insumo sea None\n    class Config:\n        orm_mode = True  \nclass AgriculturalInputUpdate(BaseModel):",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInput",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class AgriculturalInput(AgriculturalInputBase):\n    id: int\n    unidad: Optional[UnidadInsumoSchema] = None  # Permitir que unidad sea None\n    tipo_insumo: Optional[TipoInsumoSchema] = None  # Permitir que tipo_insumo sea None\n    class Config:\n        orm_mode = True  \nclass AgriculturalInputUpdate(BaseModel):\n    nombre: Optional[str] = None\n    descripcion: Optional[str] = None\n    unidad_id: Optional[int] = None",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputUpdate",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class AgriculturalInputUpdate(BaseModel):\n    nombre: Optional[str] = None\n    descripcion: Optional[str] = None\n    unidad_id: Optional[int] = None\n    tipo_insumo_id: Optional[int] = None\n    costo_unitario: Optional[float] = None\n    cantidad: Optional[float] = None\nclass Config:\n        orm_mode = True  # Configuración para trabajar con objetos de SQLAlchemy",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "src.schemas.agriculturalInputSchema",
        "description": "src.schemas.agriculturalInputSchema",
        "peekOfCode": "class Config:\n        orm_mode = True  # Configuración para trabajar con objetos de SQLAlchemy",
        "detail": "src.schemas.agriculturalInputSchema",
        "documentation": {}
    },
    {
        "label": "AuditBase",
        "kind": 6,
        "importPath": "src.schemas.auditSchema",
        "description": "src.schemas.auditSchema",
        "peekOfCode": "class AuditBase(BaseModel):\n    table_name: str\n    operation_type: str\n    record_id: int\n    changed_data: Optional[Any]\n    operation_timestamp: datetime\nclass AuditOut(AuditBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.auditSchema",
        "documentation": {}
    },
    {
        "label": "AuditOut",
        "kind": 6,
        "importPath": "src.schemas.auditSchema",
        "description": "src.schemas.auditSchema",
        "peekOfCode": "class AuditOut(AuditBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.auditSchema",
        "documentation": {}
    },
    {
        "label": "TokenCreate",
        "kind": 6,
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "peekOfCode": "class TokenCreate(BaseModel):\n    user_id: str\n    access_token: str\n    refresh_token: str\n    status: bool\n    created_date: datetime.datetime\nclass TokenSchema(BaseModel):\n    access_token: str\n    refresh_token: str\n    class Config:",
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "TokenSchema",
        "kind": 6,
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "peekOfCode": "class TokenSchema(BaseModel):\n    access_token: str\n    refresh_token: str\n    class Config:\n        from_attributes = True\nclass LoginRequest(BaseModel):\n    email: str\n    password: str",
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "kind": 6,
        "importPath": "src.schemas.authShema",
        "description": "src.schemas.authShema",
        "peekOfCode": "class LoginRequest(BaseModel):\n    email: str\n    password: str",
        "detail": "src.schemas.authShema",
        "documentation": {}
    },
    {
        "label": "CostsBase",
        "kind": 6,
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "peekOfCode": "class CostsBase(BaseModel):\n    concepto: str\n    descripcion: Optional[str]\n    precio: float\n    cultivo_id: int\nclass CostsCreate(CostsBase):\n    pass\nclass CostsUpdate(BaseModel):\n    concepto: Optional[str]\n    descripcion: Optional[str]",
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsCreate",
        "kind": 6,
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "peekOfCode": "class CostsCreate(CostsBase):\n    pass\nclass CostsUpdate(BaseModel):\n    concepto: Optional[str]\n    descripcion: Optional[str]\n    precio: Optional[float]\nclass CostsOut(CostsBase):\n    id: int\n    class Config:\n        from_attributes = True",
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsUpdate",
        "kind": 6,
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "peekOfCode": "class CostsUpdate(BaseModel):\n    concepto: Optional[str]\n    descripcion: Optional[str]\n    precio: Optional[float]\nclass CostsOut(CostsBase):\n    id: int\n    class Config:\n        from_attributes = True",
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CostsOut",
        "kind": 6,
        "importPath": "src.schemas.costsSchema",
        "description": "src.schemas.costsSchema",
        "peekOfCode": "class CostsOut(CostsBase):\n    id: int\n    class Config:\n        from_attributes = True",
        "detail": "src.schemas.costsSchema",
        "documentation": {}
    },
    {
        "label": "CropCycleRequest",
        "kind": 6,
        "importPath": "src.schemas.cropCycleSchemas",
        "description": "src.schemas.cropCycleSchemas",
        "peekOfCode": "class CropCycleRequest(BaseModel):\n    sowingDate: date\nclass CropCycleStageResponse(BaseModel):\n    stage: str\n    startDate: date\n    endDate: date",
        "detail": "src.schemas.cropCycleSchemas",
        "documentation": {}
    },
    {
        "label": "CropCycleStageResponse",
        "kind": 6,
        "importPath": "src.schemas.cropCycleSchemas",
        "description": "src.schemas.cropCycleSchemas",
        "peekOfCode": "class CropCycleStageResponse(BaseModel):\n    stage: str\n    startDate: date\n    endDate: date",
        "detail": "src.schemas.cropCycleSchemas",
        "documentation": {}
    },
    {
        "label": "CropBase",
        "kind": 6,
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "peekOfCode": "class CropBase(BaseModel):\n    cropName: str = Field(..., max_length=100)\n    varietyId: int\n    plotId: int\n    plantingDate: Optional[date] = None\n    estimatedHarvestDate: Optional[date] = None\n    slug: str\n    class Config:\n        from_attributes = True  # Utiliza from_attributes para Pydantic v2\nclass CropCreate(CropBase):",
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropCreate",
        "kind": 6,
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "peekOfCode": "class CropCreate(CropBase):\n    slug: Optional[str] = None  # Slug opcional al crear\nclass CropUpdate(CropBase):\n    pass\n# Aquí agregamos varietyName a CropOut\nclass CropOut(BaseModel):\n    id: int\n    cropName: str\n    varietyId: int\n    varietyName: Optional[str] = None  # Agregamos el campo varietyName",
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropUpdate",
        "kind": 6,
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "peekOfCode": "class CropUpdate(CropBase):\n    pass\n# Aquí agregamos varietyName a CropOut\nclass CropOut(BaseModel):\n    id: int\n    cropName: str\n    varietyId: int\n    varietyName: Optional[str] = None  # Agregamos el campo varietyName\n    plotId: int\n    plantingDate: Optional[date] = None",
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "CropOut",
        "kind": 6,
        "importPath": "src.schemas.cropSchema",
        "description": "src.schemas.cropSchema",
        "peekOfCode": "class CropOut(BaseModel):\n    id: int\n    cropName: str\n    varietyId: int\n    varietyName: Optional[str] = None  # Agregamos el campo varietyName\n    plotId: int\n    plantingDate: Optional[date] = None\n    estimatedHarvestDate: Optional[date] = None\n    class Config:\n        from_attributes = True  # Asegúrate de que esté alineado con Pydantic v2",
        "detail": "src.schemas.cropSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticBase",
        "kind": 6,
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "peekOfCode": "class DiagnosticBase(BaseModel):\n    resultado_ia: Optional[dict] = None\n    ruta: Optional[str] = None\nclass DiagnosticCreate(DiagnosticBase):\n    pass\nclass Diagnostic(DiagnosticBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticCreate",
        "kind": 6,
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "peekOfCode": "class DiagnosticCreate(DiagnosticBase):\n    pass\nclass Diagnostic(DiagnosticBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "Diagnostic",
        "kind": 6,
        "importPath": "src.schemas.diagnosticSchema",
        "description": "src.schemas.diagnosticSchema",
        "peekOfCode": "class Diagnostic(DiagnosticBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.diagnosticSchema",
        "documentation": {}
    },
    {
        "label": "FarmLotSchema",
        "kind": 6,
        "importPath": "src.schemas.farmLotSchema",
        "description": "src.schemas.farmLotSchema",
        "peekOfCode": "class FarmLotSchema(BaseModel):\n    id: int\n    nombre: str\n    area: float\n    latitud: Optional[float] = None  # Permitir None\n    longitud: Optional[float] = None  # Permitir None\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.farmLotSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "kind": 6,
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "peekOfCode": "class FarmSchema(BaseModel):\n    id: Optional[int] = Field(None, description=\"ID de la finca\")\n    nombre: str\n    ubicacion: Optional[str] = None\n    area_total: float\n    latitud: Optional[Union[float, Decimal]] = None\n    longitud: Optional[Union[float, Decimal]] = None\n    ciudad: Optional[str] = None\n    departamento: Optional[str] = None\n    pais: Optional[str] = None",
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "FincaResponseSchema",
        "kind": 6,
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "peekOfCode": "class FincaResponseSchema(FarmSchema):\n    id: Optional[int] = Field(None, description=\"ID de la finca\")\nclass UpdateFarmSchema(BaseModel):\n    nombre: Optional[str] = None\n    ubicacion: Optional[str] = None\n    area_total: Optional[float] = None\n    latitud: Optional[Union[float, Decimal]] = None\n    longitud: Optional[Union[float, Decimal]] = None\n    ciudad: Optional[str] = None  # Nuevo campo\n    departamento: Optional[str] = None  # Nuevo campo",
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "UpdateFarmSchema",
        "kind": 6,
        "importPath": "src.schemas.farmSchema",
        "description": "src.schemas.farmSchema",
        "peekOfCode": "class UpdateFarmSchema(BaseModel):\n    nombre: Optional[str] = None\n    ubicacion: Optional[str] = None\n    area_total: Optional[float] = None\n    latitud: Optional[Union[float, Decimal]] = None\n    longitud: Optional[Union[float, Decimal]] = None\n    ciudad: Optional[str] = None  # Nuevo campo\n    departamento: Optional[str] = None  # Nuevo campo\n    pais: Optional[str] = None  # Nuevo campo\n    @validator('area_total', pre=True, always=True)",
        "detail": "src.schemas.farmSchema",
        "documentation": {}
    },
    {
        "label": "TotalAdditionalCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class TotalAdditionalCostsResponse(BaseModel):\n    total_additional_costs: float\n# Respuesta para gastos financieros\nclass TotalFinancialExpensesResponse(BaseModel):\n    total_financial_expenses: float\n# Respuesta para costos de labores culturales\nclass RealLaborCostsResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_horas: int",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "TotalFinancialExpensesResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class TotalFinancialExpensesResponse(BaseModel):\n    total_financial_expenses: float\n# Respuesta para costos de labores culturales\nclass RealLaborCostsResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_horas: int\nclass MachineryCostResponse(BaseModel):\n    nombre: str\n    costo_total: float",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "RealLaborCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class RealLaborCostsResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_horas: int\nclass MachineryCostResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_horas: int\nclass AgriculturalInputCostsResponse(BaseModel):\n    nombre: str",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "MachineryCostResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class MachineryCostResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_horas: int\nclass AgriculturalInputCostsResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_cantidad: float\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class AgriculturalInputCostsResponse(BaseModel):\n    nombre: str\n    costo_total: float\n    total_cantidad: float\n    class Config:\n        orm_mode = True\n# Respuesta general que incluya listas de cada tipo de costo\nclass AllCostsResponse(BaseModel):\n    additional_costs: TotalAdditionalCostsResponse\n    financial_expenses: TotalFinancialExpensesResponse",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "AllCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.financialSchema",
        "description": "src.schemas.financialSchema",
        "peekOfCode": "class AllCostsResponse(BaseModel):\n    additional_costs: TotalAdditionalCostsResponse\n    financial_expenses: TotalFinancialExpensesResponse\n    labor_costs: List[RealLaborCostsResponse]\n    machinery_costs: List[MachineryCostResponse]\n    agricultural_input_costs: List[AgriculturalInputCostsResponse]",
        "detail": "src.schemas.financialSchema",
        "documentation": {}
    },
    {
        "label": "HarvestBase",
        "kind": 6,
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "peekOfCode": "class HarvestBase(BaseModel):\n    cultivo_id: int = Field(..., description=\"ID del cultivo relacionado\")\n    fecha_estimada_cosecha: Optional[date] = Field(None, description=\"Fecha estimada de cosecha\")\n    fecha_cosecha: Optional[date] = Field(None, description=\"Fecha de cosecha\")\n    precio_carga_mercado: float = Field(..., description=\"Precio por carga en el mercado\")\n    gasto_transporte_cosecha: float = Field(..., description=\"Gastos de transporte de la cosecha\")\n    gasto_recoleccion: float = Field(..., description=\"Gastos de recolección\")\n    cantidad_producida_cosecha: float = Field(..., description=\"Cantidad producida en la cosecha\")\n    venta_cosecha: float = Field(..., description=\"Total de venta de la cosecha\")\n    class Config:",
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "HarvestCreate",
        "kind": 6,
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "peekOfCode": "class HarvestCreate(HarvestBase):\n    pass\nclass HarvestUpdate(BaseModel):\n    cultivo_id: Optional[int]  # Permitir actualizar el cultivo_id\n    fecha_estimada_cosecha: Optional[date]\n    fecha_cosecha: Optional[date]\n    precio_carga_mercado: Optional[float]\n    gasto_transporte_cosecha: Optional[float]\n    gasto_recoleccion: Optional[float]\n    cantidad_producida_cosecha: Optional[float]",
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "HarvestUpdate",
        "kind": 6,
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "peekOfCode": "class HarvestUpdate(BaseModel):\n    cultivo_id: Optional[int]  # Permitir actualizar el cultivo_id\n    fecha_estimada_cosecha: Optional[date]\n    fecha_cosecha: Optional[date]\n    precio_carga_mercado: Optional[float]\n    gasto_transporte_cosecha: Optional[float]\n    gasto_recoleccion: Optional[float]\n    cantidad_producida_cosecha: Optional[float]\n    venta_cosecha: Optional[float]\n    class Config:",
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "HarvestOut",
        "kind": 6,
        "importPath": "src.schemas.harvestSchema",
        "description": "src.schemas.harvestSchema",
        "peekOfCode": "class HarvestOut(HarvestBase):\n    id: int = Field(..., description=\"ID de la cosecha\")\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.harvestSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalBase",
        "kind": 6,
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "peekOfCode": "class LaborCulturalBase(BaseModel):\n    nombre: str\n    descripcion: Optional[str] = None\n    precio_hectaria: Optional[float]\n    precio_hectaria_estimada: Optional[float]\n    id_etapa_fenologica: Optional[int]  # Relación con PhenologicalStage\nclass LaborCulturalCreate(LaborCulturalBase):\n    pass\nclass LaborCulturalUpdate(LaborCulturalBase):\n    pass",
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalCreate",
        "kind": 6,
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "peekOfCode": "class LaborCulturalCreate(LaborCulturalBase):\n    pass\nclass LaborCulturalUpdate(LaborCulturalBase):\n    pass\nclass LaborCulturalResponse(LaborCulturalBase):\n    id: int  # Incluir el ID en la respuesta\n    precio_hora_real: Optional[float] = None  # Incluir precio_hora_real en la respuesta\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalUpdate",
        "kind": 6,
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "peekOfCode": "class LaborCulturalUpdate(LaborCulturalBase):\n    pass\nclass LaborCulturalResponse(LaborCulturalBase):\n    id: int  # Incluir el ID en la respuesta\n    precio_hora_real: Optional[float] = None  # Incluir precio_hora_real en la respuesta\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalResponse",
        "kind": 6,
        "importPath": "src.schemas.laborCulturalSchema",
        "description": "src.schemas.laborCulturalSchema",
        "peekOfCode": "class LaborCulturalResponse(LaborCulturalBase):\n    id: int  # Incluir el ID en la respuesta\n    precio_hora_real: Optional[float] = None  # Incluir precio_hora_real en la respuesta\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.laborCulturalSchema",
        "documentation": {}
    },
    {
        "label": "LandSchema",
        "kind": 6,
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "peekOfCode": "class LandSchema(BaseModel):\n    id: Optional[int] = None\n    nombre: str\n    finca_id: int\n    finca_nombre: Optional[str] = None  # Nuevo campo para incluir el nombre de la finca\n    area: float\n    latitud: Optional[Decimal]  \n    longitud: Optional[Decimal] \n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "UpdateLandSchema",
        "kind": 6,
        "importPath": "src.schemas.landSchema",
        "description": "src.schemas.landSchema",
        "peekOfCode": "class UpdateLandSchema(BaseModel):\n    nombre: Optional[str] = None\n    finca_id: Optional[int] = None\n    area: Optional[float] = None\n    unidad_area_id: Optional[int] = None\n    latitud: Optional[Decimal] = None\n    longitud: Optional[Decimal] = None",
        "detail": "src.schemas.landSchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaCreate",
        "kind": 6,
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "peekOfCode": "class MaquinariaAgricolaCreate(BaseModel):\n    name: str\n    description: Optional[str] = None\n    costPerHour: float\nclass MaquinariaAgricolaUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    costPerHour: Optional[float] = None\nclass MaquinariaAgricola(BaseModel):\n    id: int",
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricolaUpdate",
        "kind": 6,
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "peekOfCode": "class MaquinariaAgricolaUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    costPerHour: Optional[float] = None\nclass MaquinariaAgricola(BaseModel):\n    id: int\n    name: str\n    description: Optional[str] = None\n    costPerHour: float\n    class Config:",
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MaquinariaAgricola",
        "kind": 6,
        "importPath": "src.schemas.machinerySchema",
        "description": "src.schemas.machinerySchema",
        "peekOfCode": "class MaquinariaAgricola(BaseModel):\n    id: int\n    name: str\n    description: Optional[str] = None\n    costPerHour: float\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.machinerySchema",
        "documentation": {}
    },
    {
        "label": "MonitoringBase",
        "kind": 6,
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "peekOfCode": "class MonitoringBase(BaseModel):\n    tipo: str = Field(..., max_length=100)\n    variedad_arroz_etapa_fenologica_id: Optional[int]\n    recomendacion: Optional[str]\n    crop_id: int\n    fecha_programada: date  # Campo obligatorio para la fecha programada\n    fecha_finalizacion: Optional[date] = None  # Campo opcional para la fecha de finalización\n    estado: int = Field(1, ge=1, le=2)  # Estado con valores restringidos (1: Pendiente, 2: Terminado)\nclass MonitoringCreate(MonitoringBase):\n    pass",
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringCreate",
        "kind": 6,
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "peekOfCode": "class MonitoringCreate(MonitoringBase):\n    pass\nclass MonitoringUpdate(MonitoringBase):\n    pass\nclass MonitoringOut(MonitoringBase):\n    id: int\n    etapaNombre: Optional[str] = None  # Campo opcional para el nombre de la etapa fenológica\n    class Config:\n        orm_mode = True\nclass CompleteMonitoringRequest(BaseModel):",
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringUpdate",
        "kind": 6,
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "peekOfCode": "class MonitoringUpdate(MonitoringBase):\n    pass\nclass MonitoringOut(MonitoringBase):\n    id: int\n    etapaNombre: Optional[str] = None  # Campo opcional para el nombre de la etapa fenológica\n    class Config:\n        orm_mode = True\nclass CompleteMonitoringRequest(BaseModel):\n    fecha_finalizacion: date",
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "MonitoringOut",
        "kind": 6,
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "peekOfCode": "class MonitoringOut(MonitoringBase):\n    id: int\n    etapaNombre: Optional[str] = None  # Campo opcional para el nombre de la etapa fenológica\n    class Config:\n        orm_mode = True\nclass CompleteMonitoringRequest(BaseModel):\n    fecha_finalizacion: date",
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "CompleteMonitoringRequest",
        "kind": 6,
        "importPath": "src.schemas.monitoringSchema",
        "description": "src.schemas.monitoringSchema",
        "peekOfCode": "class CompleteMonitoringRequest(BaseModel):\n    fecha_finalizacion: date",
        "detail": "src.schemas.monitoringSchema",
        "documentation": {}
    },
    {
        "label": "Machinery",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class Machinery(BaseModel):\n    id: int\n    name: str  # Incluir el nombre de la maquinaria\n    class Config:\n        orm_mode = True\nclass OpMechBase(BaseModel):\n    taskId: int\n    mechanizationName: str\n    machineryId: int\n    hoursUsed: float",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechBase",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class OpMechBase(BaseModel):\n    taskId: int\n    mechanizationName: str\n    machineryId: int\n    hoursUsed: float\nclass OpMechCreate(OpMechBase):\n    pass\nclass OpMechUpdate(OpMechBase):\n    pass\nclass OpMech(OpMechBase):",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechCreate",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class OpMechCreate(OpMechBase):\n    pass\nclass OpMechUpdate(OpMechBase):\n    pass\nclass OpMech(OpMechBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass OpMechResponse(BaseModel):\n    id: int",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechUpdate",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class OpMechUpdate(OpMechBase):\n    pass\nclass OpMech(OpMechBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass OpMechResponse(BaseModel):\n    id: int\n    taskId: int\n    mechanizationName: str",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMech",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class OpMech(OpMechBase):\n    id: int\n    class Config:\n        orm_mode = True\nclass OpMechResponse(BaseModel):\n    id: int\n    taskId: int\n    mechanizationName: str\n    machineryId: int\n    hoursUsed: float",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "OpMechResponse",
        "kind": 6,
        "importPath": "src.schemas.opMechSchema",
        "description": "src.schemas.opMechSchema",
        "peekOfCode": "class OpMechResponse(BaseModel):\n    id: int\n    taskId: int\n    mechanizationName: str\n    machineryId: int\n    hoursUsed: float\n    machinery: Machinery  # Relación para obtener el name de la maquinaria\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.opMechSchema",
        "documentation": {}
    },
    {
        "label": "PasswordUpdate",
        "kind": 6,
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "peekOfCode": "class PasswordUpdate(BaseModel):\n    new_password: str\nclass ChangePasswordResponse(BaseModel):\n    message: str\n    change_password_required: bool\nclass ChangePassword(BaseModel):\n    email: str\n    old_password: str\n    new_password: str\nclass PasswordResetRequest(BaseModel):",
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "ChangePasswordResponse",
        "kind": 6,
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "peekOfCode": "class ChangePasswordResponse(BaseModel):\n    message: str\n    change_password_required: bool\nclass ChangePassword(BaseModel):\n    email: str\n    old_password: str\n    new_password: str\nclass PasswordResetRequest(BaseModel):\n    email: str",
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "ChangePassword",
        "kind": 6,
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "peekOfCode": "class ChangePassword(BaseModel):\n    email: str\n    old_password: str\n    new_password: str\nclass PasswordResetRequest(BaseModel):\n    email: str",
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "kind": 6,
        "importPath": "src.schemas.passwordShema",
        "description": "src.schemas.passwordShema",
        "peekOfCode": "class PasswordResetRequest(BaseModel):\n    email: str",
        "detail": "src.schemas.passwordShema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageBase",
        "kind": 6,
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "peekOfCode": "class PhenologicalStageBase(BaseModel):\n    nombre: str\n    fase: str\nclass PhenologicalStageCreate(PhenologicalStageBase):\n    pass\nclass PhenologicalStageUpdate(PhenologicalStageBase):\n    pass\nclass PhenologicalStageResponse(PhenologicalStageBase):\n    id: int\n    class Config:",
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageCreate",
        "kind": 6,
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "peekOfCode": "class PhenologicalStageCreate(PhenologicalStageBase):\n    pass\nclass PhenologicalStageUpdate(PhenologicalStageBase):\n    pass\nclass PhenologicalStageResponse(PhenologicalStageBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageUpdate",
        "kind": 6,
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "peekOfCode": "class PhenologicalStageUpdate(PhenologicalStageBase):\n    pass\nclass PhenologicalStageResponse(PhenologicalStageBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageResponse",
        "kind": 6,
        "importPath": "src.schemas.phenologicalStageSchema",
        "description": "src.schemas.phenologicalStageSchema",
        "peekOfCode": "class PhenologicalStageResponse(PhenologicalStageBase):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.phenologicalStageSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitarioBase",
        "kind": 6,
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "peekOfCode": "class DiagnosticoFitosanitarioBase(BaseModel):\n    resultado_ia: str\n    ruta: str\n    cultivo_id: int\n    fecha_diagnostico: date\n    confianza_promedio: Optional[float] = None\n    tipo_problema: Optional[str] = None\n    imagenes_analizadas: Optional[int] = None\n    exportado: Optional[bool] = False\n    comparacion_diagnostico: Optional[str] = None",
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitarioCreate",
        "kind": 6,
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "peekOfCode": "class DiagnosticoFitosanitarioCreate(DiagnosticoFitosanitarioBase):\n    pass\nclass DiagnosticoFitosanitarioUpdate(DiagnosticoFitosanitarioBase):\n    pass\nclass CultivoInfo(BaseModel):\n    id: int\n    cropName: str  # Nombre del cultivo en el esquema de salida\n    class Config:\n        orm_mode = True\nclass DiagnosticoFitosanitarioOut(BaseModel):",
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitarioUpdate",
        "kind": 6,
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "peekOfCode": "class DiagnosticoFitosanitarioUpdate(DiagnosticoFitosanitarioBase):\n    pass\nclass CultivoInfo(BaseModel):\n    id: int\n    cropName: str  # Nombre del cultivo en el esquema de salida\n    class Config:\n        orm_mode = True\nclass DiagnosticoFitosanitarioOut(BaseModel):\n    id: int\n    resultado_ia: str",
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "CultivoInfo",
        "kind": 6,
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "peekOfCode": "class CultivoInfo(BaseModel):\n    id: int\n    cropName: str  # Nombre del cultivo en el esquema de salida\n    class Config:\n        orm_mode = True\nclass DiagnosticoFitosanitarioOut(BaseModel):\n    id: int\n    resultado_ia: str\n    ruta: str\n    cultivo_id: int",
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "DiagnosticoFitosanitarioOut",
        "kind": 6,
        "importPath": "src.schemas.phytosanitaryDiagnosisSchema",
        "description": "src.schemas.phytosanitaryDiagnosisSchema",
        "peekOfCode": "class DiagnosticoFitosanitarioOut(BaseModel):\n    id: int\n    resultado_ia: str\n    ruta: str\n    cultivo_id: int\n    fecha_diagnostico: date\n    confianza_promedio: Optional[float] = None\n    tipo_problema: Optional[str] = None\n    imagenes_analizadas: Optional[int] = None\n    exportado: Optional[bool] = False",
        "detail": "src.schemas.phytosanitaryDiagnosisSchema",
        "documentation": {}
    },
    {
        "label": "TipoInsumoSchema",
        "kind": 6,
        "importPath": "src.schemas.preciosinsumoSchema",
        "description": "src.schemas.preciosinsumoSchema",
        "peekOfCode": "class TipoInsumoSchema(BaseModel):\n    id: Optional[int]  # Puede ser nulo\n    nombre: Optional[str]  # Puede ser nulo\nclass AgriculturalInputWithTipoSchema(BaseModel):\n    concepto: str  # Cambiado de \"nombre\" a \"concepto\"\n    descripcion: Optional[str]\n    valor_unitario: float  # Cambiado de \"costo_unitario\" a \"valor_unitario\"\n    cantidad: Optional[int]  # Cambiado de \"cantidad_insumo\" a \"cantidad\"\n    valor_total: float  # Nuevo campo para el total calculado\n    tipo_insumo: Optional[TipoInsumoSchema]  # Permite que tipo_insumo sea None",
        "detail": "src.schemas.preciosinsumoSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputWithTipoSchema",
        "kind": 6,
        "importPath": "src.schemas.preciosinsumoSchema",
        "description": "src.schemas.preciosinsumoSchema",
        "peekOfCode": "class AgriculturalInputWithTipoSchema(BaseModel):\n    concepto: str  # Cambiado de \"nombre\" a \"concepto\"\n    descripcion: Optional[str]\n    valor_unitario: float  # Cambiado de \"costo_unitario\" a \"valor_unitario\"\n    cantidad: Optional[int]  # Cambiado de \"cantidad_insumo\" a \"cantidad\"\n    valor_total: float  # Nuevo campo para el total calculado\n    tipo_insumo: Optional[TipoInsumoSchema]  # Permite que tipo_insumo sea None\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.preciosinsumoSchema",
        "documentation": {}
    },
    {
        "label": "RoleBase",
        "kind": 6,
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "peekOfCode": "class RoleBase(BaseModel):\n    nombre: str\n    descripcion: str\nclass Role(RoleBase):\n    id: int\n    descripcion: Optional[str] = None\n    class Config:\n        orm_mode = True\nclass RoleCreate(RoleBase):\n    permisos: List[int]  # Lista de IDs de permisos para asociar al rol",
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "peekOfCode": "class Role(RoleBase):\n    id: int\n    descripcion: Optional[str] = None\n    class Config:\n        orm_mode = True\nclass RoleCreate(RoleBase):\n    permisos: List[int]  # Lista de IDs de permisos para asociar al rol\nclass RoleUpdate(RoleBase):\n    nombre: str = None\n    descripcion: str = None",
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleCreate",
        "kind": 6,
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "peekOfCode": "class RoleCreate(RoleBase):\n    permisos: List[int]  # Lista de IDs de permisos para asociar al rol\nclass RoleUpdate(RoleBase):\n    nombre: str = None\n    descripcion: str = None",
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "RoleUpdate",
        "kind": 6,
        "importPath": "src.schemas.roleShema",
        "description": "src.schemas.roleShema",
        "peekOfCode": "class RoleUpdate(RoleBase):\n    nombre: str = None\n    descripcion: str = None",
        "detail": "src.schemas.roleShema",
        "documentation": {}
    },
    {
        "label": "BiologicalParamOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class BiologicalParamOut(BaseModel):\n    biomasa_microbiana: Optional[float] = None\n    actividad_enzimatica: Optional[float] = None\n    model_config = {\n        \"from_attributes\": True\n    }\n# Soil Type Output with id\nclass SoilTypeOut(BaseModel):\n    id: int\n    descripcion: str",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilTypeOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class SoilTypeOut(BaseModel):\n    id: int\n    descripcion: str\n    model_config = {\n        \"from_attributes\": True\n    }\nclass TextureOut(BaseModel):\n    id: int\n    descripcion: str\n# Define Color output schema",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "TextureOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class TextureOut(BaseModel):\n    id: int\n    descripcion: str\n# Define Color output schema\nclass ColorOut(BaseModel):\n    id: int\n    descripcion: str\n# Land Output with id\nclass LandOut(BaseModel):\n    id: int",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "ColorOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class ColorOut(BaseModel):\n    id: int\n    descripcion: str\n# Land Output with id\nclass LandOut(BaseModel):\n    id: int\n    nombre: str\n    model_config = {\n        \"from_attributes\": True\n    }",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "LandOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class LandOut(BaseModel):\n    id: int\n    nombre: str\n    model_config = {\n        \"from_attributes\": True\n    }\n# Macronutrient Output\nclass MacronutrientOut(BaseModel):\n    n: Optional[float] = None\n    p: Optional[float] = None",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "MacronutrientOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class MacronutrientOut(BaseModel):\n    n: Optional[float] = None\n    p: Optional[float] = None\n    k: Optional[float] = None\n    ca: Optional[float] = None\n    mg: Optional[float] = None\n    s: Optional[float] = None\n    model_config = {\n        \"from_attributes\": True\n    }",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "MicronutrientOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class MicronutrientOut(BaseModel):\n    fe: Optional[float] = None\n    cu: Optional[float] = None\n    mn: Optional[float] = None\n    zn: Optional[float] = None\n    b: Optional[float] = None\n    model_config = {\n        \"from_attributes\": True\n    }\n# Chemical Parameter Output",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "ChemicalParamOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class ChemicalParamOut(BaseModel):\n    ph: Optional[float] = None\n    conductividad_electrica: Optional[float] = None\n    materia_organica: Optional[float] = None\n    capacidad_intercambio_cationico: Optional[float] = None\n    macronutriente: Optional[List[MacronutrientOut]] = None\n    micronutriente: Optional[List[MicronutrientOut]] = None\n    model_config = {\n        \"from_attributes\": True\n    }",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "PhysicalParamOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class PhysicalParamOut(BaseModel):\n    textura_id: Optional[int] = None\n    textura_descripcion: Optional[str] = None\n    densidad_aparente: Optional[float] = None\n    profundidad_efectiva: Optional[float] = None\n    color_id: Optional[int] = None\n    color_descripcion: Optional[str] = None\n    model_config = {\n        \"from_attributes\": True\n    }",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisCreate",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class SoilAnalysisCreate(BaseModel):\n    lote_id: int\n    fecha_analisis: str\n    tipo_suelo_id: int\n    archivo_reporte: Optional[str] = None\n    parametro_biologico: Optional[BiologicalParamOut] = None\n    parametro_quimico: Optional[ChemicalParamOut] = None\n    parametro_fisico: Optional[PhysicalParamOut] = None\n    model_config = {\n        \"from_attributes\": True",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class SoilAnalysisOut(BaseModel):\n    id: int\n    fecha_analisis: str\n    soil_type: Optional[SoilTypeOut] = None\n    lote: Optional[LandOut] = None\n    archivo_reporte: Optional[str] = None\n    parametro_biologico: Optional[BiologicalParamOut] = None\n    parametro_quimico: Optional[ChemicalParamOut] = None\n    parametro_fisico: Optional[PhysicalParamOut] = None\n    model_config = {",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "SoilAnalysisSimpleOut",
        "kind": 6,
        "importPath": "src.schemas.soilAnalysisSchema",
        "description": "src.schemas.soilAnalysisSchema",
        "peekOfCode": "class SoilAnalysisSimpleOut(BaseModel):\n    id: int\n    message: str\n    model_config = {\n        \"from_attributes\": True\n    }",
        "detail": "src.schemas.soilAnalysisSchema",
        "documentation": {}
    },
    {
        "label": "CulturalWorkOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class CulturalWorkOut(BaseModel):\n    fecha_inicio: datetime\n    fecha_culminacion: Optional[datetime] = None\n    actividad: str\n    maquinaria: Optional[str] = None  # Puede no aplicar\n    operario: str\n    descripcion: Optional[str] = None\n    valor: float\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "CropOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class CropOut(BaseModel):\n    id: int\n    cropName: str  # Campo del modelo de cultivo\n    class Config:\n        orm_mode = True\nclass LaborCulturalOut(BaseModel):\n    id: int\n    nombre: str  # Nombre de la labor cultural\n    descripcion: Optional[str] = None  # Descripción de la labor cultural\n    precio_hectaria: Optional[float] = None  # Precio por hectárea",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "LaborCulturalOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class LaborCulturalOut(BaseModel):\n    id: int\n    nombre: str  # Nombre de la labor cultural\n    descripcion: Optional[str] = None  # Descripción de la labor cultural\n    precio_hectaria: Optional[float] = None  # Precio por hectárea\n    precio_hectaria_estimada: Optional[float] = None  # Precio estimado por hectárea\n    class Config:\n        orm_mode = True\nclass AgriculturalInputOut(BaseModel):\n    id: int",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "AgriculturalInputOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class AgriculturalInputOut(BaseModel):\n    id: int\n    nombre: str  # Nombre del insumo agrícola\n    descripcion: Optional[str] = None  # Descripción opcional\n    costo_unitario: Optional[float] = None  # Costo unitario\n    precio_unitario_estimado: Optional[float] = None  # Precio estimado\n    class Config:\n        orm_mode = True\nclass UserOut(BaseModel):\n    id: int",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    nombre: str  # Nombre del usuario\n    email: str  # Correo del usuario\n    rol: Optional[str] = None  # Rol del usuario (opcional)\n    class Config:\n        orm_mode = True\nclass MachineryOut(BaseModel):\n    id: int\n    name: str  # Nombre de la maquinaria",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "MachineryOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class MachineryOut(BaseModel):\n    id: int\n    name: str  # Nombre de la maquinaria\n    description: Optional[str] = None  # Descripción opcional\n    costPerHour: float  # Costo por hora real\n    estimatedCostPerHour: Optional[float] = None  # Costo por hora estimado\n    class Config:\n        orm_mode = True\nclass EstadoOut(BaseModel):\n    id: int",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "EstadoOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class EstadoOut(BaseModel):\n    id: int\n    nombre: str  # Nombre del estado\n    class Config:\n        orm_mode = True\nclass TaskBase(BaseModel):\n    fecha_estimada: date\n    fecha_realizacion: Optional[date] = None\n    descripcion: Optional[str] = None\n    estado_id: int",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskBase",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class TaskBase(BaseModel):\n    fecha_estimada: date\n    fecha_realizacion: Optional[date] = None\n    descripcion: Optional[str] = None\n    estado_id: int\n    es_mecanizable: bool\n    cultivo_id: int\n    labor_cultural_id: int\n    insumo_agricola_id: Optional[int] = None\n    usuario_id: int",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskCreate",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class TaskCreate(TaskBase):\n    cultivo_id: int  # Mantén cultivo_id en los esquemas de creación y actualización\n    pass\nclass TaskUpdate(BaseModel):\n    fecha_estimada: Optional[date] = None\n    fecha_realizacion: Optional[date] = None\n    descripcion: Optional[str] = None\n    estado_id: Optional[int] = None\n    es_mecanizable: Optional[bool] = None\n    cultivo_id: Optional[int] = None",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskUpdate",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class TaskUpdate(BaseModel):\n    fecha_estimada: Optional[date] = None\n    fecha_realizacion: Optional[date] = None\n    descripcion: Optional[str] = None\n    estado_id: Optional[int] = None\n    es_mecanizable: Optional[bool] = None\n    cultivo_id: Optional[int] = None\n    labor_cultural_id: Optional[int] = None\n    insumo_agricola_id: Optional[int] = None\n    usuario_id: Optional[int] = None",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "TaskOut",
        "kind": 6,
        "importPath": "src.schemas.taskSchema",
        "description": "src.schemas.taskSchema",
        "peekOfCode": "class TaskOut(TaskBase):\n    id: int\n    cultivo: CropOut  # Relación con CropOut\n    labor_cultural: LaborCulturalOut  # Relación con LaborCulturalOut\n    insumo_agricola: Optional[AgriculturalInputOut] = None  # Relación con AgriculturalInputOut\n    usuario: UserOut  # Relación con UserOut\n    maquinaria_agricola: Optional[MachineryOut] = None  # Relación con MachineryOut\n    estado: EstadoOut  # Relación con EstadoOut\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.taskSchema",
        "documentation": {}
    },
    {
        "label": "CostsData",
        "kind": 6,
        "importPath": "src.schemas.totalcostsSchema",
        "description": "src.schemas.totalcostsSchema",
        "peekOfCode": "class CostsData(BaseModel):\n    concepto: str\n    total: float\nclass TotalCostsResponse(BaseModel):\n    costos: List[CostsData]\nclass OverallTotalResponse(BaseModel):\n    total_general: float",
        "detail": "src.schemas.totalcostsSchema",
        "documentation": {}
    },
    {
        "label": "TotalCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.totalcostsSchema",
        "description": "src.schemas.totalcostsSchema",
        "peekOfCode": "class TotalCostsResponse(BaseModel):\n    costos: List[CostsData]\nclass OverallTotalResponse(BaseModel):\n    total_general: float",
        "detail": "src.schemas.totalcostsSchema",
        "documentation": {}
    },
    {
        "label": "OverallTotalResponse",
        "kind": 6,
        "importPath": "src.schemas.totalcostsSchema",
        "description": "src.schemas.totalcostsSchema",
        "peekOfCode": "class OverallTotalResponse(BaseModel):\n    total_general: float",
        "detail": "src.schemas.totalcostsSchema",
        "documentation": {}
    },
    {
        "label": "UnidadAreaSchema",
        "kind": 6,
        "importPath": "src.schemas.unidadAreaSchema",
        "description": "src.schemas.unidadAreaSchema",
        "peekOfCode": "class UnidadAreaSchema(BaseModel):\n    id: int\n    unidad: str",
        "detail": "src.schemas.unidadAreaSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleShema",
        "kind": 6,
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "peekOfCode": "class UserFarmRoleShema(BaseModel):\n    usuario_id: int\n    finca_id: int\n    farm_name: Optional[str] = None\n    class Config:\n        orm_mode = True\n# Esquema de Crear\nclass UserFarmRoleCreate(BaseModel):\n    usuario_id: int\n    finca_id: int",
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleCreate",
        "kind": 6,
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "peekOfCode": "class UserFarmRoleCreate(BaseModel):\n    usuario_id: int\n    finca_id: int\n    class Config:\n        orm_mode = True\n# Esquema de Actualizar\nclass UserFarmRoleUpdate(BaseModel):\n    usuario_id: Optional[int] = None  \n    finca_id: Optional[int] = None    \n    class Config:",
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "UserFarmRoleUpdate",
        "kind": 6,
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "peekOfCode": "class UserFarmRoleUpdate(BaseModel):\n    usuario_id: Optional[int] = None  \n    finca_id: Optional[int] = None    \n    class Config:\n        orm_mode = True\nclass AssignFarmRequest(BaseModel):\n    farm_id: int\nclass FarmSchema(BaseModel):\n    id: int\n    nombre: str",
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "AssignFarmRequest",
        "kind": 6,
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "peekOfCode": "class AssignFarmRequest(BaseModel):\n    farm_id: int\nclass FarmSchema(BaseModel):\n    id: int\n    nombre: str\n    # Agrega otros campos de la finca si los necesitas\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "FarmSchema",
        "kind": 6,
        "importPath": "src.schemas.userFarmRoleSchema",
        "description": "src.schemas.userFarmRoleSchema",
        "peekOfCode": "class FarmSchema(BaseModel):\n    id: int\n    nombre: str\n    # Agrega otros campos de la finca si los necesitas\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.userFarmRoleSchema",
        "documentation": {}
    },
    {
        "label": "CreateUserRole",
        "kind": 6,
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "peekOfCode": "class CreateUserRole(BaseModel):\n    usuario_id: int\n    rol_id: int\n    class Config:\n        orm_mode = True\nclass UpdateUserRole(BaseModel):\n    usuario_id: int\n    rol_id: int\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRole",
        "kind": 6,
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "peekOfCode": "class UpdateUserRole(BaseModel):\n    usuario_id: int\n    rol_id: int\n    class Config:\n        orm_mode = True\nclass AdminStatus(BaseModel):\n    is_admin: bool",
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "AdminStatus",
        "kind": 6,
        "importPath": "src.schemas.userRoleSchema",
        "description": "src.schemas.userRoleSchema",
        "peekOfCode": "class AdminStatus(BaseModel):\n    is_admin: bool",
        "detail": "src.schemas.userRoleSchema",
        "documentation": {}
    },
    {
        "label": "CrearUsuario",
        "kind": 6,
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "peekOfCode": "class CrearUsuario(BaseModel):\n    nombre: str\n    apellido: str\n    email: str\n    password: str\nclass UpdateUser(BaseModel):\n    nombre: Optional[str] = None\n    apellido: Optional[str] = None\n    email: Optional[str] = None\n    password: Optional[str] = None",
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "UpdateUser",
        "kind": 6,
        "importPath": "src.schemas.userShema",
        "description": "src.schemas.userShema",
        "peekOfCode": "class UpdateUser(BaseModel):\n    nombre: Optional[str] = None\n    apellido: Optional[str] = None\n    email: Optional[str] = None\n    password: Optional[str] = None\n    primer_login: Optional[bool] = None",
        "detail": "src.schemas.userShema",
        "documentation": {}
    },
    {
        "label": "VariableCostsCreate",
        "kind": 6,
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "peekOfCode": "class VariableCostsCreate(BaseModel):\n    id_costos_adicionales: int  # Relación con la tabla costos_adicionales\n    id_agua: int  # Relación con la tabla agua\n    id_gastos_administrativos_financieros: int  # Relación con la tabla gastos_administrativos_financieros\n    descripcion: Optional[str] = None  # Descripción opcional\n    class Config:\n        orm_mode = True\n# Esquema para la respuesta de los gastos variables\nclass VariableCostsResponse(BaseModel):\n    id: int",
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VariableCostsResponse",
        "kind": 6,
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "peekOfCode": "class VariableCostsResponse(BaseModel):\n    id: int\n    descripcion: Optional[str] = None  # Descripción opcional\n    costos_adicionales_nombre: Optional[float] = 0.0  # Permite None y asigna 0.0 por defecto\n    agua_consumo: Optional[float] = 0.0  # Permite None y asigna 0.0 por defecto\n    gastos_administrativos_impuesto: Optional[float] = 0.0  # Permite None y asigna 0.0 por defecto\n    agua_consumo_energia: Optional[float] = 0.0  # Permite None y asigna 0.0 por defecto\n    class Config:\n        orm_mode = True\n# Esquema para los detalles de los gastos variables (resumen de costos)",
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VariableCostsDetailsResponse",
        "kind": 6,
        "importPath": "src.schemas.variableCostSchema",
        "description": "src.schemas.variableCostSchema",
        "peekOfCode": "class VariableCostsDetailsResponse(BaseModel):\n    id: int\n    costos_adicionales_nombre: str  # Nombre del costo adicional\n    agua_consumo: float  # Consumo de agua\n    gastos_administrativos_impuesto: float  # Impuesto de los gastos administrativos\n    class Config:\n        orm_mode = True",
        "detail": "src.schemas.variableCostSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozCreate",
        "kind": 6,
        "importPath": "src.schemas.varietyArrozSchema",
        "description": "src.schemas.varietyArrozSchema",
        "peekOfCode": "class VarietyArrozCreate(BaseModel):\n    nombre: str\n    numero_registro_productor_ica: str\n    caracteristicas_variedad: Optional[str] = None\n# Esquema para la respuesta de variedades (incluye ID)\nclass VarietyArrozResponse(VarietyArrozCreate):\n    id: int\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.varietyArrozSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozResponse",
        "kind": 6,
        "importPath": "src.schemas.varietyArrozSchema",
        "description": "src.schemas.varietyArrozSchema",
        "peekOfCode": "class VarietyArrozResponse(VarietyArrozCreate):\n    id: int\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.varietyArrozSchema",
        "documentation": {}
    },
    {
        "label": "VarietyArrozResponse",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class VarietyArrozResponse(BaseModel):\n    id: int\n    nombre: str\nclass PhenologicalStageResponse(BaseModel):\n    id: int\n    nombre: str\nclass VarietyRiceStageBase(BaseModel):\n    # Campos base sin incluir la relación directa variety_id, solo variety y phenological_stage\n    etapa_fenologica_id: Optional[int] = None\n    dias_duracion: Optional[int] = None",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "PhenologicalStageResponse",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class PhenologicalStageResponse(BaseModel):\n    id: int\n    nombre: str\nclass VarietyRiceStageBase(BaseModel):\n    # Campos base sin incluir la relación directa variety_id, solo variety y phenological_stage\n    etapa_fenologica_id: Optional[int] = None\n    dias_duracion: Optional[int] = None\n    nombre: Optional[str] = None\nclass VarietyRiceStageCreate(VarietyRiceStageBase):\n    variedad_arroz_id: int",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageBase",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class VarietyRiceStageBase(BaseModel):\n    # Campos base sin incluir la relación directa variety_id, solo variety y phenological_stage\n    etapa_fenologica_id: Optional[int] = None\n    dias_duracion: Optional[int] = None\n    nombre: Optional[str] = None\nclass VarietyRiceStageCreate(VarietyRiceStageBase):\n    variedad_arroz_id: int\nclass VarietyRiceStageUpdate(VarietyRiceStageBase):\n    variedad_arroz_id: Optional[int] = None\nclass VarietyRiceStageResponse(VarietyRiceStageBase):",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageCreate",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class VarietyRiceStageCreate(VarietyRiceStageBase):\n    variedad_arroz_id: int\nclass VarietyRiceStageUpdate(VarietyRiceStageBase):\n    variedad_arroz_id: Optional[int] = None\nclass VarietyRiceStageResponse(VarietyRiceStageBase):\n    id: int\n    variety: Optional[VarietyArrozResponse] = None\n    phenological_stage: Optional[PhenologicalStageResponse] = None\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageUpdate",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class VarietyRiceStageUpdate(VarietyRiceStageBase):\n    variedad_arroz_id: Optional[int] = None\nclass VarietyRiceStageResponse(VarietyRiceStageBase):\n    id: int\n    variety: Optional[VarietyArrozResponse] = None\n    phenological_stage: Optional[PhenologicalStageResponse] = None\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "VarietyRiceStageResponse",
        "kind": 6,
        "importPath": "src.schemas.varietyRiceStageSchema",
        "description": "src.schemas.varietyRiceStageSchema",
        "peekOfCode": "class VarietyRiceStageResponse(VarietyRiceStageBase):\n    id: int\n    variety: Optional[VarietyArrozResponse] = None\n    phenological_stage: Optional[PhenologicalStageResponse] = None\n    class Config:\n            orm_mode = True",
        "detail": "src.schemas.varietyRiceStageSchema",
        "documentation": {}
    },
    {
        "label": "LoteIdWithCoordinatesRequest",
        "kind": 6,
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "peekOfCode": "class LoteIdWithCoordinatesRequest(BaseModel):\n    lote_id: int\n    latitud: float\n    longitud: float\n    class Config:\n        orm_mode = True\nclass WeatherRecordCreate(BaseModel):\n    lote_id: Optional[int] = None\n    fecha: Optional[date] = None\n    hora: Optional[time] = None",
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "WeatherRecordCreate",
        "kind": 6,
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "peekOfCode": "class WeatherRecordCreate(BaseModel):\n    lote_id: Optional[int] = None\n    fecha: Optional[date] = None\n    hora: Optional[time] = None\n    temperatura: Optional[float] = None\n    presion_atmosferica: Optional[float] = None\n    humedad: Optional[float] = None\n    precipitacion: Optional[float] = None\n    indice_ultravioleta: Optional[float] = None\n    horas_sol: Optional[float] = None",
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "WeatherRecordResponse",
        "kind": 6,
        "importPath": "src.schemas.weatherRecordSchema",
        "description": "src.schemas.weatherRecordSchema",
        "peekOfCode": "class WeatherRecordResponse(BaseModel):\n    id: int\n    lote_id: int\n    fecha: date\n    hora: Optional[time] = None  # Cambiado a Optional para aceptar None\n    temperatura: float\n    presion_atmosferica: float\n    humedad: float\n    precipitacion: Optional[float] = None\n    indice_ultravioleta: float",
        "detail": "src.schemas.weatherRecordSchema",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "mock_user",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)\n    MagicMock(spec=Machinery)\n    MagicMock(spec=Estado)\n    MagicMock(spec=Farm)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "valid_login_request",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def valid_login_request():\n    \"\"\"Crea una solicitud de inicio de sesión válida\"\"\"\n    return LoginRequest(\n        email=\"juanperez@example.com\",\n        password=\"Password123\"\n    )\n@patch('src.controller.authController.verify_password')\n@patch('src.controller.authController.create_access_token')\n@patch('src.controller.authController.create_refresh_token')\ndef test_login_success(mock_create_refresh_token, mock_create_access_token, ",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_success",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_success(mock_create_refresh_token, mock_create_access_token, \n                      mock_verify_password, mock_session, mock_user, valid_login_request):\n    \"\"\"Prueba un inicio de sesión exitoso\"\"\"\n    # Configurar mocks\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    mock_verify_password.return_value = True\n    mock_create_access_token.return_value = \"test_access_token\"\n    mock_create_refresh_token.return_value = \"test_refresh_token\"\n    # Ejecutar la función\n    result = login(valid_login_request, mock_session)",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_first_time",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_first_time(mock_create_refresh_token, mock_create_access_token, \n                         mock_verify_password, mock_session, mock_user, valid_login_request):\n    \"\"\"Prueba un primer inicio de sesión (necesita cambio de contraseña)\"\"\"\n    # Configurar mocks\n    mock_user.primer_login = True\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    mock_verify_password.return_value = True\n    mock_create_access_token.return_value = \"test_access_token\"\n    mock_create_refresh_token.return_value = \"test_refresh_token\"\n    # Ejecutar la función",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_user_not_found",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_user_not_found(mock_session, valid_login_request):\n    \"\"\"Prueba el caso en que no se encuentra el usuario por email\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por email\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        login(valid_login_request, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Incorrect email\" in excinfo.value.detail\n@patch('src.controller.authController.verify_password')",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_incorrect_password",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_incorrect_password(mock_verify_password, mock_session, mock_user, valid_login_request):\n    \"\"\"Prueba el caso de contraseña incorrecta\"\"\"\n    # Configurar mocks\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    mock_verify_password.return_value = False  # Contraseña incorrecta\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        login(valid_login_request, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Incorrect password\" in excinfo.value.detail",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_invalid_email_format",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_invalid_email_format(mock_session):\n    \"\"\"Prueba validación de formato de email\"\"\"\n    # Email sin @\n    invalid_login = LoginRequest(\n        email=\"juanperezexample.com\",\n        password=\"Password123\"\n    )\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        login(invalid_login, mock_session)",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_login_invalid_password_format",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_login_invalid_password_format(mock_session):\n    \"\"\"Prueba validación de formato de contraseña\"\"\"\n    # Contraseña simple\n    weak_login = LoginRequest(\n        email=\"juanperez@example.com\",\n        password=\"simple\"\n    )\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        login(weak_login, mock_session)",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_logout_success",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_logout_success(mock_session):\n    \"\"\"Prueba un cierre de sesión exitoso\"\"\"\n    # Crear un token mock\n    token = MagicMock(spec=TokenTable)\n    token.status = True\n    # Configurar el mock de la sesión para devolver el token\n    mock_session.query.return_value.filter.return_value.first.return_value = token\n    # Ejecutar la función\n    result = logout(1, mock_session)\n    # Verificaciones",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "test_logout_not_found",
        "kind": 2,
        "importPath": "tests.auth.test_login",
        "description": "tests.auth.test_login",
        "peekOfCode": "def test_logout_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra un token activo para cerrar sesión\"\"\"\n    # Configurar el mock de la sesión para devolver None\n    mock_session.query",
        "detail": "tests.auth.test_login",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.add = MagicMock()\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef valid_crop_data():\n    MagicMock(spec=Land)",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "valid_crop_data",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def valid_crop_data():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=Task)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "mock_variety",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def mock_variety():\n    \"\"\"Crea un mock para la variedad de arroz\"\"\"\n    variety = MagicMock(spec=VarietyArrozModel)\n    variety.id = 1\n    variety.nombre = \"Variedad Premium\"\n    return variety\n@pytest.fixture\ndef mock_land():\n    \"\"\"Crea un mock para el lote\"\"\"\n    land = MagicMock(spec=Land)",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "mock_land",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def mock_land():\n    \"\"\"Crea un mock para el lote\"\"\"\n    land = MagicMock(spec=Land)\n    land.id = 1\n    land.nombre = \"Lote Norte\"\n    land.finca_id = 1\n    land.slug = \"lote-norte\"\n    return land\n@pytest.fixture\ndef mock_farm():",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "mock_farm",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def mock_farm():\n    \"\"\"Crea un mock para la finca\"\"\"\n    farm = MagicMock(spec=Farm)\n    farm.id = 1\n    farm.nombre = \"Finca Las Palmas\"\n    farm.slug = \"finca-las-palmas\"\n    return farm\ndef test_create_crop_success(mock_session, valid_crop_data, mock_variety, mock_land, mock_farm):\n    \"\"\"Prueba la creación exitosa de un cultivo\"\"\"\n    # Configuración del mock para simular la asignación de ID después de refresh",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "test_create_crop_success",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def test_create_crop_success(mock_session, valid_crop_data, mock_variety, mock_land, mock_farm):\n    \"\"\"Prueba la creación exitosa de un cultivo\"\"\"\n    # Configuración del mock para simular la asignación de ID después de refresh\n    def set_id_and_slug(crop):\n        crop.id = 1\n        crop.slug = \"arroz-premium\"\n    mock_session.refresh.side_effect = set_id_and_slug\n    # Configurar las consultas para los objetos relacionados\n    def mock_query_side_effect(model):\n        if model == VarietyArrozModel:",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "test_create_crop_variety_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def test_create_crop_variety_not_found(mock_session, valid_crop_data, mock_land, mock_farm):\n    \"\"\"Prueba la creación de un cultivo cuando no se encuentra la variedad\"\"\"\n    # Configurar la asignación de ID después de refresh\n    def set_id_and_slug(crop):\n        crop.id = 1\n        crop.slug = \"arroz-premium\"\n    mock_session.refresh.side_effect = set_id_and_slug\n    # Configurar las consultas para los objetos relacionados\n    def mock_query_side_effect(model):\n        if model == VarietyArrozModel:",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "test_create_crop_land_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def test_create_crop_land_not_found(mock_session, valid_crop_data, mock_variety, mock_farm):\n    \"\"\"Prueba la creación de un cultivo cuando no se encuentra el lote\"\"\"\n    # Configurar la asignación de ID después de refresh\n    def set_id_and_slug(crop):\n        crop.id = 1\n        crop.slug = \"arroz-premium\"\n    mock_session.refresh.side_effect = set_id_and_slug\n    # Configurar las consultas para los objetos relacionados\n    def mock_query_side_effect(model):\n        if model == VarietyArrozModel:",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "test_create_crop_farm_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def test_create_crop_farm_not_found(mock_session, valid_crop_data, mock_variety, mock_land):\n    \"\"\"Prueba la creación de un cultivo cuando no se encuentra la finca\"\"\"\n    # Configurar la asignación de ID después de refresh\n    def set_id_and_slug(crop):\n        crop.id = 1\n        crop.slug = \"arroz-premium\"\n    mock_session.refresh.side_effect = set_id_and_slug\n    # Configurar las consultas para los objetos relacionados\n    def mock_query_side_effect(model):\n        if model == VarietyArrozModel:",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "test_create_crop_database_error",
        "kind": 2,
        "importPath": "tests.crop.test_create_crop",
        "description": "tests.crop.test_create_crop",
        "peekOfCode": "def test_create_crop_database_error(mock_session, valid_crop_data):\n    \"\"\"Prueba el manejo de errores de base de datos durante la creación\"\"\"\n    # Configurar el mock de la sesión para lanzar una excepción al llamar a commit\n    mock_session.commit.side_effect = Exception(\"Database error\")\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        createCrop(valid_crop_data, mock_session)\n    assert excinfo.value.status_code == 500\n    assert \"Error inesperado al crear el cultivo\" in excinfo.value.detail\nif __name__ == \"__main__\":",
        "detail": "tests.crop.test_create_crop",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    return session\n@pytest.fixture\ndef mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "mock_crop",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=Task)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "test_delete_crop_success",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def test_delete_crop_success(mock_session, mock_crop):\n    \"\"\"Prueba la eliminación exitosa de un cultivo\"\"\"\n    # Configurar el mock de la sesión para devolver el cultivo cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    # Ejecutar la función\n    result = deleteCrop(1, mock_session)\n    # Verificaciones\n    mock_session.delete.assert_called_once_with(mock_crop)\n    assert mock_session.commit.called\n    assert result[\"message\"] == \"Crop deleted successfully\"",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "test_delete_crop_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def test_delete_crop_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra el cultivo para eliminar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        deleteCrop(999, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"Crop not found\" in excinfo.value.detail\n    # Verificar que no se llamó a delete ni commit",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "test_delete_crop_database_error",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def test_delete_crop_database_error(mock_session, mock_crop):\n    \"\"\"Prueba el manejo de errores de base de datos durante la eliminación\"\"\"\n    # Configurar el mock de la sesión para devolver el cultivo pero lanzar una excepción al eliminar\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    mock_session.commit.side_effect = Exception(\"Database error\")\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        deleteCrop(1, mock_session)\n    assert excinfo.value.status_code == 500\n    assert \"Error al eliminar el cultivo\" in excinfo.value.detail",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "test_delete_crop_with_invalid_id",
        "kind": 2,
        "importPath": "tests.crop.test_delete_crop",
        "description": "tests.crop.test_delete_crop",
        "peekOfCode": "def test_delete_crop_with_invalid_id(mock_session):\n    \"\"\"Prueba la eliminación con un ID inválido (por ejemplo, None o no numérico)\"\"\"\n    # Configuramos el mock para que lance una excepción si se intenta filtrar con un ID inválido\n    mock_session.query.return_value.filter.side_effect = Exception(\"Invalid ID type\")\n    # Verificar que se maneja correctamente la excepción\n    with pytest.raises(HTTPException) as excinfo:\n        deleteCrop(None, mock_session)\n    assert excinfo.value.status_code == 500\n    assert \"Error al eliminar el cultivo\" in excinfo.value.detail\nif __name__ == \"__main__\":",
        "detail": "tests.crop.test_delete_crop",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    return session\n@pytest.fixture\ndef mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "mock_crop",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=Task)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "mock_crops",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def mock_crops():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=Task)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_success",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_success(mock_session, mock_crop):\n    \"\"\"Prueba obtener un cultivo por ID exitosamente\"\"\"\n    # Configurar el mock de la sesión\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_filter = MagicMock()\n    mock_first = MagicMock(return_value=mock_crop)\n    mock_session.query.return_value = mock_query\n    mock_query.options.return_value = mock_options\n    mock_options.filter.return_value = mock_filter",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra el cultivo\"\"\"\n    # Configurar el mock de la sesión para devolver None\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_filter = MagicMock()\n    mock_first = MagicMock(return_value=None)\n    mock_session.query.return_value = mock_query\n    mock_query.options.return_value = mock_options\n    mock_options.filter.return_value = mock_filter",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_variety_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_variety_not_found(mock_session):\n    \"\"\"Prueba el caso en que el cultivo no tiene variedad asociada\"\"\"\n    # Crear un crop sin variedad\n    crop_no_variety = MagicMock(spec=Crop)\n    crop_no_variety.id = 1\n    crop_no_variety.cropName = \"Arroz Sin Variedad\"\n    crop_no_variety.varietyId = None\n    crop_no_variety.plotId = 1\n    crop_no_variety.variety = None  # Sin variedad\n    # Configurar el mock de la sesión",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_all_crops_success",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_all_crops_success(mock_session, mock_crops):\n    \"\"\"Prueba obtener todos los cultivos exitosamente\"\"\"\n    # Configurar el mock de la sesión\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_all = MagicMock(return_value=mock_crops)\n    mock_session.query.return_value = mock_query\n    mock_query.options.return_value = mock_options\n    mock_options.all.return_value = mock_crops\n    # Ejecutar la función",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_all_crops_empty",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_all_crops_empty(mock_session):\n    \"\"\"Prueba obtener todos los cultivos cuando no hay ninguno\"\"\"\n    # Configurar el mock de la sesión para devolver lista vacía\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_all = MagicMock(return_value=[])\n    mock_session.query.return_value = mock_query\n    mock_query.options.return_value = mock_options\n    mock_options.all.return_value = []\n    # Ejecutar la función",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crops_by_land_success",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crops_by_land_success(mock_session, mock_crops):\n    \"\"\"Prueba obtener cultivos por lote exitosamente\"\"\"\n    # Asumir que ambos cultivos pertenecen al mismo lote\n    for crop in mock_crops:\n        crop.plotId = 1\n    # Configurar el mock de la sesión\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_filter = MagicMock()\n    mock_all = MagicMock(return_value=mock_crops)",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crops_by_land_empty",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crops_by_land_empty(mock_session):\n    \"\"\"Prueba obtener cultivos por lote cuando no hay ninguno\"\"\"\n    # Configurar el mock de la sesión para devolver lista vacía\n    mock_query = MagicMock()\n    mock_options = MagicMock()\n    mock_filter = MagicMock()\n    mock_all = MagicMock(return_value=[])\n    mock_session.query.return_value = mock_query\n    mock_query.options.return_value = mock_options\n    mock_options.filter.return_value = mock_filter",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_info_success",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_info_success(mock_session):\n    \"\"\"Prueba obtener información del cultivo por slugs exitosamente\"\"\"\n    # Mocks para finca, lote, cultivo y variedad\n    mock_farm = MagicMock(spec=Farm)\n    mock_farm.id = 1\n    mock_farm.nombre = \"Finca Las Palmas\"\n    mock_farm.slug = \"finca-las-palmas\"\n    mock_land = MagicMock(spec=Land)\n    mock_land.id = 1\n    mock_land.nombre = \"Lote Norte\"",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_info_finca_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_info_finca_not_found(mock_session):\n    \"\"\"Prueba obtener información cuando no se encuentra la finca\"\"\"\n    # Configurar la consulta para devolver None para la finca\n    def mock_query_side_effect(model):\n        mock_filter = MagicMock()\n        if model == Farm:\n            mock_filter.filter.return_value.first.return_value = None\n        return mock_filter\n    mock_session.query.side_effect = mock_query_side_effect\n    # Verificar que se lanza la excepción correcta",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "test_get_crop_info_lote_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_get_crop",
        "description": "tests.crop.test_get_crop",
        "peekOfCode": "def test_get_crop_info_lote_not_found(mock_session):\n    \"\"\"Prueba obtener información cuando no se encuentra el lote\"\"\"\n    # Mocks para finca\n    mock_farm = MagicMock(spec=Farm)\n    mock_farm.id = 1\n    mock_farm.slug = \"finca-las-palmas\"\n    # Configurar las consultas\n    def mock_query_side_effect(model):\n        mock_filter = MagicMock()\n        if model == Farm:",
        "detail": "tests.crop.test_get_crop",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "mock_crop",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def mock_crop():\n    MagicMock(spec=Land)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=Task)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "valid_update_data",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def valid_update_data():\n    \"\"\"Crea datos válidos para actualizar un cultivo\"\"\"\n    return CropUpdate(\n        cropName=\"Arroz Premium Actualizado\",\n        varietyId=2,\n        plotId=1,\n        slug=\"nuevo-slug\",\n        estimatedHarvestDate=datetime.date.today() + datetime.timedelta(days=90)\n    )\ndef test_update_crop_success(mock_session, mock_crop, valid_update_data):",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "test_update_crop_success",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def test_update_crop_success(mock_session, mock_crop, valid_update_data):\n    \"\"\"Prueba la actualización exitosa de un cultivo\"\"\"\n    # Configurar el mock de la sesión para devolver el cultivo cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    # Ejecutar la función\n    result = updateCrop(1, valid_update_data, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called\n    assert mock_session.refresh.called\n    # Verificar que los atributos se hayan actualizado correctamente",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "test_update_crop_partial",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def test_update_crop_partial(mock_session, mock_crop):\n    partial_update = CropUpdate(cropName=\"Parcial\")\n    # Mockear el comportamiento\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    result = updateCrop(1, partial_update, mock_session)\n    assert mock_crop.cropName == \"Parcial\"\n    assert mock_crop.varietyId == 1  # No cambia\n    assert mock_session.commit.called\ndef test_update_crop_not_found(mock_session, valid_update_data):\n    \"\"\"Prueba el caso en que no se encuentra el cultivo para actualizar\"\"\"",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "test_update_crop_not_found",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def test_update_crop_not_found(mock_session, valid_update_data):\n    \"\"\"Prueba el caso en que no se encuentra el cultivo para actualizar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateCrop(999, valid_update_data, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"Crop not found\" in excinfo.value.detail\n    # Verificar que no se llamó a commit ni refresh",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "test_update_crop_database_error",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def test_update_crop_database_error(mock_session, mock_crop, valid_update_data):\n    \"\"\"Prueba el manejo de errores de base de datos durante la actualización\"\"\"\n    # Configurar el mock de la sesión para lanzar una excepción al llamar a commit\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    mock_session.commit.side_effect = Exception(\"Database error\")\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateCrop(1, valid_update_data, mock_session)\n    assert excinfo.value.status_code == 500\n    assert \"Error al actualizar el cultivo\" in excinfo.value.detail",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "test_update_crop_empty_values",
        "kind": 2,
        "importPath": "tests.crop.test_update_crop",
        "description": "tests.crop.test_update_crop",
        "peekOfCode": "def test_update_crop_empty_values(mock_session, mock_crop):\n    \"\"\"Prueba la actualización con valores vacíos o None\"\"\"\n    # Crear datos de actualización con algunos valores vacíos\n    empty_update = CropUpdate(cropName=\"\", varietyId=None)\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_crop\n    # Ejecutar la función\n    result = updateCrop(1, empty_update, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called",
        "detail": "tests.crop.test_update_crop",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.add = MagicMock()\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef valid_farm_data():\n    \"\"\"Crea datos válidos para una finca\"\"\"",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "valid_farm_data",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def valid_farm_data():\n    \"\"\"Crea datos válidos para una finca\"\"\"\n    return FarmSchema(\n        nombre=\"Finca Las Palmas\",\n        ubicacion=\"Valle Central\",\n        area_total=120.5,\n        latitud=4.5709,\n        longitud=-74.2973,\n        slug=\"finca-las-palmas\",\n        ciudad=\"Bogotá\",",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "test_create_farm_success",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def test_create_farm_success(mock_session, valid_farm_data):\n    \"\"\"Prueba la creación exitosa de una finca\"\"\"\n    # Configuración del mock para simular la asignación de ID después de refresh\n    def set_id(farm):\n        farm.id = 1\n    mock_session.refresh.side_effect = set_id\n    # Relaciones mockeadas\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "test_create_farm_empty_name",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def test_create_farm_empty_name(mock_session):\n    \"\"\"Prueba la validación de nombre vacío\"\"\"\n    # Crear datos con nombre vacío\n    farm_data = FarmSchema(\n        nombre=\"   \",  # Nombre con espacios en blanco\n        ubicacion=\"Valle Central\",\n        area_total=120.5,\n        latitud=4.5709,\n        longitud=-74.2973,\n        slug=\"finca-las-palmas\",",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "test_create_farm_invalid_location",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def test_create_farm_invalid_location(mock_session, valid_farm_data):\n    \"\"\"Prueba la validación de ubicación con caracteres especiales\"\"\"\n    # Modificar ubicación para incluir caracteres no alfabéticos\n    valid_farm_data.ubicacion = \"Valle123!@#\"\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        createFarm(valid_farm_data, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Farm location must only contain letters\" in excinfo.value.detail\ndef test_create_farm_name_too_long(mock_session, valid_farm_data):",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "test_create_farm_name_too_long",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def test_create_farm_name_too_long(mock_session, valid_farm_data):\n    \"\"\"Prueba la validación de longitud del nombre\"\"\"\n    # Crear nombre muy largo (más de 50 caracteres)\n    valid_farm_data.nombre = \"A\" * 51\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        createFarm(valid_farm_data, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Farm name must be at most 50 characters\" in excinfo.value.detail\ndef test_create_farm_location_too_long(mock_session, valid_farm_data):",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "test_create_farm_location_too_long",
        "kind": 2,
        "importPath": "tests.farm.test_create_farm",
        "description": "tests.farm.test_create_farm",
        "peekOfCode": "def test_create_farm_location_too_long(mock_session, valid_farm_data):\n    \"\"\"Prueba la validación de longitud de la ubicación\"\"\"\n    # Crear ubicación muy larga (más de 100 caracteres)\n    valid_farm_data.ubicacion = \"A\" * 101\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        createFarm(valid_farm_data, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Location must be at most 100 characters\" in excinfo.value.detail\nif __name__ == \"__main__\":",
        "detail": "tests.farm.test_create_farm",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.farm.test_delete_farm",
        "description": "tests.farm.test_delete_farm",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.delete = MagicMock()\n    session.commit = MagicMock()\n    return session\n@pytest.fixture\ndef sample_farm(mock_session):\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)",
        "detail": "tests.farm.test_delete_farm",
        "documentation": {}
    },
    {
        "label": "sample_farm",
        "kind": 2,
        "importPath": "tests.farm.test_delete_farm",
        "description": "tests.farm.test_delete_farm",
        "peekOfCode": "def sample_farm(mock_session):\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Task)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.farm.test_delete_farm",
        "documentation": {}
    },
    {
        "label": "test_delete_farm_success",
        "kind": 2,
        "importPath": "tests.farm.test_delete_farm",
        "description": "tests.farm.test_delete_farm",
        "peekOfCode": "def test_delete_farm_success(mock_session, sample_farm):\n    \"\"\"Prueba la eliminación exitosa de una finca\"\"\"\n    # Configurar el comportamiento del mock\n    mock_session.query.return_value.filter.return_value.first.return_value = sample_farm\n    # Ejecutar la función\n    result = deleteFarm(1, mock_session)\n    # Verificaciones\n    mock_session.delete.assert_called_once_with(sample_farm)  # Sin usar assert\n    mock_session.commit.assert_called_once()\n    assert mock_session.commit.called",
        "detail": "tests.farm.test_delete_farm",
        "documentation": {}
    },
    {
        "label": "test_delete_farm_not_found",
        "kind": 2,
        "importPath": "tests.farm.test_delete_farm",
        "description": "tests.farm.test_delete_farm",
        "peekOfCode": "def test_delete_farm_not_found(mock_session):\n    \"\"\"Prueba la eliminación de una finca cuando el ID no existe\"\"\"\n    # Configurar el comportamiento del mock para devolver None\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        deleteFarm(999, mock_session)\n    # Verificaciones\n    assert excinfo.value.status_code == 404\n    assert \"Finca con id 999 no encontrada\" in excinfo.value.detail",
        "detail": "tests.farm.test_delete_farm",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    return session\n@pytest.fixture\ndef sample_farm():\n    \"\"\"Crea una finca de ejemplo para pruebas\"\"\"\n    return Farm(\n        id=1,\n        nombre=\"Finca Las Palmas\",",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "sample_farm",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def sample_farm():\n    \"\"\"Crea una finca de ejemplo para pruebas\"\"\"\n    return Farm(\n        id=1,\n        nombre=\"Finca Las Palmas\",\n        ubicacion=\"Valle Central\",\n        area_total=120.5,\n        latitud=4.5709,\n        longitud=-74.2973,\n        slug=\"finca-las-palmas\",",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "test_get_all_farms_success",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def test_get_all_farms_success(mock_session):\n    \"\"\"Prueba la obtención exitosa de todas las fincas\"\"\"\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Task)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=AgriculturalInput)",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "test_get_all_farms_empty",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def test_get_all_farms_empty(mock_session):\n    \"\"\"Prueba la obtención de fincas cuando no hay fincas registradas\"\"\"\n    # Configurar el comportamiento del mock para devolver lista vacía\n    mock_session.query.return_value.all.return_value = []\n    # Ejecutar la función\n    result = getAllFarms(mock_session)\n    # Verificaciones\n    assert isinstance(result, list)\n    assert len(result) == 0\n    mock_session.query.assert_called_once_with(Farm)",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "test_get_all_farms_null_fields",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def test_get_all_farms_null_fields(mock_session):\n    \"\"\"Prueba la obtención de fincas con campos nulos\"\"\"\n    # Crear datos simulados de fincas con campos nulos\n    farm_with_nulls = Farm(\n        id=3,\n        nombre=\"Finca Incompleta\",\n        ubicacion=None,  # Campo nulo\n        area_total=None,  # Campo nulo\n        latitud=4.5000,\n        longitud=-74.5000,",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "test_get_farm_by_id_success",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def test_get_farm_by_id_success(mock_session, sample_farm):\n    \"\"\"Prueba la obtención exitosa de una finca por ID\"\"\"\n    # Configurar el comportamiento del mock\n    mock_session.query.return_value.filter.return_value.first.return_value = sample_farm\n    # Ejecutar la función\n    result = getFarmById(1, mock_session)\n    # Verificaciones\n    assert result.id == 1\n    assert result.nombre == \"Finca Las Palmas\"\n    assert result.ubicacion == \"Valle Central\"",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "test_get_farm_by_id_not_found",
        "kind": 2,
        "importPath": "tests.farm.test_get_all_farms",
        "description": "tests.farm.test_get_all_farms",
        "peekOfCode": "def test_get_farm_by_id_not_found(mock_session):\n    \"\"\"Prueba la obtención de una finca cuando el ID no existe\"\"\"\n    # Configurar el comportamiento del mock para devolver None\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        getFarmById(999, mock_session)\n    # Verificaciones\n    assert excinfo.value.status_code == 404\n    assert \"Finca con id 999 no encontrada\" in excinfo.value.detail",
        "detail": "tests.farm.test_get_all_farms",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef sample_farm(mock_session):\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "sample_farm",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def sample_farm(mock_session):\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Task)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "valid_update_data",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def valid_update_data():\n    \"\"\"Crea datos válidos para actualizar una finca\"\"\"\n    return UpdateFarmSchema(\n        nombre=\"Finca El Paraíso\",\n        ubicacion=\"Montaña\",\n        area_total=200.0,\n        latitud=4.6123,\n        longitud=-74.1234,\n        ciudad=\"Medellín\",\n        departamento=\"Antioquia\",",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "test_update_farm_success",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def test_update_farm_success(mock_session, sample_farm, valid_update_data):\n    \"\"\"Prueba la actualización exitosa de una finca\"\"\"\n    # Configurar el comportamiento del mock\n    mock_session.query.return_value.filter.return_value.first.return_value = sample_farm\n    # Ejecutar la función\n    result = updateFarm(1, valid_update_data, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called\n    assert mock_session.refresh.called\n    assert \"msg\" in result",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "test_update_farm_not_found",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def test_update_farm_not_found(mock_session, valid_update_data):\n    \"\"\"Prueba la actualización de una finca cuando el ID no existe\"\"\"\n    # Configurar el comportamiento del mock para devolver None\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateFarm(999, valid_update_data, mock_session)\n    # Verificaciones\n    assert excinfo.value.status_code == 404\n    assert \"Finca con id 999 no encontrada\" in excinfo.value.detail",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "test_update_farm_partial",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def test_update_farm_partial(mock_session, sample_farm):\n    \"\"\"Prueba la actualización parcial de una finca\"\"\"\n    # Crear datos de actualización con solo algunos campos\n    partial_update = UpdateFarmSchema(\n        nombre=\"Finca Renovada\",\n        ubicacion=None,  # No actualizar ubicación\n        area_total=None,  # No actualizar área\n        latitud=None,\n        longitud=None,\n        ciudad=None,",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "test_update_farm_invalid_location",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def test_update_farm_invalid_location(mock_session, sample_farm):\n    \"\"\"Prueba la validación de ubicación con caracteres especiales\"\"\"\n    # Crear datos de actualización con ubicación inválida\n    invalid_update = UpdateFarmSchema(\n        nombre=None,\n        ubicacion=\"Valle123!@#\",  # Ubicación con caracteres no alfabéticos\n        area_total=None,\n        latitud=None,\n        longitud=None,\n        ciudad=None,",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "test_update_farm_name_too_long",
        "kind": 2,
        "importPath": "tests.farm.test_update_farm",
        "description": "tests.farm.test_update_farm",
        "peekOfCode": "def test_update_farm_name_too_long(mock_session, sample_farm):\n    \"\"\"Prueba la validación de longitud del nombre\"\"\"\n    # Crear datos de actualización con nombre muy largo\n    invalid_update = UpdateFarmSchema(\n        nombre=\"A\" * 51,  # Nombre con más de 50 caracteres\n        ubicacion=None,\n        area_total=None,\n        latitud=None,\n        longitud=None,\n        ciudad=None,",
        "detail": "tests.farm.test_update_farm",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.add = MagicMock()\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef valid_land_data(mock_session):\n    MagicMock(spec=Crop)",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "valid_land_data",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def valid_land_data(mock_session):\n    MagicMock(spec=Crop)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)\n    MagicMock(spec=VarietyArrozModel)\n    MagicMock(spec=VarietyRiceStageModel)\n    MagicMock(spec=Task)\n    MagicMock(spec=Monitoring)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=Harvest)",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "test_create_land_success",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def test_create_land_success(mock_session, valid_land_data):\n    \"\"\"Prueba la creación exitosa de un lote\"\"\"\n    # Configuración del mock para simular la asignación de ID después de refresh\n    def set_id_and_slug(land):\n        land.id = 1\n        land.slug = \"lote-norte\"\n    mock_session.refresh.side_effect = set_id_and_slug\n    # Ejecutar la función\n    result = createLand(valid_land_data, mock_session)\n    # Verificaciones",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "test_create_land_empty_name",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def test_create_land_empty_name(mock_session):\n    \"\"\"Prueba la validación de nombre vacío\"\"\"\n    # Crear datos con nombre vacío\n    land_data = LandSchema(\n        nombre=\"  \".strip(),  # Nombre con espacios en blanco\n        finca_id=1,\n        area=50.5,\n        latitud=4.5709,\n        longitud=-74.2973\n    )",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "test_create_land_invalid_area",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def test_create_land_invalid_area(mock_session, valid_land_data):\n    \"\"\"Prueba la validación de área negativa\"\"\"\n    # Modificar área para que sea negativa\n    valid_land_data.area = -10\n    # Ejecutar la función\n    result = createLand(valid_land_data, mock_session)\n    # Verificar que se crea correctamente (el controlador actual no valida área negativa)\n    assert mock_session.add.called\n    assert \"msg\" in result\n    assert result[\"msg\"] == \"Lote creado satisfactoriamente\"",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "test_create_land_generate_slug",
        "kind": 2,
        "importPath": "tests.land.test_create_land",
        "description": "tests.land.test_create_land",
        "peekOfCode": "def test_create_land_generate_slug(mock_session):\n    \"\"\"Prueba la generación de slug con caracteres especiales\"\"\"\n    # Crear datos con nombre que contenga caracteres especiales\n    land_data = LandSchema(\n        nombre=\"Lote #1 (Norte)\",\n        finca_id=1,\n        area=50.5,\n        latitud=4.5709,\n        longitud=-74.2973\n    )",
        "detail": "tests.land.test_create_land",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.land.test_delete_land",
        "description": "tests.land.test_delete_land",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.delete = MagicMock()\n    session.commit = MagicMock()\n    return session\n@pytest.fixture\ndef mock_land():\n    \"\"\"Crea un mock de un objeto Land existente\"\"\"\n    land = MagicMock(spec=Land)",
        "detail": "tests.land.test_delete_land",
        "documentation": {}
    },
    {
        "label": "mock_land",
        "kind": 2,
        "importPath": "tests.land.test_delete_land",
        "description": "tests.land.test_delete_land",
        "peekOfCode": "def mock_land():\n    \"\"\"Crea un mock de un objeto Land existente\"\"\"\n    land = MagicMock(spec=Land)\n    land.id = 1\n    land.nombre = \"Lote Norte\"\n    land.finca_id = 1\n    land.area = 50.5\n    land.latitud = 4.5709\n    land.longitud = -74.2973\n    land.slug = \"lote-norte\"",
        "detail": "tests.land.test_delete_land",
        "documentation": {}
    },
    {
        "label": "test_delete_land_success",
        "kind": 2,
        "importPath": "tests.land.test_delete_land",
        "description": "tests.land.test_delete_land",
        "peekOfCode": "def test_delete_land_success(mock_session, mock_land):\n    \"\"\"Prueba la eliminación exitosa de un lote\"\"\"\n    # Configurar el mock de la sesión para devolver el lote cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    # Ejecutar la función\n    result = deleteLand(1, mock_session)\n    # Verificaciones\n    assert mock_session.delete.called\n    assert mock_session.commit.called\n    assert \"msg\" in result",
        "detail": "tests.land.test_delete_land",
        "documentation": {}
    },
    {
        "label": "test_delete_land_not_found",
        "kind": 2,
        "importPath": "tests.land.test_delete_land",
        "description": "tests.land.test_delete_land",
        "peekOfCode": "def test_delete_land_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra el lote para eliminar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        deleteLand(999, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"Lote con id 999 no encontrado\" in excinfo.value.detail\n    # Verificar que no se llamó a delete ni commit",
        "detail": "tests.land.test_delete_land",
        "documentation": {}
    },
    {
        "label": "test_delete_land_database_error",
        "kind": 2,
        "importPath": "tests.land.test_delete_land",
        "description": "tests.land.test_delete_land",
        "peekOfCode": "def test_delete_land_database_error(mock_session, mock_land):\n    \"\"\"Prueba el manejo de errores de base de datos durante la eliminación\"\"\"\n    # Configurar el mock de la sesión para lanzar una excepción al llamar a commit\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    mock_session.commit.side_effect = Exception(\"Database error\")\n    # Verificar que se propaga la excepción\n    with pytest.raises(Exception) as excinfo:\n        deleteLand(1, mock_session)\n    assert str(excinfo.value) == \"Database error\"\n    # Verificar que se llamó a delete pero no se completó el commit",
        "detail": "tests.land.test_delete_land",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    return session\n@pytest.fixture\ndef mock_land():\n    \"\"\"Crea un mock de un objeto Land\"\"\"\n    land = MagicMock(spec=Land)\n    land.id = 1\n    land.nombre = \"Lote Norte\"",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "mock_land",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def mock_land():\n    \"\"\"Crea un mock de un objeto Land\"\"\"\n    land = MagicMock(spec=Land)\n    land.id = 1\n    land.nombre = \"Lote Norte\"\n    land.finca_id = 1\n    land.area = 50.5\n    land.latitud = 4.5709\n    land.longitud = -74.2973\n    land.slug = \"lote-norte\"",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "test_get_all_lands_success",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def test_get_all_lands_success(mock_session):\n    \"\"\"Prueba obtener todos los lotes exitosamente\"\"\"\n    # Crear una lista de lotes mock\n    mock_land1 = MagicMock(spec=Land)\n    mock_land1.id = 1\n    mock_land1.nombre = \"Lote Norte\"\n    mock_land2 = MagicMock(spec=Land)\n    mock_land2.id = 2\n    mock_land2.nombre = \"Lote Sur\"\n    mock_lands = [mock_land1, mock_land2]",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "test_get_all_lands_empty",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def test_get_all_lands_empty(mock_session):\n    \"\"\"Prueba el caso en que no hay lotes\"\"\"\n    # Configurar el mock de la sesión para devolver una lista vacía\n    mock_session.query.return_value.all.return_value = []\n    # Ejecutar la función\n    result = getAllLands(mock_session)\n    # Verificaciones\n    assert len(result) == 0\n    assert result == []\ndef test_get_land_by_id_success(mock_session, mock_land):",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "test_get_land_by_id_success",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def test_get_land_by_id_success(mock_session, mock_land):\n    \"\"\"Prueba obtener un lote por ID exitosamente\"\"\"\n    # Configurar el mock de la sesión para devolver el lote cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    # Ejecutar la función\n    result = getLandById(1, mock_session)\n    # Verificaciones\n    assert result[\"id\"] == 1\n    assert result[\"nombre\"] == \"Lote Norte\"\n    assert result[\"finca_id\"] == 1",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "test_get_land_by_id_not_found",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def test_get_land_by_id_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra el lote por ID\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        getLandById(999, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"Lote con id 999 no encontrado\" in excinfo.value.detail\ndef test_get_land_by_id_no_farm(mock_session):",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "test_get_land_by_id_no_farm",
        "kind": 2,
        "importPath": "tests.land.test_get_lands",
        "description": "tests.land.test_get_lands",
        "peekOfCode": "def test_get_land_by_id_no_farm(mock_session):\n    \"\"\"Prueba el caso en que el lote no tiene finca asociada\"\"\"\n    # Crear un lote sin finca asociada\n    land_no_farm = MagicMock(spec=Land)\n    land_no_farm.id = 1\n    land_no_farm.nombre = \"Lote Sin Finca\"\n    land_no_farm.finca_id = None\n    land_no_farm.area = 50.5\n    land_no_farm.latitud = 4.5709\n    land_no_farm.longitud = -74.2973",
        "detail": "tests.land.test_get_lands",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef mock_land():\n    \"\"\"Crea un mock de un objeto Land existente\"\"\"\n    land = MagicMock(spec=Land)",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "mock_land",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def mock_land():\n    \"\"\"Crea un mock de un objeto Land existente\"\"\"\n    land = MagicMock(spec=Land)\n    land.id = 1\n    land.nombre = \"Lote Norte\"\n    land.finca_id = 1\n    land.area = 50.5\n    land.latitud = 4.5709\n    land.longitud = -74.2973\n    land.slug = \"lote-norte\"",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "valid_update_data",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def valid_update_data():\n    \"\"\"Crea datos válidos para actualizar un lote\"\"\"\n    return UpdateLandSchema(\n        nombre=\"Lote Norte Actualizado\",\n        area=60.5,\n        latitud=4.5710,\n        longitud=-74.2974\n    )\ndef test_update_land_success(mock_session, mock_land, valid_update_data):\n    \"\"\"Prueba la actualización exitosa de un lote\"\"\"",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "test_update_land_success",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def test_update_land_success(mock_session, mock_land, valid_update_data):\n    \"\"\"Prueba la actualización exitosa de un lote\"\"\"\n    # Configurar el mock de la sesión para devolver el lote cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    # Ejecutar la función\n    result = updateLand(1, valid_update_data, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called\n    assert mock_session.refresh.called\n    assert \"msg\" in result",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "test_update_land_partial",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def test_update_land_partial(mock_session, mock_land):\n    \"\"\"Prueba la actualización parcial de un lote (solo algunos campos)\"\"\"\n    # Crear datos de actualización parcial (solo nombre)\n    partial_update = UpdateLandSchema(nombre=\"Lote Norte Parcial\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    # Ejecutar la función\n    result = updateLand(1, partial_update, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "test_update_land_not_found",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def test_update_land_not_found(mock_session, valid_update_data):\n    \"\"\"Prueba el caso en que no se encuentra el lote para actualizar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateLand(999, valid_update_data, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"Lote con id 999 no encontrado\" in excinfo.value.detail\n    # Verificar que no se llamó a commit ni refresh",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "test_update_land_empty_values",
        "kind": 2,
        "importPath": "tests.land.test_update_land",
        "description": "tests.land.test_update_land",
        "peekOfCode": "def test_update_land_empty_values(mock_session, mock_land):\n    \"\"\"Prueba la actualización con valores vacíos o None\"\"\"\n    # Crear datos de actualización con algunos valores vacíos\n    empty_update = UpdateLandSchema(nombre=\"\", area=None)\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_land\n    # Ejecutar la función\n    result = updateLand(1, empty_update, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called",
        "detail": "tests.land.test_update_land",
        "documentation": {}
    },
    {
        "label": "mock_db",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def mock_db():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    db = MagicMock(spec=Session)\n    return db\n@pytest.fixture\ndef sample_role():\n    \"\"\"Crea un rol de ejemplo para pruebas\"\"\"\n    return Rol(id=1, nombre=\"Admin\", descripcion=\"Rol de administrador\")\n@pytest.fixture\ndef sample_role_create():",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "sample_role",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def sample_role():\n    \"\"\"Crea un rol de ejemplo para pruebas\"\"\"\n    return Rol(id=1, nombre=\"Admin\", descripcion=\"Rol de administrador\")\n@pytest.fixture\ndef sample_role_create():\n    \"\"\"Crea un objeto RoleCreate para pruebas\"\"\"\n    return RoleCreate(nombre=\"Admin\", descripcion=\"Rol de administrador\", permisos=[1, 2])\n@pytest.fixture\ndef sample_role_update():\n    \"\"\"Crea un objeto RoleUpdate para pruebas\"\"\"",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "sample_role_create",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def sample_role_create():\n    \"\"\"Crea un objeto RoleCreate para pruebas\"\"\"\n    return RoleCreate(nombre=\"Admin\", descripcion=\"Rol de administrador\", permisos=[1, 2])\n@pytest.fixture\ndef sample_role_update():\n    \"\"\"Crea un objeto RoleUpdate para pruebas\"\"\"\n    return RoleUpdate(nombre=\"Super Admin\", descripcion=\"Rol de super administrador\")\n# Tests para create_role\ndef test_create_role_success(mock_db, sample_role_create):\n    # Configurar el comportamiento del mock",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "sample_role_update",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def sample_role_update():\n    \"\"\"Crea un objeto RoleUpdate para pruebas\"\"\"\n    return RoleUpdate(nombre=\"Super Admin\", descripcion=\"Rol de super administrador\")\n# Tests para create_role\ndef test_create_role_success(mock_db, sample_role_create):\n    # Configurar el comportamiento del mock\n    mock_db.commit = MagicMock()\n    mock_db.refresh = MagicMock()\n    mock_db.add = MagicMock()\n    # Simular la asignación de ID después de refresh",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_create_role_success",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_create_role_success(mock_db, sample_role_create):\n    # Configurar el comportamiento del mock\n    mock_db.commit = MagicMock()\n    mock_db.refresh = MagicMock()\n    mock_db.add = MagicMock()\n    # Simular la asignación de ID después de refresh\n    mock_db.refresh.side_effect = lambda x: setattr(x, \"id\", 1)\n    # Ejecutar la función\n    result = create_role(sample_role_create, mock_db)\n    # Verificaciones",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_create_role_without_permissions",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_create_role_without_permissions(mock_db):\n    # Crear rol sin permisos\n    role_create = RoleCreate(nombre=\"Viewer\", descripcion=\"Rol de visualización\", permisos=[])\n    # Configurar el comportamiento del mock\n    mock_db.commit = MagicMock()\n    mock_db.refresh = MagicMock()\n    mock_db.add = MagicMock()\n    mock_db.refresh.side_effect = lambda x: setattr(x, \"id\", 1)\n    # Ejecutar la función\n    result = create_role(role_create, mock_db)",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_get_roles_success",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_get_roles_success(mock_db):\n    # Configurar datos de prueba\n    mock_roles = [\n        Rol(id=1, nombre=\"Admin\", descripcion=\"Rol de administrador\"),\n        Rol(id=2, nombre=\"User\", descripcion=\"Rol de usuario\")\n    ]\n    # Configurar el comportamiento del mock\n    mock_db.query.return_value.all.return_value = mock_roles\n    # Ejecutar la función\n    result = get_roles(mock_db)",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_get_roles_empty",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_get_roles_empty(mock_db):\n    # Configurar el comportamiento del mock para devolver lista vacía\n    mock_db.query.return_value.all.return_value = []\n    # Ejecutar la función\n    result = get_roles(mock_db)\n    # Verificaciones\n    assert result[\"message\"] == \"0 roles found\"\n    assert result[\"roles\"] == []\n# Tests para get_role_by_id\ndef test_get_role_by_id_success(mock_db, sample_role):",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_get_role_by_id_success",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_get_role_by_id_success(mock_db, sample_role):\n    # Configurar el comportamiento del mock\n    mock_db.query.return_value.filter.return_value.first.return_value = sample_role\n    # Mock para Role.from_orm\n    sample_role_schema = MagicMock()\n    Role.from_orm = MagicMock(return_value=sample_role_schema)\n    # Ejecutar la función\n    result = get_role_by_id(1, mock_db)\n    # Verificaciones\n    assert result[\"message\"] == \"Role found\"",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_get_role_by_id_not_found",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_get_role_by_id_not_found(mock_db):\n    # Configurar el comportamiento del mock para simular que no se encuentra el rol\n    mock_db.query.return_value.filter.return_value.first.return_value = None\n    # Ejecutar la función y verificar que lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        get_role_by_id(999, mock_db)\n    # Verificar el código de estado y el detalle de la excepción\n    assert excinfo.value.status_code == 404\n    assert excinfo.value.detail == \"Role not found\"\n# Tests para update_role",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_update_role_success",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_update_role_success(mock_db, sample_role, sample_role_update):\n    # Configurar el comportamiento del mock\n    mock_db.query.return_value.filter.return_value.first.return_value = sample_role\n    # Ejecutar la función\n    result = update_role(1, sample_role_update, mock_db)\n    # Verificaciones\n    assert result[\"message\"] == \"Role updated successfully\"\n    assert sample_role.nombre == sample_role_update.nombre\n    assert sample_role.descripcion == sample_role_update.descripcion\n    mock_db.commit.assert_called_once()",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_update_role_partial",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_update_role_partial(mock_db, sample_role):\n    # Crear un objeto de actualización con solo un campo\n    partial_update = RoleUpdate(nombre=\"Manager\", descripcion=None)\n    # Configurar el comportamiento del mock\n    mock_db.query.return_value.filter.return_value.first.return_value = sample_role\n    # Guardar valores originales para comparar después\n    original_descripcion = sample_role.descripcion\n    # Ejecutar la función\n    result = update_role(1, partial_update, mock_db)\n    # Verificaciones",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_update_role_not_found",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_update_role_not_found(mock_db, sample_role_update):\n    # Configurar el comportamiento del mock para simular que no se encuentra el rol\n    mock_db.query.return_value.filter.return_value.first.return_value = None\n    # Ejecutar la función y verificar que lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        update_role(999, sample_role_update, mock_db)\n    # Verificar el código de estado y el detalle de la excepción\n    assert excinfo.value.status_code == 404\n    assert excinfo.value.detail == \"Role not found\"\n# Tests para delete_role",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_delete_role_success",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_delete_role_success(mock_db, sample_role):\n    # Configurar el comportamiento del mock\n    mock_db.query.return_value.filter.return_value.first.return_value = sample_role\n    # Ejecutar la función\n    result = delete_role(1, mock_db)\n    # Verificaciones\n    assert result[\"message\"] == \"Role deleted successfully\"\n    mock_db.delete.assert_called_once_with(sample_role)\n    mock_db.commit.assert_called_once()\ndef test_delete_role_not_found(mock_db):",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "test_delete_role_not_found",
        "kind": 2,
        "importPath": "tests.role.test_role",
        "description": "tests.role.test_role",
        "peekOfCode": "def test_delete_role_not_found(mock_db):\n    # Configurar el comportamiento del mock para simular que no se encuentra el rol\n    mock_db.query.return_value.filter.return_value.first.return_value = None\n    # Ejecutar la función y verificar que lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        delete_role(999, mock_db)\n    # Verificar el código de estado y el detalle de la excepción\n    assert excinfo.value.status_code == 404\n    assert excinfo.value.detail == \"Role not found\"",
        "detail": "tests.role.test_role",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef valid_user_data():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "valid_user_data",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def valid_user_data():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)\n    MagicMock(spec=Machinery)\n    MagicMock(spec=Estado)\n    MagicMock(spec=Farm)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_success",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_success(mock_session, valid_user_data):\n    \"\"\"Prueba el registro exitoso de un nuevo usuario\"\"\"\n    # Configuramos el mock para que no encuentre usuarios existentes con el correo\n    mock_session.query.return_value.filter_by.return_value.first.return_value = None\n    # Crear un mock para el nuevo usuario\n    new_user = MagicMock(spec=User)\n    new_user.id = 1\n    mock_session.refresh.side_effect = lambda x: setattr(x, 'id', 1) if isinstance(x, User) else None\n    # Parcheamos la función add para capturar el usuario creado\n    def mock_add(user):",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_email_exists",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_email_exists(mock_session, valid_user_data):\n    \"\"\"Prueba que no se pueda registrar un usuario con un correo ya existente\"\"\"\n    # Configuramos el mock para que encuentre un usuario existente con el correo\n    existing_user = MagicMock(spec=User)\n    mock_session.query.return_value.filter_by.return_value.first.return_value = existing_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        registerUser(valid_user_data, mock_session)\n    assert excinfo.value.status_code == 400\n    assert \"Email already registered\" in excinfo.value.detail",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_empty_fields",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_empty_fields(mock_session):\n    \"\"\"Prueba validaciones de campos vacíos\"\"\"\n    # Casos de prueba con campos vacíos\n    cases = [\n        (CrearUsuario(nombre=\"\", apellido=\"Perez\", email=\"jp@example.com\", password=\"Password123\"), \"Name cannot be empty\"),\n        (CrearUsuario(nombre=\"Juan\", apellido=\"\", email=\"jp@example.com\", password=\"Password123\"), \"Last name cannot be empty\"),\n        (CrearUsuario(nombre=\"Juan\", apellido=\"Perez\", email=\"\", password=\"Password123\"), \"Email cannot be empty\"),\n        (CrearUsuario(nombre=\"Juan\", apellido=\"Perez\", email=\"jp@example.com\", password=\"\"), \"Password cannot be empty\")\n    ]\n    for user_data, expected_error in cases:",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_length_validations",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_length_validations(mock_session):\n    \"\"\"Prueba validación de longitud de campos\"\"\"\n    # Nombre muy largo\n    long_name_user = CrearUsuario(\n        nombre=\"A\" * 51,  # 51 caracteres\n        apellido=\"Perez\",\n        email=\"jp@example.com\",\n        password=\"Password123\"\n    )\n    with pytest.raises(HTTPException) as excinfo:",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_email_format",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_email_format(mock_session):\n    \"\"\"Prueba validación de formato de email\"\"\"\n    invalid_email_user = CrearUsuario(\n        nombre=\"Juan\",\n        apellido=\"Perez\",\n        email=\"juanperezexample.com\",  # Sin @\n        password=\"Password123\"\n    )\n    with pytest.raises(HTTPException) as excinfo:\n        registerUser(invalid_email_user, mock_session)",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_password_complexity",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_password_complexity(mock_session):\n    \"\"\"Prueba validación de complejidad de contraseña\"\"\"\n    # Contraseña sin mayúsculas\n    weak_password1 = CrearUsuario(\n        nombre=\"Juan\",\n        apellido=\"Perez\",\n        email=\"jp@example.com\",\n        password=\"password123\"\n    )\n    with pytest.raises(HTTPException) as excinfo:",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "test_register_user_name_with_special_chars",
        "kind": 2,
        "importPath": "tests.users.test_create_user",
        "description": "tests.users.test_create_user",
        "peekOfCode": "def test_register_user_name_with_special_chars(mock_session):\n    \"\"\"Prueba validación de nombres y apellidos sin caracteres especiales\"\"\"\n    user_with_special_chars = CrearUsuario(\n        nombre=\"Juan123\",\n        apellido=\"Perez\",\n        email=\"jp@example.com\",\n        password=\"Password123\"\n    )\n    with pytest.raises(HTTPException) as excinfo:\n        registerUser(user_with_special_chars, mock_session)",
        "detail": "tests.users.test_create_user",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.users.test_delete_user",
        "description": "tests.users.test_delete_user",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    return session\n@pytest.fixture\ndef mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)",
        "detail": "tests.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "mock_user",
        "kind": 2,
        "importPath": "tests.users.test_delete_user",
        "description": "tests.users.test_delete_user",
        "peekOfCode": "def mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)\n    MagicMock(spec=Machinery)\n    MagicMock(spec=Estado)\n    MagicMock(spec=Farm)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "test_delete_user_success",
        "kind": 2,
        "importPath": "tests.users.test_delete_user",
        "description": "tests.users.test_delete_user",
        "peekOfCode": "def test_delete_user_success(mock_session, mock_user):\n    \"\"\"Prueba la eliminación exitosa de un usuario\"\"\"\n    # Configurar el mock de la sesión para devolver el usuario cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Ejecutar la función\n    result = deleteUser(1, mock_session)\n    # Verificaciones\n    mock_session.delete.assert_called_once_with(mock_user)\n    assert mock_session.commit.called\n    # Verificar la respuesta",
        "detail": "tests.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "test_delete_user_not_found",
        "kind": 2,
        "importPath": "tests.users.test_delete_user",
        "description": "tests.users.test_delete_user",
        "peekOfCode": "def test_delete_user_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra el usuario para eliminar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        deleteUser(999, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"User not found\" in excinfo.value.detail\n    # Verificar que no se llamó a delete ni commit",
        "detail": "tests.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "test_delete_user_database_error",
        "kind": 2,
        "importPath": "tests.users.test_delete_user",
        "description": "tests.users.test_delete_user",
        "peekOfCode": "def test_delete_user_database_error(mock_session, mock_user):\n    \"\"\"Prueba el manejo de errores de base de datos durante la eliminación\"\"\"\n    # Configurar el mock de la sesión para devolver el usuario pero lanzar una excepción al eliminar\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    mock_session.commit.side_effect = Exception(\"Database error\")\n    # Verificar que se maneja correctamente la excepción\n    with pytest.raises(Exception) as excinfo:\n        deleteUser(1, mock_session)\n    assert str(excinfo.value) == \"Database error\"\n    # Verificar que se llamó a delete pero la excepción ocurrió en commit",
        "detail": "tests.users.test_delete_user",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    return session\n@pytest.fixture\ndef mock_users():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "mock_users",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def mock_users():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)\n    MagicMock(spec=Machinery)\n    MagicMock(spec=Estado)\n    MagicMock(spec=Farm)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "test_get_users_success",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def test_get_users_success(mock_get_current_user, mock_session, mock_users):\n    \"\"\"Prueba la obtención exitosa de todos los usuarios\"\"\"\n    # Configurar el mock de la sesión para devolver la lista de usuarios\n    mock_session.query.return_value.all.return_value = mock_users\n    # Configurar el mock para el usuario actual\n    current_user = MagicMock(spec=User)\n    current_user.id = 1\n    mock_get_current_user.return_value = current_user\n    # Ejecutar la función\n    result = getUsers(mock_session, current_user)",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "test_get_user_by_id_success",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def test_get_user_by_id_success(mock_session, mock_users):\n    \"\"\"Prueba la obtención exitosa de un usuario por ID\"\"\"\n    # Configurar el mock de la sesión para devolver el usuario cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_users[0]\n    # Ejecutar la función\n    result = getUser(1, mock_session)\n    # Verificaciones\n    assert result == mock_users[0]\n    assert result.id == 1\n    assert result.nombre == \"Juan\"",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "test_get_user_by_id_not_found",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def test_get_user_by_id_not_found(mock_session):\n    \"\"\"Prueba el caso en que no se encuentra un usuario por ID\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        getUser(999, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"User not found\" in excinfo.value.detail\n@patch('src.controller.userController.get_current_user')",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "test_get_users_empty_list",
        "kind": 2,
        "importPath": "tests.users.test_get_user_info",
        "description": "tests.users.test_get_user_info",
        "peekOfCode": "def test_get_users_empty_list(mock_get_current_user, mock_session):\n    \"\"\"Prueba el caso en que no hay usuarios en la base de datos\"\"\"\n    # Configurar el mock de la sesión para devolver una lista vacía\n    mock_session.query.return_value.all.return_value = []\n    # Configurar el mock para el usuario actual\n    current_user = MagicMock(spec=User)\n    current_user.id = 1\n    mock_get_current_user.return_value = current_user\n    # Ejecutar la función\n    result = getUsers(mock_session, current_user)",
        "detail": "tests.users.test_get_user_info",
        "documentation": {}
    },
    {
        "label": "mock_session",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def mock_session():\n    \"\"\"Crea un mock para la sesión de base de datos\"\"\"\n    session = MagicMock(spec=Session)\n    session.commit = MagicMock()\n    session.refresh = MagicMock()\n    return session\n@pytest.fixture\ndef mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "mock_user",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def mock_user():\n    MagicMock(spec=Task)\n    MagicMock(spec=Crop)\n    MagicMock(spec=AgriculturalInput)\n    MagicMock(spec=LaborCultural)\n    MagicMock(spec=Machinery)\n    MagicMock(spec=Estado)\n    MagicMock(spec=Farm)\n    MagicMock(spec=SoilAnalysisModel)\n    MagicMock(spec=WeatherRecord)",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "valid_update_data",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def valid_update_data():\n    \"\"\"Crea datos válidos para actualizar un usuario\"\"\"\n    return UpdateUser(\n        nombre=\"Juan Carlos\",\n        apellido=\"Perez Gomez\",\n        email=\"jcperez@example.com\",\n        password=\"NewPassword123\",\n        primer_login=False\n    )\ndef test_update_user_success(mock_session, mock_user, valid_update_data):",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_success",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_success(mock_session, mock_user, valid_update_data):\n    \"\"\"Prueba la actualización exitosa de un usuario\"\"\"\n    # Configurar el mock de la sesión para devolver el usuario cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Ejecutar la función\n    result = updateUser(1, valid_update_data, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called\n    assert mock_session.refresh.called\n    # Verificar que los atributos se hayan actualizado correctamente",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_partial",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_partial(mock_session, mock_user):\n    \"\"\"Prueba la actualización parcial de un usuario\"\"\"\n    # Crear datos de actualización parcial\n    partial_update = UpdateUser(nombre=\"Juan Carlos\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Ejecutar la función\n    result = updateUser(1, partial_update, mock_session)\n    # Verificaciones\n    assert mock_session.commit.called",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_not_found",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_not_found(mock_session, valid_update_data):\n    \"\"\"Prueba el caso en que no se encuentra el usuario para actualizar\"\"\"\n    # Configurar el mock de la sesión para devolver None cuando se filtra por ID\n    mock_session.query.return_value.filter.return_value.first.return_value = None\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(999, valid_update_data, mock_session)\n    assert excinfo.value.status_code == 404\n    assert \"User not found\" in excinfo.value.detail\n    # Verificar que no se llamó a commit ni refresh",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_invalid_name",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_invalid_name(mock_session, mock_user):\n    \"\"\"Prueba validación de formato de nombre\"\"\"\n    # Nombre con números\n    invalid_name = UpdateUser(nombre=\"Juan123\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(1, invalid_name, mock_session)\n    assert excinfo.value.status_code == 400",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_invalid_lastname",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_invalid_lastname(mock_session, mock_user):\n    \"\"\"Prueba validación de formato de apellido\"\"\"\n    # Apellido con caracteres especiales\n    invalid_lastname = UpdateUser(apellido=\"Perez@123\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(1, invalid_lastname, mock_session)\n    assert excinfo.value.status_code == 400",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_invalid_email_format",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_invalid_email_format(mock_session, mock_user):\n    \"\"\"Prueba validación de formato de email\"\"\"\n    # Email sin @\n    invalid_email = UpdateUser(email=\"juanperezexample.com\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(1, invalid_email, mock_session)\n    assert excinfo.value.status_code == 400",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_password_complexity",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_password_complexity(mock_session, mock_user):\n    \"\"\"Prueba validación de complejidad de contraseña\"\"\"\n    # Contraseña simple\n    weak_password = UpdateUser(password=\"simple\")\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(1, weak_password, mock_session)\n    assert excinfo.value.status_code == 400",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "test_update_user_with_long_fields",
        "kind": 2,
        "importPath": "tests.users.test_update_user",
        "description": "tests.users.test_update_user",
        "peekOfCode": "def test_update_user_with_long_fields(mock_session, mock_user):\n    \"\"\"Prueba validación de longitud de campos\"\"\"\n    # Nombre muy largo\n    long_name = UpdateUser(nombre=\"A\" * 51)  # 51 caracteres\n    # Configurar el mock de la sesión\n    mock_session.query.return_value.filter.return_value.first.return_value = mock_user\n    # Verificar que se lanza la excepción correcta\n    with pytest.raises(HTTPException) as excinfo:\n        updateUser(1, long_name, mock_session)\n    assert excinfo.value.status_code == 400",
        "detail": "tests.users.test_update_user",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"message\": \"Welcome to my API\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# Cargar variables de entorno desde el archivo .env\nload_dotenv()\n# Crear las tablas en la base de datos\nBase.metadata.create_all(engine)\n# Obtener las direcciones permitidas desde las variables de entorno\nallow_origins = os.getenv(\"ALLOW_ORIGINS\", \"\").split(\",\")\n# Depuración: Imprimir los orígenes permitidos\nprint(\"Orígenes permitidos para CORS:\", allow_origins)\n# Configuración del middleware de CORS",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "allow_origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "allow_origins = os.getenv(\"ALLOW_ORIGINS\", \"\").split(\",\")\n# Depuración: Imprimir los orígenes permitidos\nprint(\"Orígenes permitidos para CORS:\", allow_origins)\n# Configuración del middleware de CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Permite solicitudes desde cualquier origen\n    # allow_origins=allow_origins,  # Utilizar `allow_origins` si deseas configurarlo desde el .env\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Permite todos los métodos HTTP (GET, POST, etc.)",
        "detail": "main",
        "documentation": {}
    }
]